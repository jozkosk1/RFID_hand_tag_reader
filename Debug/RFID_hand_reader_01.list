
RFID_hand_reader_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be7c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003df8  0800bf38  0800bf38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd30  0800fd30  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd38  0800fd38  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd38  0800fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800fd40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005730  20000108  0800fe44  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005838  0800fe44  00025838  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c9a  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003863  00000000  00000000  00039dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003eb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146fe  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c3  00000000  00000000  00054566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072627  00000000  00000000  00070d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  000e33a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000108 	.word	0x20000108
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800bf20 	.word	0x0800bf20

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000010c 	.word	0x2000010c
 8000100:	0800bf20 	.word	0x0800bf20

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f82e 	bl	80004a4 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_lmul>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	0415      	lsls	r5, r2, #16
 8000458:	0c2d      	lsrs	r5, r5, #16
 800045a:	000f      	movs	r7, r1
 800045c:	0001      	movs	r1, r0
 800045e:	002e      	movs	r6, r5
 8000460:	46c6      	mov	lr, r8
 8000462:	4684      	mov	ip, r0
 8000464:	0400      	lsls	r0, r0, #16
 8000466:	0c14      	lsrs	r4, r2, #16
 8000468:	0c00      	lsrs	r0, r0, #16
 800046a:	0c09      	lsrs	r1, r1, #16
 800046c:	4346      	muls	r6, r0
 800046e:	434d      	muls	r5, r1
 8000470:	4360      	muls	r0, r4
 8000472:	4361      	muls	r1, r4
 8000474:	1940      	adds	r0, r0, r5
 8000476:	0c34      	lsrs	r4, r6, #16
 8000478:	1824      	adds	r4, r4, r0
 800047a:	b500      	push	{lr}
 800047c:	42a5      	cmp	r5, r4
 800047e:	d903      	bls.n	8000488 <__aeabi_lmul+0x34>
 8000480:	2080      	movs	r0, #128	; 0x80
 8000482:	0240      	lsls	r0, r0, #9
 8000484:	4680      	mov	r8, r0
 8000486:	4441      	add	r1, r8
 8000488:	0c25      	lsrs	r5, r4, #16
 800048a:	186d      	adds	r5, r5, r1
 800048c:	4661      	mov	r1, ip
 800048e:	4359      	muls	r1, r3
 8000490:	437a      	muls	r2, r7
 8000492:	0430      	lsls	r0, r6, #16
 8000494:	1949      	adds	r1, r1, r5
 8000496:	0424      	lsls	r4, r4, #16
 8000498:	0c00      	lsrs	r0, r0, #16
 800049a:	1820      	adds	r0, r4, r0
 800049c:	1889      	adds	r1, r1, r2
 800049e:	bc80      	pop	{r7}
 80004a0:	46b8      	mov	r8, r7
 80004a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	1c08      	adds	r0, r1, #0
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <i2c_write_reg>:
#include "DS3231.h"

RealTime_structure RealTime;

void i2c_write_reg (I2C_HandleTypeDef *i2c, uint8_t reg_address, uint8_t data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	0008      	movs	r0, r1
 800069a:	0011      	movs	r1, r2
 800069c:	1cfb      	adds	r3, r7, #3
 800069e:	1c02      	adds	r2, r0, #0
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	1cbb      	adds	r3, r7, #2
 80006a4:	1c0a      	adds	r2, r1, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	uint8_t data_tx[2];

	data_tx[0] = reg_address;
 80006a8:	210c      	movs	r1, #12
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	1cfa      	adds	r2, r7, #3
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
	data_tx[1] = data;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	1cba      	adds	r2, r7, #2
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, DS3231_ADR, data_tx, 2, 100);
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2302      	movs	r3, #2
 80006c4:	21d0      	movs	r1, #208	; 0xd0
 80006c6:	f007 fbdf 	bl	8007e88 <HAL_I2C_Master_Transmit>
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b004      	add	sp, #16
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <i2c_read_reg>:
uint8_t i2c_read_reg (I2C_HandleTypeDef *i2c, uint8_t reg_address)
{
 80006d2:	b590      	push	{r4, r7, lr}
 80006d4:	b087      	sub	sp, #28
 80006d6:	af02      	add	r7, sp, #8
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	000a      	movs	r2, r1
 80006dc:	1cfb      	adds	r3, r7, #3
 80006de:	701a      	strb	r2, [r3, #0]
	uint8_t data_tx[1];
	uint8_t data_rx[1];

	data_tx[0] = reg_address;
 80006e0:	210c      	movs	r1, #12
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	1cfa      	adds	r2, r7, #3
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, DS3231_ADR, data_tx, 1, 100);
 80006ea:	187a      	adds	r2, r7, r1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2301      	movs	r3, #1
 80006f4:	21d0      	movs	r1, #208	; 0xd0
 80006f6:	f007 fbc7 	bl	8007e88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, DS3231_ADR, data_rx, 1,100);
 80006fa:	2408      	movs	r4, #8
 80006fc:	193a      	adds	r2, r7, r4
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2301      	movs	r3, #1
 8000706:	21d0      	movs	r1, #208	; 0xd0
 8000708:	f007 fcc6 	bl	8008098 <HAL_I2C_Master_Receive>
	return data_rx[0];
 800070c:	193b      	adds	r3, r7, r4
 800070e:	781b      	ldrb	r3, [r3, #0]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b005      	add	sp, #20
 8000716:	bd90      	pop	{r4, r7, pc}

08000718 <time_read>:
void time_read(I2C_HandleTypeDef *i2c)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint8_t rx_data;
	rx_data = i2c_read_reg(i2c, 0x00);
 8000720:	250f      	movs	r5, #15
 8000722:	197c      	adds	r4, r7, r5
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ffd2 	bl	80006d2 <i2c_read_reg>
 800072e:	0003      	movs	r3, r0
 8000730:	7023      	strb	r3, [r4, #0]
	RealTime.seconds = (rx_data & 0x0f)+(((rx_data & 0x70)>>4)*10);
 8000732:	0028      	movs	r0, r5
 8000734:	183b      	adds	r3, r7, r0
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	220f      	movs	r2, #15
 800073a:	4013      	ands	r3, r2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	183b      	adds	r3, r7, r0
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	111b      	asrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2107      	movs	r1, #7
 8000748:	400b      	ands	r3, r1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	1c19      	adds	r1, r3, #0
 800074e:	0089      	lsls	r1, r1, #2
 8000750:	18cb      	adds	r3, r1, r3
 8000752:	18db      	adds	r3, r3, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	18d3      	adds	r3, r2, r3
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <time_read+0x190>)
 800075c:	701a      	strb	r2, [r3, #0]

	rx_data = i2c_read_reg(i2c, 0x01);
 800075e:	0005      	movs	r5, r0
 8000760:	183c      	adds	r4, r7, r0
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff ffb3 	bl	80006d2 <i2c_read_reg>
 800076c:	0003      	movs	r3, r0
 800076e:	7023      	strb	r3, [r4, #0]
	RealTime.minutes = (rx_data & 0x0f)+(((rx_data & 0x70)>>4)*10);
 8000770:	0028      	movs	r0, r5
 8000772:	183b      	adds	r3, r7, r0
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	220f      	movs	r2, #15
 8000778:	4013      	ands	r3, r2
 800077a:	b2da      	uxtb	r2, r3
 800077c:	183b      	adds	r3, r7, r0
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	111b      	asrs	r3, r3, #4
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2107      	movs	r1, #7
 8000786:	400b      	ands	r3, r1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	1c19      	adds	r1, r3, #0
 800078c:	0089      	lsls	r1, r1, #2
 800078e:	18cb      	adds	r3, r1, r3
 8000790:	18db      	adds	r3, r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	18d3      	adds	r3, r2, r3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <time_read+0x190>)
 800079a:	705a      	strb	r2, [r3, #1]

	rx_data = i2c_read_reg(i2c, 0x02);
 800079c:	0005      	movs	r5, r0
 800079e:	183c      	adds	r4, r7, r0
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2102      	movs	r1, #2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ff94 	bl	80006d2 <i2c_read_reg>
 80007aa:	0003      	movs	r3, r0
 80007ac:	7023      	strb	r3, [r4, #0]
	RealTime.hours = (rx_data & 0x0f);
 80007ae:	0028      	movs	r0, r5
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	220f      	movs	r2, #15
 80007b6:	4013      	ands	r3, r2
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <time_read+0x190>)
 80007bc:	709a      	strb	r2, [r3, #2]
	if (rx_data & 0x10)
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2210      	movs	r2, #16
 80007c4:	4013      	ands	r3, r2
 80007c6:	d005      	beq.n	80007d4 <time_read+0xbc>
		RealTime.hours = RealTime.hours + 10;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <time_read+0x190>)
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	330a      	adds	r3, #10
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <time_read+0x190>)
 80007d2:	709a      	strb	r2, [r3, #2]
	if (rx_data & 0x20)
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2220      	movs	r2, #32
 80007dc:	4013      	ands	r3, r2
 80007de:	d005      	beq.n	80007ec <time_read+0xd4>
		RealTime.hours = RealTime.hours + 20;
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <time_read+0x190>)
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	3314      	adds	r3, #20
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <time_read+0x190>)
 80007ea:	709a      	strb	r2, [r3, #2]

	rx_data = i2c_read_reg(i2c, 0x4);
 80007ec:	250f      	movs	r5, #15
 80007ee:	197c      	adds	r4, r7, r5
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2104      	movs	r1, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ff6c 	bl	80006d2 <i2c_read_reg>
 80007fa:	0003      	movs	r3, r0
 80007fc:	7023      	strb	r3, [r4, #0]
	RealTime.date = (rx_data & 0x0f)+(((rx_data & 0x30)>>4)*10);
 80007fe:	0028      	movs	r0, r5
 8000800:	183b      	adds	r3, r7, r0
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	220f      	movs	r2, #15
 8000806:	4013      	ands	r3, r2
 8000808:	b2da      	uxtb	r2, r3
 800080a:	183b      	adds	r3, r7, r0
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	111b      	asrs	r3, r3, #4
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2103      	movs	r1, #3
 8000814:	400b      	ands	r3, r1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	1c19      	adds	r1, r3, #0
 800081a:	0089      	lsls	r1, r1, #2
 800081c:	18cb      	adds	r3, r1, r3
 800081e:	18db      	adds	r3, r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	18d3      	adds	r3, r2, r3
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <time_read+0x190>)
 8000828:	70da      	strb	r2, [r3, #3]

	rx_data = i2c_read_reg(i2c, 0x5);
 800082a:	0005      	movs	r5, r0
 800082c:	183c      	adds	r4, r7, r0
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2105      	movs	r1, #5
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff4d 	bl	80006d2 <i2c_read_reg>
 8000838:	0003      	movs	r3, r0
 800083a:	7023      	strb	r3, [r4, #0]
	RealTime.month = (rx_data & 0x0f)+(((rx_data & 0x10)>>4)*10);
 800083c:	0028      	movs	r0, r5
 800083e:	183b      	adds	r3, r7, r0
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	220f      	movs	r2, #15
 8000844:	4013      	ands	r3, r2
 8000846:	b2da      	uxtb	r2, r3
 8000848:	183b      	adds	r3, r7, r0
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	111b      	asrs	r3, r3, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2101      	movs	r1, #1
 8000852:	400b      	ands	r3, r1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	1c19      	adds	r1, r3, #0
 8000858:	0089      	lsls	r1, r1, #2
 800085a:	18cb      	adds	r3, r1, r3
 800085c:	18db      	adds	r3, r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	18d3      	adds	r3, r2, r3
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <time_read+0x190>)
 8000866:	711a      	strb	r2, [r3, #4]

	rx_data = i2c_read_reg(i2c, 0x6);
 8000868:	0005      	movs	r5, r0
 800086a:	183c      	adds	r4, r7, r0
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2106      	movs	r1, #6
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff2e 	bl	80006d2 <i2c_read_reg>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
	RealTime.year = (rx_data & 0x0f)+(((rx_data & 0xf0)>>4)*10);
 800087a:	0028      	movs	r0, r5
 800087c:	183b      	adds	r3, r7, r0
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	220f      	movs	r2, #15
 8000882:	4013      	ands	r3, r2
 8000884:	b2da      	uxtb	r2, r3
 8000886:	183b      	adds	r3, r7, r0
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	b2db      	uxtb	r3, r3
 800088e:	1c19      	adds	r1, r3, #0
 8000890:	0089      	lsls	r1, r1, #2
 8000892:	18cb      	adds	r3, r1, r3
 8000894:	18db      	adds	r3, r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <time_read+0x190>)
 800089e:	715a      	strb	r2, [r3, #5]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b004      	add	sp, #16
 80008a6:	bdb0      	pop	{r4, r5, r7, pc}
 80008a8:	20000170 	.word	0x20000170

080008ac <time_set>:
void time_set(I2C_HandleTypeDef *i2c)
{
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint8_t tx_data=0;
 80008b4:	250f      	movs	r5, #15
 80008b6:	197b      	adds	r3, r7, r5
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
	tx_data = ((RealTime.seconds%10)&0x0f) + ((RealTime.seconds/10)<<4);
 80008bc:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <time_set+0x1c0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	210a      	movs	r1, #10
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff fcb6 	bl	8000234 <__aeabi_uidivmod>
 80008c8:	000b      	movs	r3, r1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	220f      	movs	r2, #15
 80008ce:	4013      	ands	r3, r2
 80008d0:	b2dc      	uxtb	r4, r3
 80008d2:	4b66      	ldr	r3, [pc, #408]	; (8000a6c <time_set+0x1c0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	210a      	movs	r1, #10
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff fc25 	bl	8000128 <__udivsi3>
 80008de:	0003      	movs	r3, r0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	197b      	adds	r3, r7, r5
 80008e8:	18a2      	adds	r2, r4, r2
 80008ea:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x00, tx_data);
 80008ec:	197b      	adds	r3, r7, r5
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fecb 	bl	8000690 <i2c_write_reg>

	tx_data = 0;
 80008fa:	197b      	adds	r3, r7, r5
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	tx_data = ((RealTime.minutes%10)&0x0f) + ((RealTime.minutes/10)<<4);
 8000900:	4b5a      	ldr	r3, [pc, #360]	; (8000a6c <time_set+0x1c0>)
 8000902:	785b      	ldrb	r3, [r3, #1]
 8000904:	210a      	movs	r1, #10
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fc94 	bl	8000234 <__aeabi_uidivmod>
 800090c:	000b      	movs	r3, r1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	220f      	movs	r2, #15
 8000912:	4013      	ands	r3, r2
 8000914:	b2dc      	uxtb	r4, r3
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <time_set+0x1c0>)
 8000918:	785b      	ldrb	r3, [r3, #1]
 800091a:	210a      	movs	r1, #10
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fc03 	bl	8000128 <__udivsi3>
 8000922:	0003      	movs	r3, r0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	b2da      	uxtb	r2, r3
 800092a:	197b      	adds	r3, r7, r5
 800092c:	18a2      	adds	r2, r4, r2
 800092e:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x01, tx_data);
 8000930:	197b      	adds	r3, r7, r5
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2101      	movs	r1, #1
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fea9 	bl	8000690 <i2c_write_reg>

	tx_data = 0;
 800093e:	197b      	adds	r3, r7, r5
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	tx_data = ((RealTime.hours%10)&0x0f);
 8000944:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <time_set+0x1c0>)
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	210a      	movs	r1, #10
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fc72 	bl	8000234 <__aeabi_uidivmod>
 8000950:	000b      	movs	r3, r1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	0028      	movs	r0, r5
 8000956:	183b      	adds	r3, r7, r0
 8000958:	210f      	movs	r1, #15
 800095a:	400a      	ands	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
	if (RealTime.hours >19)
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <time_set+0x1c0>)
 8000960:	789b      	ldrb	r3, [r3, #2]
 8000962:	2b13      	cmp	r3, #19
 8000964:	d905      	bls.n	8000972 <time_set+0xc6>
		tx_data = tx_data + 0x20;
 8000966:	183b      	adds	r3, r7, r0
 8000968:	183a      	adds	r2, r7, r0
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	3220      	adds	r2, #32
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	e009      	b.n	8000986 <time_set+0xda>
	else
		if (RealTime.hours > 9)
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <time_set+0x1c0>)
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b09      	cmp	r3, #9
 8000978:	d905      	bls.n	8000986 <time_set+0xda>
			tx_data = tx_data +0x10;
 800097a:	220f      	movs	r2, #15
 800097c:	18bb      	adds	r3, r7, r2
 800097e:	18ba      	adds	r2, r7, r2
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	3210      	adds	r2, #16
 8000984:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x02, tx_data);
 8000986:	250f      	movs	r5, #15
 8000988:	197b      	adds	r3, r7, r5
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2102      	movs	r1, #2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fe7d 	bl	8000690 <i2c_write_reg>

	tx_data=0;
 8000996:	197b      	adds	r3, r7, r5
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
	tx_data = ((RealTime.date%10)&0x0f) + ((RealTime.date/10)<<4);
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <time_set+0x1c0>)
 800099e:	78db      	ldrb	r3, [r3, #3]
 80009a0:	210a      	movs	r1, #10
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fc46 	bl	8000234 <__aeabi_uidivmod>
 80009a8:	000b      	movs	r3, r1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	220f      	movs	r2, #15
 80009ae:	4013      	ands	r3, r2
 80009b0:	b2dc      	uxtb	r4, r3
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <time_set+0x1c0>)
 80009b4:	78db      	ldrb	r3, [r3, #3]
 80009b6:	210a      	movs	r1, #10
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fbb5 	bl	8000128 <__udivsi3>
 80009be:	0003      	movs	r3, r0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	197b      	adds	r3, r7, r5
 80009c8:	18a2      	adds	r2, r4, r2
 80009ca:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x04, tx_data);
 80009cc:	197b      	adds	r3, r7, r5
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2104      	movs	r1, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fe5b 	bl	8000690 <i2c_write_reg>

	tx_data=0;
 80009da:	197b      	adds	r3, r7, r5
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	tx_data = ((RealTime.month%10)&0x0f) + ((RealTime.month/10)<<4);
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <time_set+0x1c0>)
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	210a      	movs	r1, #10
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fc24 	bl	8000234 <__aeabi_uidivmod>
 80009ec:	000b      	movs	r3, r1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	220f      	movs	r2, #15
 80009f2:	4013      	ands	r3, r2
 80009f4:	b2dc      	uxtb	r4, r3
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <time_set+0x1c0>)
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	210a      	movs	r1, #10
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fb93 	bl	8000128 <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	197b      	adds	r3, r7, r5
 8000a0c:	18a2      	adds	r2, r4, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x05, tx_data);
 8000a10:	197b      	adds	r3, r7, r5
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2105      	movs	r1, #5
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fe39 	bl	8000690 <i2c_write_reg>

	tx_data=0;
 8000a1e:	197b      	adds	r3, r7, r5
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
	tx_data = ((RealTime.year%10)&0x0f) + ((RealTime.year/10)<<4);
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <time_set+0x1c0>)
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	210a      	movs	r1, #10
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fc02 	bl	8000234 <__aeabi_uidivmod>
 8000a30:	000b      	movs	r3, r1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	220f      	movs	r2, #15
 8000a36:	4013      	ands	r3, r2
 8000a38:	b2dc      	uxtb	r4, r3
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <time_set+0x1c0>)
 8000a3c:	795b      	ldrb	r3, [r3, #5]
 8000a3e:	210a      	movs	r1, #10
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fb71 	bl	8000128 <__udivsi3>
 8000a46:	0003      	movs	r3, r0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	197b      	adds	r3, r7, r5
 8000a50:	18a2      	adds	r2, r4, r2
 8000a52:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x06, tx_data);
 8000a54:	197b      	adds	r3, r7, r5
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2106      	movs	r1, #6
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fe17 	bl	8000690 <i2c_write_reg>
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000170 	.word	0x20000170

08000a70 <time_alarm_reset>:
	temporary = i2c_read_reg(i2c, 0x0e);
	temporary |= (1<<0);
	i2c_write_reg(i2c, 0x0e, temporary);
}
void time_alarm_reset(I2C_HandleTypeDef *i2c)
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint8_t temporary;
	temporary = i2c_read_reg(i2c, 0x0e);
 8000a78:	250f      	movs	r5, #15
 8000a7a:	197c      	adds	r4, r7, r5
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	210e      	movs	r1, #14
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff fe26 	bl	80006d2 <i2c_read_reg>
 8000a86:	0003      	movs	r3, r0
 8000a88:	7023      	strb	r3, [r4, #0]
	temporary &= ~(1<<0);
 8000a8a:	197b      	adds	r3, r7, r5
 8000a8c:	197a      	adds	r2, r7, r5
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	438a      	bics	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
	temporary &= ~(1<<1);
 8000a96:	197b      	adds	r3, r7, r5
 8000a98:	197a      	adds	r2, r7, r5
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	438a      	bics	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x0e, temporary);
 8000aa2:	197b      	adds	r3, r7, r5
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	210e      	movs	r1, #14
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fdf0 	bl	8000690 <i2c_write_reg>


	temporary = i2c_read_reg(i2c, 0x0f);
 8000ab0:	197c      	adds	r4, r7, r5
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff fe0b 	bl	80006d2 <i2c_read_reg>
 8000abc:	0003      	movs	r3, r0
 8000abe:	7023      	strb	r3, [r4, #0]
	temporary &= ~(1<<0);
 8000ac0:	0028      	movs	r0, r5
 8000ac2:	183b      	adds	r3, r7, r0
 8000ac4:	183a      	adds	r2, r7, r0
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	438a      	bics	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
	temporary &= ~(1<<1);
 8000ace:	183b      	adds	r3, r7, r0
 8000ad0:	183a      	adds	r2, r7, r0
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	438a      	bics	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x0f, temporary);
 8000ada:	183b      	adds	r3, r7, r0
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fdd4 	bl	8000690 <i2c_write_reg>
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b004      	add	sp, #16
 8000aee:	bdb0      	pop	{r4, r5, r7, pc}

08000af0 <time_oscilator_stop_flag_reset>:
void time_oscilator_stop_flag_reset(I2C_HandleTypeDef *i2c)
{
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t temporary;
	temporary = i2c_read_reg(i2c, 0x0f);
 8000af8:	250f      	movs	r5, #15
 8000afa:	197c      	adds	r4, r7, r5
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	210f      	movs	r1, #15
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fde6 	bl	80006d2 <i2c_read_reg>
 8000b06:	0003      	movs	r3, r0
 8000b08:	7023      	strb	r3, [r4, #0]
	temporary &= ~(1<<7);
 8000b0a:	0028      	movs	r0, r5
 8000b0c:	183b      	adds	r3, r7, r0
 8000b0e:	183a      	adds	r2, r7, r0
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	217f      	movs	r1, #127	; 0x7f
 8000b14:	400a      	ands	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
	i2c_write_reg(i2c, 0x0f, temporary);
 8000b18:	183b      	adds	r3, r7, r0
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	210f      	movs	r1, #15
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fdb5 	bl	8000690 <i2c_write_reg>
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bdb0      	pop	{r4, r5, r7, pc}

08000b2e <BQ25890_write_reg>:
 */

#include "bq25890.h"

void BQ25890_write_reg (I2C_HandleTypeDef *i2c, uint8_t reg_address, uint8_t data)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af02      	add	r7, sp, #8
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	0008      	movs	r0, r1
 8000b38:	0011      	movs	r1, r2
 8000b3a:	1cfb      	adds	r3, r7, #3
 8000b3c:	1c02      	adds	r2, r0, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	1cbb      	adds	r3, r7, #2
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	uint8_t data_tx[2];

	data_tx[0] = reg_address;
 8000b46:	210c      	movs	r1, #12
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	1cfa      	adds	r2, r7, #3
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	701a      	strb	r2, [r3, #0]
	data_tx[1] = data;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	1cba      	adds	r2, r7, #2
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, I2C_ADR, data_tx, 2, 100);
 8000b58:	187a      	adds	r2, r7, r1
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2302      	movs	r3, #2
 8000b62:	21d4      	movs	r1, #212	; 0xd4
 8000b64:	f007 f990 	bl	8007e88 <HAL_I2C_Master_Transmit>
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b004      	add	sp, #16
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <BQ25890_read_reg>:
uint8_t BQ25890_read_reg (I2C_HandleTypeDef *i2c, uint8_t reg_address)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	000a      	movs	r2, r1
 8000b7a:	1cfb      	adds	r3, r7, #3
 8000b7c:	701a      	strb	r2, [r3, #0]
	uint8_t data_tx[1];
	uint8_t data_rx[1];

	data_tx[0] = reg_address;
 8000b7e:	210c      	movs	r1, #12
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	1cfa      	adds	r2, r7, #3
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, I2C_ADR, data_tx, 1, 100);
 8000b88:	187a      	adds	r2, r7, r1
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	21d4      	movs	r1, #212	; 0xd4
 8000b94:	f007 f978 	bl	8007e88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, I2C_ADR, data_rx, 1,100);
 8000b98:	2408      	movs	r4, #8
 8000b9a:	193a      	adds	r2, r7, r4
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	21d4      	movs	r1, #212	; 0xd4
 8000ba6:	f007 fa77 	bl	8008098 <HAL_I2C_Master_Receive>
	return data_rx[0];
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	781b      	ldrb	r3, [r3, #0]
}
 8000bae:	0018      	movs	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b005      	add	sp, #20
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <BQ25890_start_ADC>:
void BQ25890_start_ADC(I2C_HandleTypeDef *i2c)
{
 8000bb6:	b5b0      	push	{r4, r5, r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	/*Conversion time NOM: 8ms, MAX 1000ms*/
	uint8_t data;
	data = BQ25890_read_reg(i2c, 0x02);
 8000bbe:	250f      	movs	r5, #15
 8000bc0:	197c      	adds	r4, r7, r5
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ffd2 	bl	8000b70 <BQ25890_read_reg>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]
	data = data | 0x80;
 8000bd0:	0028      	movs	r0, r5
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	183a      	adds	r2, r7, r0
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4249      	negs	r1, r1
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
	BQ25890_write_reg(i2c, 0x02, data);
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2102      	movs	r1, #2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ffa0 	bl	8000b2e <BQ25890_write_reg>
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bdb0      	pop	{r4, r5, r7, pc}

08000bf6 <BQ25890_read_bat_voltage>:
uint16_t BQ25890_read_bat_voltage (I2C_HandleTypeDef *i2c)
{
 8000bf6:	b5b0      	push	{r4, r5, r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint16_t voltage;
	data = BQ25890_read_reg(i2c, 0x0E);
 8000bfe:	250f      	movs	r5, #15
 8000c00:	197c      	adds	r4, r7, r5
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	210e      	movs	r1, #14
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ffb2 	bl	8000b70 <BQ25890_read_reg>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	7023      	strb	r3, [r4, #0]
	data = data & 0x7F;
 8000c10:	0028      	movs	r0, r5
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	183a      	adds	r2, r7, r0
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	217f      	movs	r1, #127	; 0x7f
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
	data = data << 1;
 8000c1e:	0001      	movs	r1, r0
 8000c20:	187a      	adds	r2, r7, r1
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	18db      	adds	r3, r3, r3
 8000c28:	7013      	strb	r3, [r2, #0]
	voltage = (data *10) + 2304;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	1c1a      	adds	r2, r3, #0
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	18db      	adds	r3, r3, r3
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	210c      	movs	r1, #12
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2090      	movs	r0, #144	; 0x90
 8000c40:	0100      	lsls	r0, r0, #4
 8000c42:	4684      	mov	ip, r0
 8000c44:	4462      	add	r2, ip
 8000c46:	801a      	strh	r2, [r3, #0]
	return voltage;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	881b      	ldrh	r3, [r3, #0]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bdb0      	pop	{r4, r5, r7, pc}

08000c54 <put_country_ID>:
 */
#include "calc_country_ID.h"


void put_country_ID (uint32_t country_ID, uint8_t* string)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3b04      	subs	r3, #4
 8000c62:	4afc      	ldr	r2, [pc, #1008]	; (8001054 <put_country_ID+0x400>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d901      	bls.n	8000c6c <put_country_ID+0x18>
 8000c68:	f001 f859 	bl	8001d1e <put_country_ID+0x10ca>
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	4bfa      	ldr	r3, [pc, #1000]	; (8001058 <put_country_ID+0x404>)
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	469f      	mov	pc, r3
    switch (country_ID)
    {
    case 4:
		string[0] = 'A';
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2241      	movs	r2, #65	; 0x41
 8000c7a:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	2246      	movs	r2, #70	; 0x46
 8000c82:	701a      	strb	r2, [r3, #0]
		break;
 8000c84:	f001 f853 	bl	8001d2e <put_country_ID+0x10da>
    case 248:
		string[0] = 'A';
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2241      	movs	r2, #65	; 0x41
 8000c8c:	701a      	strb	r2, [r3, #0]
		string[1] = 'X';
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	2258      	movs	r2, #88	; 0x58
 8000c94:	701a      	strb	r2, [r3, #0]
		break;
 8000c96:	f001 f84a 	bl	8001d2e <put_country_ID+0x10da>
    case 8:
		string[0] = 'A';
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2241      	movs	r2, #65	; 0x41
 8000c9e:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	224c      	movs	r2, #76	; 0x4c
 8000ca6:	701a      	strb	r2, [r3, #0]
		break;
 8000ca8:	f001 f841 	bl	8001d2e <put_country_ID+0x10da>
    case 12:
		string[0] = 'D';
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2244      	movs	r2, #68	; 0x44
 8000cb0:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	225a      	movs	r2, #90	; 0x5a
 8000cb8:	701a      	strb	r2, [r3, #0]
		break;
 8000cba:	f001 f838 	bl	8001d2e <put_country_ID+0x10da>
    case 16:
		string[0] = 'A';
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2241      	movs	r2, #65	; 0x41
 8000cc2:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	2253      	movs	r2, #83	; 0x53
 8000cca:	701a      	strb	r2, [r3, #0]
		break;
 8000ccc:	f001 f82f 	bl	8001d2e <put_country_ID+0x10da>
    case 20:
		string[0] = 'A';
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2241      	movs	r2, #65	; 0x41
 8000cd4:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	2244      	movs	r2, #68	; 0x44
 8000cdc:	701a      	strb	r2, [r3, #0]
		break;
 8000cde:	f001 f826 	bl	8001d2e <put_country_ID+0x10da>
    case 24:
		string[0] = 'A';
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2241      	movs	r2, #65	; 0x41
 8000ce6:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	224f      	movs	r2, #79	; 0x4f
 8000cee:	701a      	strb	r2, [r3, #0]
		break;
 8000cf0:	f001 f81d 	bl	8001d2e <put_country_ID+0x10da>
    case 660:
		string[0] = 'A';
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2241      	movs	r2, #65	; 0x41
 8000cf8:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	2249      	movs	r2, #73	; 0x49
 8000d00:	701a      	strb	r2, [r3, #0]
		break;
 8000d02:	f001 f814 	bl	8001d2e <put_country_ID+0x10da>
    case 10:
		string[0] = 'A';
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2241      	movs	r2, #65	; 0x41
 8000d0a:	701a      	strb	r2, [r3, #0]
		string[1] = 'Q';
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2251      	movs	r2, #81	; 0x51
 8000d12:	701a      	strb	r2, [r3, #0]
		break;
 8000d14:	f001 f80b 	bl	8001d2e <put_country_ID+0x10da>
    case 28:
		string[0] = 'A';
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2241      	movs	r2, #65	; 0x41
 8000d1c:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	2247      	movs	r2, #71	; 0x47
 8000d24:	701a      	strb	r2, [r3, #0]
		break;
 8000d26:	f001 f802 	bl	8001d2e <put_country_ID+0x10da>
    case 32:
		string[0] = 'A';
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2241      	movs	r2, #65	; 0x41
 8000d2e:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	2252      	movs	r2, #82	; 0x52
 8000d36:	701a      	strb	r2, [r3, #0]
		break;
 8000d38:	f000 fff9 	bl	8001d2e <put_country_ID+0x10da>
    case 51:
		string[0] = 'A';
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2241      	movs	r2, #65	; 0x41
 8000d40:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	224d      	movs	r2, #77	; 0x4d
 8000d48:	701a      	strb	r2, [r3, #0]
		break;
 8000d4a:	f000 fff0 	bl	8001d2e <put_country_ID+0x10da>
    case 533:
		string[0] = 'A';
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2241      	movs	r2, #65	; 0x41
 8000d52:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	2257      	movs	r2, #87	; 0x57
 8000d5a:	701a      	strb	r2, [r3, #0]
		break;
 8000d5c:	f000 ffe7 	bl	8001d2e <put_country_ID+0x10da>
    case 36:
		string[0] = 'A';
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2241      	movs	r2, #65	; 0x41
 8000d64:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	2255      	movs	r2, #85	; 0x55
 8000d6c:	701a      	strb	r2, [r3, #0]
		break;
 8000d6e:	f000 ffde 	bl	8001d2e <put_country_ID+0x10da>
    case 40:
		string[0] = 'A';
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2241      	movs	r2, #65	; 0x41
 8000d76:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2254      	movs	r2, #84	; 0x54
 8000d7e:	701a      	strb	r2, [r3, #0]
		break;
 8000d80:	f000 ffd5 	bl	8001d2e <put_country_ID+0x10da>
    case 31:
		string[0] = 'A';
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2241      	movs	r2, #65	; 0x41
 8000d88:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	225a      	movs	r2, #90	; 0x5a
 8000d90:	701a      	strb	r2, [r3, #0]
		break;
 8000d92:	f000 ffcc 	bl	8001d2e <put_country_ID+0x10da>
    case 44:
		string[0] = 'B';
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2242      	movs	r2, #66	; 0x42
 8000d9a:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	2253      	movs	r2, #83	; 0x53
 8000da2:	701a      	strb	r2, [r3, #0]
		break;
 8000da4:	f000 ffc3 	bl	8001d2e <put_country_ID+0x10da>
    case 48:
		string[0] = 'B';
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2242      	movs	r2, #66	; 0x42
 8000dac:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	2248      	movs	r2, #72	; 0x48
 8000db4:	701a      	strb	r2, [r3, #0]
		break;
 8000db6:	f000 ffba 	bl	8001d2e <put_country_ID+0x10da>
    case 50:
		string[0] = 'B';
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2242      	movs	r2, #66	; 0x42
 8000dbe:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	2244      	movs	r2, #68	; 0x44
 8000dc6:	701a      	strb	r2, [r3, #0]
		break;
 8000dc8:	f000 ffb1 	bl	8001d2e <put_country_ID+0x10da>
    case 52:
		string[0] = 'B';
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2242      	movs	r2, #66	; 0x42
 8000dd0:	701a      	strb	r2, [r3, #0]
		string[1] = 'B';
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	2242      	movs	r2, #66	; 0x42
 8000dd8:	701a      	strb	r2, [r3, #0]
		break;
 8000dda:	f000 ffa8 	bl	8001d2e <put_country_ID+0x10da>
    case 112:
		string[0] = 'B';
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2242      	movs	r2, #66	; 0x42
 8000de2:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	2259      	movs	r2, #89	; 0x59
 8000dea:	701a      	strb	r2, [r3, #0]
		break;
 8000dec:	f000 ff9f 	bl	8001d2e <put_country_ID+0x10da>
    case 56:
		string[0] = 'B';
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2242      	movs	r2, #66	; 0x42
 8000df4:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	2245      	movs	r2, #69	; 0x45
 8000dfc:	701a      	strb	r2, [r3, #0]
		break;
 8000dfe:	f000 ff96 	bl	8001d2e <put_country_ID+0x10da>
    case 84:
		string[0] = 'B';
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2242      	movs	r2, #66	; 0x42
 8000e06:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	225a      	movs	r2, #90	; 0x5a
 8000e0e:	701a      	strb	r2, [r3, #0]
		break;
 8000e10:	f000 ff8d 	bl	8001d2e <put_country_ID+0x10da>
    case 204:
		string[0] = 'B';
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2242      	movs	r2, #66	; 0x42
 8000e18:	701a      	strb	r2, [r3, #0]
		string[1] = 'J';
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	224a      	movs	r2, #74	; 0x4a
 8000e20:	701a      	strb	r2, [r3, #0]
		break;
 8000e22:	f000 ff84 	bl	8001d2e <put_country_ID+0x10da>
    case 60:
		string[0] = 'B';
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2242      	movs	r2, #66	; 0x42
 8000e2a:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	224d      	movs	r2, #77	; 0x4d
 8000e32:	701a      	strb	r2, [r3, #0]
		break;
 8000e34:	f000 ff7b 	bl	8001d2e <put_country_ID+0x10da>
    case 64:
		string[0] = 'B';
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2242      	movs	r2, #66	; 0x42
 8000e3c:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	2254      	movs	r2, #84	; 0x54
 8000e44:	701a      	strb	r2, [r3, #0]
		break;
 8000e46:	f000 ff72 	bl	8001d2e <put_country_ID+0x10da>
    case 68:
		string[0] = 'B';
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2242      	movs	r2, #66	; 0x42
 8000e4e:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	224f      	movs	r2, #79	; 0x4f
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	f000 ff69 	bl	8001d2e <put_country_ID+0x10da>
    case 535:
		string[0] = 'B';
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2242      	movs	r2, #66	; 0x42
 8000e60:	701a      	strb	r2, [r3, #0]
		string[1] = 'Q';
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	2251      	movs	r2, #81	; 0x51
 8000e68:	701a      	strb	r2, [r3, #0]
		break;
 8000e6a:	f000 ff60 	bl	8001d2e <put_country_ID+0x10da>
    case 70:
		string[0] = 'B';
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2242      	movs	r2, #66	; 0x42
 8000e72:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	2241      	movs	r2, #65	; 0x41
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	f000 ff57 	bl	8001d2e <put_country_ID+0x10da>
    case 72:
		string[0] = 'B';
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2242      	movs	r2, #66	; 0x42
 8000e84:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	2257      	movs	r2, #87	; 0x57
 8000e8c:	701a      	strb	r2, [r3, #0]
		break;
 8000e8e:	f000 ff4e 	bl	8001d2e <put_country_ID+0x10da>
    case 74:
		string[0] = 'B';
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2242      	movs	r2, #66	; 0x42
 8000e96:	701a      	strb	r2, [r3, #0]
		string[1] = 'V';
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	2256      	movs	r2, #86	; 0x56
 8000e9e:	701a      	strb	r2, [r3, #0]
		break;
 8000ea0:	f000 ff45 	bl	8001d2e <put_country_ID+0x10da>
    case 76:
		string[0] = 'B';
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2242      	movs	r2, #66	; 0x42
 8000ea8:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	2252      	movs	r2, #82	; 0x52
 8000eb0:	701a      	strb	r2, [r3, #0]
		break;
 8000eb2:	f000 ff3c 	bl	8001d2e <put_country_ID+0x10da>
    case 86:
		string[0] = 'I';
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2249      	movs	r2, #73	; 0x49
 8000eba:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	224f      	movs	r2, #79	; 0x4f
 8000ec2:	701a      	strb	r2, [r3, #0]
		break;
 8000ec4:	f000 ff33 	bl	8001d2e <put_country_ID+0x10da>
    case 96:
		string[0] = 'B';
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2242      	movs	r2, #66	; 0x42
 8000ecc:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	224e      	movs	r2, #78	; 0x4e
 8000ed4:	701a      	strb	r2, [r3, #0]
		break;
 8000ed6:	f000 ff2a 	bl	8001d2e <put_country_ID+0x10da>
    case 100:
		string[0] = 'B';
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2242      	movs	r2, #66	; 0x42
 8000ede:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	2247      	movs	r2, #71	; 0x47
 8000ee6:	701a      	strb	r2, [r3, #0]
		break;
 8000ee8:	f000 ff21 	bl	8001d2e <put_country_ID+0x10da>
    case 854:
		string[0] = 'B';
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2242      	movs	r2, #66	; 0x42
 8000ef0:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	2246      	movs	r2, #70	; 0x46
 8000ef8:	701a      	strb	r2, [r3, #0]
		break;
 8000efa:	f000 ff18 	bl	8001d2e <put_country_ID+0x10da>
    case 108:
		string[0] = 'B';
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2242      	movs	r2, #66	; 0x42
 8000f02:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	2249      	movs	r2, #73	; 0x49
 8000f0a:	701a      	strb	r2, [r3, #0]
		break;
 8000f0c:	f000 ff0f 	bl	8001d2e <put_country_ID+0x10da>
    case 132:
		string[0] = 'C';
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2243      	movs	r2, #67	; 0x43
 8000f14:	701a      	strb	r2, [r3, #0]
		string[1] = 'V';
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	2256      	movs	r2, #86	; 0x56
 8000f1c:	701a      	strb	r2, [r3, #0]
		break;
 8000f1e:	f000 ff06 	bl	8001d2e <put_country_ID+0x10da>
    case 116:
		string[0] = 'K';
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	224b      	movs	r2, #75	; 0x4b
 8000f26:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2248      	movs	r2, #72	; 0x48
 8000f2e:	701a      	strb	r2, [r3, #0]
		break;
 8000f30:	f000 fefd 	bl	8001d2e <put_country_ID+0x10da>
    case 120:
		string[0] = 'C';
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2243      	movs	r2, #67	; 0x43
 8000f38:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	224d      	movs	r2, #77	; 0x4d
 8000f40:	701a      	strb	r2, [r3, #0]
		break;
 8000f42:	f000 fef4 	bl	8001d2e <put_country_ID+0x10da>
    case 124:
		string[0] = 'C';
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2243      	movs	r2, #67	; 0x43
 8000f4a:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	2241      	movs	r2, #65	; 0x41
 8000f52:	701a      	strb	r2, [r3, #0]
		break;
 8000f54:	f000 feeb 	bl	8001d2e <put_country_ID+0x10da>
    case 136:
		string[0] = 'K';
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	224b      	movs	r2, #75	; 0x4b
 8000f5c:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	2259      	movs	r2, #89	; 0x59
 8000f64:	701a      	strb	r2, [r3, #0]
		break;
 8000f66:	f000 fee2 	bl	8001d2e <put_country_ID+0x10da>
    case 140:
		string[0] = 'C';
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2243      	movs	r2, #67	; 0x43
 8000f6e:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	2246      	movs	r2, #70	; 0x46
 8000f76:	701a      	strb	r2, [r3, #0]
		break;
 8000f78:	f000 fed9 	bl	8001d2e <put_country_ID+0x10da>
    case 148:
		string[0] = 'T';
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2254      	movs	r2, #84	; 0x54
 8000f80:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	2244      	movs	r2, #68	; 0x44
 8000f88:	701a      	strb	r2, [r3, #0]
		break;
 8000f8a:	f000 fed0 	bl	8001d2e <put_country_ID+0x10da>
    case 152:
		string[0] = 'C';
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2243      	movs	r2, #67	; 0x43
 8000f92:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	224c      	movs	r2, #76	; 0x4c
 8000f9a:	701a      	strb	r2, [r3, #0]
		break;
 8000f9c:	f000 fec7 	bl	8001d2e <put_country_ID+0x10da>
    case 156:
		string[0] = 'C';
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2243      	movs	r2, #67	; 0x43
 8000fa4:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	224e      	movs	r2, #78	; 0x4e
 8000fac:	701a      	strb	r2, [r3, #0]
		break;
 8000fae:	f000 febe 	bl	8001d2e <put_country_ID+0x10da>
    case 162:
		string[0] = 'C';
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2243      	movs	r2, #67	; 0x43
 8000fb6:	701a      	strb	r2, [r3, #0]
		string[1] = 'X';
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	2258      	movs	r2, #88	; 0x58
 8000fbe:	701a      	strb	r2, [r3, #0]
		break;
 8000fc0:	f000 feb5 	bl	8001d2e <put_country_ID+0x10da>
    case 166:
		string[0] = 'C';
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2243      	movs	r2, #67	; 0x43
 8000fc8:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	2243      	movs	r2, #67	; 0x43
 8000fd0:	701a      	strb	r2, [r3, #0]
		break;
 8000fd2:	f000 feac 	bl	8001d2e <put_country_ID+0x10da>
    case 170:
		string[0] = 'C';
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2243      	movs	r2, #67	; 0x43
 8000fda:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	224f      	movs	r2, #79	; 0x4f
 8000fe2:	701a      	strb	r2, [r3, #0]
		break;
 8000fe4:	f000 fea3 	bl	8001d2e <put_country_ID+0x10da>
    case 174:
		string[0] = 'K';
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	224b      	movs	r2, #75	; 0x4b
 8000fec:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	224d      	movs	r2, #77	; 0x4d
 8000ff4:	701a      	strb	r2, [r3, #0]
		break;
 8000ff6:	f000 fe9a 	bl	8001d2e <put_country_ID+0x10da>
    case 178:
		string[0] = 'C';
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2243      	movs	r2, #67	; 0x43
 8000ffe:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	2247      	movs	r2, #71	; 0x47
 8001006:	701a      	strb	r2, [r3, #0]
		break;
 8001008:	f000 fe91 	bl	8001d2e <put_country_ID+0x10da>
    case 180:
		string[0] = 'C';
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2243      	movs	r2, #67	; 0x43
 8001010:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	2244      	movs	r2, #68	; 0x44
 8001018:	701a      	strb	r2, [r3, #0]
		break;
 800101a:	f000 fe88 	bl	8001d2e <put_country_ID+0x10da>
    case 184:
		string[0] = 'C';
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2243      	movs	r2, #67	; 0x43
 8001022:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	224b      	movs	r2, #75	; 0x4b
 800102a:	701a      	strb	r2, [r3, #0]
		break;
 800102c:	f000 fe7f 	bl	8001d2e <put_country_ID+0x10da>
    case 188:
		string[0] = 'C';
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2243      	movs	r2, #67	; 0x43
 8001034:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	2252      	movs	r2, #82	; 0x52
 800103c:	701a      	strb	r2, [r3, #0]
		break;
 800103e:	f000 fe76 	bl	8001d2e <put_country_ID+0x10da>
    case 384:
		string[0] = 'C';
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2243      	movs	r2, #67	; 0x43
 8001046:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	2249      	movs	r2, #73	; 0x49
 800104e:	701a      	strb	r2, [r3, #0]
		break;
 8001050:	f000 fe6d 	bl	8001d2e <put_country_ID+0x10da>
 8001054:	0000037a 	.word	0x0000037a
 8001058:	0800bf88 	.word	0x0800bf88
    case 191:
		string[0] = 'H';
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2248      	movs	r2, #72	; 0x48
 8001060:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	2252      	movs	r2, #82	; 0x52
 8001068:	701a      	strb	r2, [r3, #0]
		break;
 800106a:	f000 fe60 	bl	8001d2e <put_country_ID+0x10da>
    case 192:
		string[0] = 'C';
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2243      	movs	r2, #67	; 0x43
 8001072:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	2255      	movs	r2, #85	; 0x55
 800107a:	701a      	strb	r2, [r3, #0]
		break;
 800107c:	f000 fe57 	bl	8001d2e <put_country_ID+0x10da>
    case 531:
		string[0] = 'C';
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2243      	movs	r2, #67	; 0x43
 8001084:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	2257      	movs	r2, #87	; 0x57
 800108c:	701a      	strb	r2, [r3, #0]
		break;
 800108e:	f000 fe4e 	bl	8001d2e <put_country_ID+0x10da>
    case 196:
		string[0] = 'C';
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2243      	movs	r2, #67	; 0x43
 8001096:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	2259      	movs	r2, #89	; 0x59
 800109e:	701a      	strb	r2, [r3, #0]
		break;
 80010a0:	f000 fe45 	bl	8001d2e <put_country_ID+0x10da>
    case 203:
		string[0] = 'C';
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2243      	movs	r2, #67	; 0x43
 80010a8:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	225a      	movs	r2, #90	; 0x5a
 80010b0:	701a      	strb	r2, [r3, #0]
		break;
 80010b2:	f000 fe3c 	bl	8001d2e <put_country_ID+0x10da>
    case 208:
		string[0] = 'D';
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2244      	movs	r2, #68	; 0x44
 80010ba:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	224b      	movs	r2, #75	; 0x4b
 80010c2:	701a      	strb	r2, [r3, #0]
		break;
 80010c4:	f000 fe33 	bl	8001d2e <put_country_ID+0x10da>
    case 262:
		string[0] = 'D';
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2244      	movs	r2, #68	; 0x44
 80010cc:	701a      	strb	r2, [r3, #0]
		string[1] = 'J';
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	224a      	movs	r2, #74	; 0x4a
 80010d4:	701a      	strb	r2, [r3, #0]
		break;
 80010d6:	f000 fe2a 	bl	8001d2e <put_country_ID+0x10da>
    case 212:
		string[0] = 'D';
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2244      	movs	r2, #68	; 0x44
 80010de:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	224d      	movs	r2, #77	; 0x4d
 80010e6:	701a      	strb	r2, [r3, #0]
		break;
 80010e8:	f000 fe21 	bl	8001d2e <put_country_ID+0x10da>
    case 214:
		string[0] = 'D';
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2244      	movs	r2, #68	; 0x44
 80010f0:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	224f      	movs	r2, #79	; 0x4f
 80010f8:	701a      	strb	r2, [r3, #0]
		break;
 80010fa:	f000 fe18 	bl	8001d2e <put_country_ID+0x10da>
    case 218:
		string[0] = 'E';
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2245      	movs	r2, #69	; 0x45
 8001102:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	2243      	movs	r2, #67	; 0x43
 800110a:	701a      	strb	r2, [r3, #0]
		break;
 800110c:	f000 fe0f 	bl	8001d2e <put_country_ID+0x10da>
    case 818:
		string[0] = 'E';
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2245      	movs	r2, #69	; 0x45
 8001114:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	2247      	movs	r2, #71	; 0x47
 800111c:	701a      	strb	r2, [r3, #0]
		break;
 800111e:	f000 fe06 	bl	8001d2e <put_country_ID+0x10da>
    case 222:
		string[0] = 'S';
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2253      	movs	r2, #83	; 0x53
 8001126:	701a      	strb	r2, [r3, #0]
		string[1] = 'V';
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	2256      	movs	r2, #86	; 0x56
 800112e:	701a      	strb	r2, [r3, #0]
		break;
 8001130:	f000 fdfd 	bl	8001d2e <put_country_ID+0x10da>
    case 226:
		string[0] = 'G';
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2247      	movs	r2, #71	; 0x47
 8001138:	701a      	strb	r2, [r3, #0]
		string[1] = 'Q';
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	2251      	movs	r2, #81	; 0x51
 8001140:	701a      	strb	r2, [r3, #0]
		break;
 8001142:	f000 fdf4 	bl	8001d2e <put_country_ID+0x10da>
    case 232:
		string[0] = 'E';
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2245      	movs	r2, #69	; 0x45
 800114a:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	2252      	movs	r2, #82	; 0x52
 8001152:	701a      	strb	r2, [r3, #0]
		break;
 8001154:	f000 fdeb 	bl	8001d2e <put_country_ID+0x10da>
    case 233:
		string[0] = 'E';
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2245      	movs	r2, #69	; 0x45
 800115c:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	2245      	movs	r2, #69	; 0x45
 8001164:	701a      	strb	r2, [r3, #0]
		break;
 8001166:	f000 fde2 	bl	8001d2e <put_country_ID+0x10da>
    case 748:
		string[0] = 'S';
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2253      	movs	r2, #83	; 0x53
 800116e:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	225a      	movs	r2, #90	; 0x5a
 8001176:	701a      	strb	r2, [r3, #0]
		break;
 8001178:	f000 fdd9 	bl	8001d2e <put_country_ID+0x10da>
    case 231:
		string[0] = 'E';
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2245      	movs	r2, #69	; 0x45
 8001180:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	2254      	movs	r2, #84	; 0x54
 8001188:	701a      	strb	r2, [r3, #0]
		break;
 800118a:	f000 fdd0 	bl	8001d2e <put_country_ID+0x10da>
    case 238:
		string[0] = 'F';
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2246      	movs	r2, #70	; 0x46
 8001192:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	224b      	movs	r2, #75	; 0x4b
 800119a:	701a      	strb	r2, [r3, #0]
		break;
 800119c:	f000 fdc7 	bl	8001d2e <put_country_ID+0x10da>
    case 234:
		string[0] = 'F';
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2246      	movs	r2, #70	; 0x46
 80011a4:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	224f      	movs	r2, #79	; 0x4f
 80011ac:	701a      	strb	r2, [r3, #0]
		break;
 80011ae:	f000 fdbe 	bl	8001d2e <put_country_ID+0x10da>
    case 242:
		string[0] = 'F';
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2246      	movs	r2, #70	; 0x46
 80011b6:	701a      	strb	r2, [r3, #0]
		string[1] = 'J';
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	224a      	movs	r2, #74	; 0x4a
 80011be:	701a      	strb	r2, [r3, #0]
		break;
 80011c0:	f000 fdb5 	bl	8001d2e <put_country_ID+0x10da>
    case 246:
		string[0] = 'F';
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2246      	movs	r2, #70	; 0x46
 80011c8:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	2249      	movs	r2, #73	; 0x49
 80011d0:	701a      	strb	r2, [r3, #0]
		break;
 80011d2:	f000 fdac 	bl	8001d2e <put_country_ID+0x10da>
    case 250:
		string[0] = 'F';
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2246      	movs	r2, #70	; 0x46
 80011da:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	2252      	movs	r2, #82	; 0x52
 80011e2:	701a      	strb	r2, [r3, #0]
		break;
 80011e4:	f000 fda3 	bl	8001d2e <put_country_ID+0x10da>
    case 254:
		string[0] = 'G';
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2247      	movs	r2, #71	; 0x47
 80011ec:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	2246      	movs	r2, #70	; 0x46
 80011f4:	701a      	strb	r2, [r3, #0]
		break;
 80011f6:	f000 fd9a 	bl	8001d2e <put_country_ID+0x10da>
    case 258:
		string[0] = 'P';
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2250      	movs	r2, #80	; 0x50
 80011fe:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	2246      	movs	r2, #70	; 0x46
 8001206:	701a      	strb	r2, [r3, #0]
		break;
 8001208:	f000 fd91 	bl	8001d2e <put_country_ID+0x10da>
    case 260:
		string[0] = 'T';
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2254      	movs	r2, #84	; 0x54
 8001210:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	2246      	movs	r2, #70	; 0x46
 8001218:	701a      	strb	r2, [r3, #0]
		break;
 800121a:	f000 fd88 	bl	8001d2e <put_country_ID+0x10da>
    case 266:
		string[0] = 'G';
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2247      	movs	r2, #71	; 0x47
 8001222:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	2241      	movs	r2, #65	; 0x41
 800122a:	701a      	strb	r2, [r3, #0]
		break;
 800122c:	f000 fd7f 	bl	8001d2e <put_country_ID+0x10da>
    case 270:
		string[0] = 'G';
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2247      	movs	r2, #71	; 0x47
 8001234:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	224d      	movs	r2, #77	; 0x4d
 800123c:	701a      	strb	r2, [r3, #0]
		break;
 800123e:	f000 fd76 	bl	8001d2e <put_country_ID+0x10da>
    case 268:
		string[0] = 'G';
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2247      	movs	r2, #71	; 0x47
 8001246:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	2245      	movs	r2, #69	; 0x45
 800124e:	701a      	strb	r2, [r3, #0]
		break;
 8001250:	f000 fd6d 	bl	8001d2e <put_country_ID+0x10da>
    case 276:
		string[0] = 'D';
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2244      	movs	r2, #68	; 0x44
 8001258:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	2245      	movs	r2, #69	; 0x45
 8001260:	701a      	strb	r2, [r3, #0]
		break;
 8001262:	f000 fd64 	bl	8001d2e <put_country_ID+0x10da>
    case 288:
		string[0] = 'G';
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2247      	movs	r2, #71	; 0x47
 800126a:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	2248      	movs	r2, #72	; 0x48
 8001272:	701a      	strb	r2, [r3, #0]
		break;
 8001274:	f000 fd5b 	bl	8001d2e <put_country_ID+0x10da>
    case 292:
		string[0] = 'G';
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2247      	movs	r2, #71	; 0x47
 800127c:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	2249      	movs	r2, #73	; 0x49
 8001284:	701a      	strb	r2, [r3, #0]
		break;
 8001286:	f000 fd52 	bl	8001d2e <put_country_ID+0x10da>
    case 300:
		string[0] = 'G';
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2247      	movs	r2, #71	; 0x47
 800128e:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	2252      	movs	r2, #82	; 0x52
 8001296:	701a      	strb	r2, [r3, #0]
		break;
 8001298:	f000 fd49 	bl	8001d2e <put_country_ID+0x10da>
    case 304:
		string[0] = 'G';
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2247      	movs	r2, #71	; 0x47
 80012a0:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	224c      	movs	r2, #76	; 0x4c
 80012a8:	701a      	strb	r2, [r3, #0]
		break;
 80012aa:	f000 fd40 	bl	8001d2e <put_country_ID+0x10da>
    case 308:
		string[0] = 'G';
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2247      	movs	r2, #71	; 0x47
 80012b2:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	2244      	movs	r2, #68	; 0x44
 80012ba:	701a      	strb	r2, [r3, #0]
		break;
 80012bc:	f000 fd37 	bl	8001d2e <put_country_ID+0x10da>
    case 312:
		string[0] = 'G';
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2247      	movs	r2, #71	; 0x47
 80012c4:	701a      	strb	r2, [r3, #0]
		string[1] = 'P';
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	2250      	movs	r2, #80	; 0x50
 80012cc:	701a      	strb	r2, [r3, #0]
		break;
 80012ce:	f000 fd2e 	bl	8001d2e <put_country_ID+0x10da>
    case 316:
		string[0] = 'G';
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2247      	movs	r2, #71	; 0x47
 80012d6:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	2255      	movs	r2, #85	; 0x55
 80012de:	701a      	strb	r2, [r3, #0]
		break;
 80012e0:	f000 fd25 	bl	8001d2e <put_country_ID+0x10da>
    case 320:
		string[0] = 'G';
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2247      	movs	r2, #71	; 0x47
 80012e8:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	2254      	movs	r2, #84	; 0x54
 80012f0:	701a      	strb	r2, [r3, #0]
		break;
 80012f2:	f000 fd1c 	bl	8001d2e <put_country_ID+0x10da>
    case 831:
		string[0] = 'G';
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2247      	movs	r2, #71	; 0x47
 80012fa:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	2247      	movs	r2, #71	; 0x47
 8001302:	701a      	strb	r2, [r3, #0]
		break;
 8001304:	f000 fd13 	bl	8001d2e <put_country_ID+0x10da>
    case 324:
		string[0] = 'G';
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2247      	movs	r2, #71	; 0x47
 800130c:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	224e      	movs	r2, #78	; 0x4e
 8001314:	701a      	strb	r2, [r3, #0]
		break;
 8001316:	f000 fd0a 	bl	8001d2e <put_country_ID+0x10da>
    case 624:
		string[0] = 'G';
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2247      	movs	r2, #71	; 0x47
 800131e:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	2257      	movs	r2, #87	; 0x57
 8001326:	701a      	strb	r2, [r3, #0]
		break;
 8001328:	f000 fd01 	bl	8001d2e <put_country_ID+0x10da>
    case 328:
		string[0] = 'G';
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2247      	movs	r2, #71	; 0x47
 8001330:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	2259      	movs	r2, #89	; 0x59
 8001338:	701a      	strb	r2, [r3, #0]
		break;
 800133a:	f000 fcf8 	bl	8001d2e <put_country_ID+0x10da>
    case 332:
		string[0] = 'H';
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2248      	movs	r2, #72	; 0x48
 8001342:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	2254      	movs	r2, #84	; 0x54
 800134a:	701a      	strb	r2, [r3, #0]
		break;
 800134c:	f000 fcef 	bl	8001d2e <put_country_ID+0x10da>
    case 334:
		string[0] = 'H';
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2248      	movs	r2, #72	; 0x48
 8001354:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	224d      	movs	r2, #77	; 0x4d
 800135c:	701a      	strb	r2, [r3, #0]
		break;
 800135e:	f000 fce6 	bl	8001d2e <put_country_ID+0x10da>
    case 336:
		string[0] = 'V';
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2256      	movs	r2, #86	; 0x56
 8001366:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	2241      	movs	r2, #65	; 0x41
 800136e:	701a      	strb	r2, [r3, #0]
		break;
 8001370:	f000 fcdd 	bl	8001d2e <put_country_ID+0x10da>
    case 340:
		string[0] = 'H';
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2248      	movs	r2, #72	; 0x48
 8001378:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	224e      	movs	r2, #78	; 0x4e
 8001380:	701a      	strb	r2, [r3, #0]
		break;
 8001382:	f000 fcd4 	bl	8001d2e <put_country_ID+0x10da>
    case 344:
		string[0] = 'H';
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2248      	movs	r2, #72	; 0x48
 800138a:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	224b      	movs	r2, #75	; 0x4b
 8001392:	701a      	strb	r2, [r3, #0]
		break;
 8001394:	f000 fccb 	bl	8001d2e <put_country_ID+0x10da>
    case 348:
		string[0] = 'H';
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2248      	movs	r2, #72	; 0x48
 800139c:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	2255      	movs	r2, #85	; 0x55
 80013a4:	701a      	strb	r2, [r3, #0]
		break;
 80013a6:	f000 fcc2 	bl	8001d2e <put_country_ID+0x10da>
    case 352:
		string[0] = 'I';
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2249      	movs	r2, #73	; 0x49
 80013ae:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	2253      	movs	r2, #83	; 0x53
 80013b6:	701a      	strb	r2, [r3, #0]
		break;
 80013b8:	f000 fcb9 	bl	8001d2e <put_country_ID+0x10da>
    case 356:
		string[0] = 'I';
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2249      	movs	r2, #73	; 0x49
 80013c0:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	224e      	movs	r2, #78	; 0x4e
 80013c8:	701a      	strb	r2, [r3, #0]
		break;
 80013ca:	f000 fcb0 	bl	8001d2e <put_country_ID+0x10da>
    case 360:
		string[0] = 'I';
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2249      	movs	r2, #73	; 0x49
 80013d2:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	2244      	movs	r2, #68	; 0x44
 80013da:	701a      	strb	r2, [r3, #0]
		break;
 80013dc:	f000 fca7 	bl	8001d2e <put_country_ID+0x10da>
    case 364:
		string[0] = 'I';
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2249      	movs	r2, #73	; 0x49
 80013e4:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	2252      	movs	r2, #82	; 0x52
 80013ec:	701a      	strb	r2, [r3, #0]
		break;
 80013ee:	f000 fc9e 	bl	8001d2e <put_country_ID+0x10da>
    case 368:
		string[0] = 'I';
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2249      	movs	r2, #73	; 0x49
 80013f6:	701a      	strb	r2, [r3, #0]
		string[1] = 'Q';
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	2251      	movs	r2, #81	; 0x51
 80013fe:	701a      	strb	r2, [r3, #0]
		break;
 8001400:	f000 fc95 	bl	8001d2e <put_country_ID+0x10da>
    case 372:
		string[0] = 'I';
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2249      	movs	r2, #73	; 0x49
 8001408:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	2245      	movs	r2, #69	; 0x45
 8001410:	701a      	strb	r2, [r3, #0]
		break;
 8001412:	f000 fc8c 	bl	8001d2e <put_country_ID+0x10da>
    case 833:
		string[0] = 'I';
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2249      	movs	r2, #73	; 0x49
 800141a:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	224d      	movs	r2, #77	; 0x4d
 8001422:	701a      	strb	r2, [r3, #0]
		break;
 8001424:	f000 fc83 	bl	8001d2e <put_country_ID+0x10da>
    case 376:
		string[0] = 'I';
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2249      	movs	r2, #73	; 0x49
 800142c:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	224c      	movs	r2, #76	; 0x4c
 8001434:	701a      	strb	r2, [r3, #0]
		break;
 8001436:	f000 fc7a 	bl	8001d2e <put_country_ID+0x10da>
    case 380:
		string[0] = 'I';
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2249      	movs	r2, #73	; 0x49
 800143e:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	2254      	movs	r2, #84	; 0x54
 8001446:	701a      	strb	r2, [r3, #0]
		break;
 8001448:	f000 fc71 	bl	8001d2e <put_country_ID+0x10da>
    case 388:
		string[0] = 'J';
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	224a      	movs	r2, #74	; 0x4a
 8001450:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	224d      	movs	r2, #77	; 0x4d
 8001458:	701a      	strb	r2, [r3, #0]
		break;
 800145a:	f000 fc68 	bl	8001d2e <put_country_ID+0x10da>
    case 392:
		string[0] = 'J';
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	224a      	movs	r2, #74	; 0x4a
 8001462:	701a      	strb	r2, [r3, #0]
		string[1] = 'P';
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	2250      	movs	r2, #80	; 0x50
 800146a:	701a      	strb	r2, [r3, #0]
		break;
 800146c:	f000 fc5f 	bl	8001d2e <put_country_ID+0x10da>
    case 832:
		string[0] = 'J';
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	224a      	movs	r2, #74	; 0x4a
 8001474:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	2245      	movs	r2, #69	; 0x45
 800147c:	701a      	strb	r2, [r3, #0]
		break;
 800147e:	f000 fc56 	bl	8001d2e <put_country_ID+0x10da>
    case 400:
		string[0] = 'J';
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	224a      	movs	r2, #74	; 0x4a
 8001486:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	224f      	movs	r2, #79	; 0x4f
 800148e:	701a      	strb	r2, [r3, #0]
		break;
 8001490:	f000 fc4d 	bl	8001d2e <put_country_ID+0x10da>
    case 398:
		string[0] = 'K';
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	224b      	movs	r2, #75	; 0x4b
 8001498:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	225a      	movs	r2, #90	; 0x5a
 80014a0:	701a      	strb	r2, [r3, #0]
		break;
 80014a2:	f000 fc44 	bl	8001d2e <put_country_ID+0x10da>
    case 404:
		string[0] = 'K';
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	224b      	movs	r2, #75	; 0x4b
 80014aa:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	2245      	movs	r2, #69	; 0x45
 80014b2:	701a      	strb	r2, [r3, #0]
		break;
 80014b4:	f000 fc3b 	bl	8001d2e <put_country_ID+0x10da>
    case 296:
		string[0] = 'K';
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	224b      	movs	r2, #75	; 0x4b
 80014bc:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	2249      	movs	r2, #73	; 0x49
 80014c4:	701a      	strb	r2, [r3, #0]
		break;
 80014c6:	f000 fc32 	bl	8001d2e <put_country_ID+0x10da>
    case 408:
		string[0] = 'K';
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	224b      	movs	r2, #75	; 0x4b
 80014ce:	701a      	strb	r2, [r3, #0]
		string[1] = 'P';
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	2250      	movs	r2, #80	; 0x50
 80014d6:	701a      	strb	r2, [r3, #0]
		break;
 80014d8:	f000 fc29 	bl	8001d2e <put_country_ID+0x10da>
    case 410:
		string[0] = 'K';
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	224b      	movs	r2, #75	; 0x4b
 80014e0:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	2252      	movs	r2, #82	; 0x52
 80014e8:	701a      	strb	r2, [r3, #0]
		break;
 80014ea:	f000 fc20 	bl	8001d2e <put_country_ID+0x10da>
    case 414:
		string[0] = 'K';
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	224b      	movs	r2, #75	; 0x4b
 80014f2:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	2257      	movs	r2, #87	; 0x57
 80014fa:	701a      	strb	r2, [r3, #0]
		break;
 80014fc:	f000 fc17 	bl	8001d2e <put_country_ID+0x10da>
    case 417:
		string[0] = 'K';
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	224b      	movs	r2, #75	; 0x4b
 8001504:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	2247      	movs	r2, #71	; 0x47
 800150c:	701a      	strb	r2, [r3, #0]
		break;
 800150e:	f000 fc0e 	bl	8001d2e <put_country_ID+0x10da>
    case 418:
		string[0] = 'L';
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	224c      	movs	r2, #76	; 0x4c
 8001516:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	2241      	movs	r2, #65	; 0x41
 800151e:	701a      	strb	r2, [r3, #0]
		break;
 8001520:	f000 fc05 	bl	8001d2e <put_country_ID+0x10da>
    case 428:
		string[0] = 'L';
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	224c      	movs	r2, #76	; 0x4c
 8001528:	701a      	strb	r2, [r3, #0]
		string[1] = 'V';
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	2256      	movs	r2, #86	; 0x56
 8001530:	701a      	strb	r2, [r3, #0]
		break;
 8001532:	f000 fbfc 	bl	8001d2e <put_country_ID+0x10da>
    case 422:
		string[0] = 'L';
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	224c      	movs	r2, #76	; 0x4c
 800153a:	701a      	strb	r2, [r3, #0]
		string[1] = 'B';
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	2242      	movs	r2, #66	; 0x42
 8001542:	701a      	strb	r2, [r3, #0]
		break;
 8001544:	f000 fbf3 	bl	8001d2e <put_country_ID+0x10da>
    case 426:
		string[0] = 'L';
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	224c      	movs	r2, #76	; 0x4c
 800154c:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	2253      	movs	r2, #83	; 0x53
 8001554:	701a      	strb	r2, [r3, #0]
		break;
 8001556:	f000 fbea 	bl	8001d2e <put_country_ID+0x10da>
    case 430:
		string[0] = 'L';
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	224c      	movs	r2, #76	; 0x4c
 800155e:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	2252      	movs	r2, #82	; 0x52
 8001566:	701a      	strb	r2, [r3, #0]
		break;
 8001568:	f000 fbe1 	bl	8001d2e <put_country_ID+0x10da>
    case 434:
		string[0] = 'L';
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	224c      	movs	r2, #76	; 0x4c
 8001570:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	2259      	movs	r2, #89	; 0x59
 8001578:	701a      	strb	r2, [r3, #0]
		break;
 800157a:	f000 fbd8 	bl	8001d2e <put_country_ID+0x10da>
    case 438:
		string[0] = 'L';
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	224c      	movs	r2, #76	; 0x4c
 8001582:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	2249      	movs	r2, #73	; 0x49
 800158a:	701a      	strb	r2, [r3, #0]
		break;
 800158c:	f000 fbcf 	bl	8001d2e <put_country_ID+0x10da>
    case 440:
		string[0] = 'L';
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	224c      	movs	r2, #76	; 0x4c
 8001594:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	2254      	movs	r2, #84	; 0x54
 800159c:	701a      	strb	r2, [r3, #0]
		break;
 800159e:	f000 fbc6 	bl	8001d2e <put_country_ID+0x10da>
    case 442:
		string[0] = 'L';
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	224c      	movs	r2, #76	; 0x4c
 80015a6:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	2255      	movs	r2, #85	; 0x55
 80015ae:	701a      	strb	r2, [r3, #0]
		break;
 80015b0:	f000 fbbd 	bl	8001d2e <put_country_ID+0x10da>
    case 446:
		string[0] = 'M';
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	224d      	movs	r2, #77	; 0x4d
 80015b8:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	224f      	movs	r2, #79	; 0x4f
 80015c0:	701a      	strb	r2, [r3, #0]
		break;
 80015c2:	f000 fbb4 	bl	8001d2e <put_country_ID+0x10da>
    case 450:
		string[0] = 'M';
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	224d      	movs	r2, #77	; 0x4d
 80015ca:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	2247      	movs	r2, #71	; 0x47
 80015d2:	701a      	strb	r2, [r3, #0]
		break;
 80015d4:	f000 fbab 	bl	8001d2e <put_country_ID+0x10da>
    case 454:
		string[0] = 'M';
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	224d      	movs	r2, #77	; 0x4d
 80015dc:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	2257      	movs	r2, #87	; 0x57
 80015e4:	701a      	strb	r2, [r3, #0]
		break;
 80015e6:	f000 fba2 	bl	8001d2e <put_country_ID+0x10da>
    case 458:
		string[0] = 'M';
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	224d      	movs	r2, #77	; 0x4d
 80015ee:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	2259      	movs	r2, #89	; 0x59
 80015f6:	701a      	strb	r2, [r3, #0]
		break;
 80015f8:	f000 fb99 	bl	8001d2e <put_country_ID+0x10da>
    case 462:
		string[0] = 'M';
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	224d      	movs	r2, #77	; 0x4d
 8001600:	701a      	strb	r2, [r3, #0]
		string[1] = 'V';
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	2256      	movs	r2, #86	; 0x56
 8001608:	701a      	strb	r2, [r3, #0]
		break;
 800160a:	f000 fb90 	bl	8001d2e <put_country_ID+0x10da>
    case 466:
		string[0] = 'M';
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	224d      	movs	r2, #77	; 0x4d
 8001612:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	224c      	movs	r2, #76	; 0x4c
 800161a:	701a      	strb	r2, [r3, #0]
		break;
 800161c:	e387      	b.n	8001d2e <put_country_ID+0x10da>
    case 470:
		string[0] = 'M';
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	224d      	movs	r2, #77	; 0x4d
 8001622:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	2254      	movs	r2, #84	; 0x54
 800162a:	701a      	strb	r2, [r3, #0]
		break;
 800162c:	e37f      	b.n	8001d2e <put_country_ID+0x10da>
    case 584:
		string[0] = 'M';
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	224d      	movs	r2, #77	; 0x4d
 8001632:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	2248      	movs	r2, #72	; 0x48
 800163a:	701a      	strb	r2, [r3, #0]
		break;
 800163c:	e377      	b.n	8001d2e <put_country_ID+0x10da>
    case 474:
		string[0] = 'M';
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	224d      	movs	r2, #77	; 0x4d
 8001642:	701a      	strb	r2, [r3, #0]
		string[1] = 'Q';
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	2251      	movs	r2, #81	; 0x51
 800164a:	701a      	strb	r2, [r3, #0]
		break;
 800164c:	e36f      	b.n	8001d2e <put_country_ID+0x10da>
    case 478:
		string[0] = 'M';
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	224d      	movs	r2, #77	; 0x4d
 8001652:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	2252      	movs	r2, #82	; 0x52
 800165a:	701a      	strb	r2, [r3, #0]
		break;
 800165c:	e367      	b.n	8001d2e <put_country_ID+0x10da>
    case 480:
		string[0] = 'M';
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	224d      	movs	r2, #77	; 0x4d
 8001662:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	2255      	movs	r2, #85	; 0x55
 800166a:	701a      	strb	r2, [r3, #0]
		break;
 800166c:	e35f      	b.n	8001d2e <put_country_ID+0x10da>
    case 175:
		string[0] = 'Y';
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2259      	movs	r2, #89	; 0x59
 8001672:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	2254      	movs	r2, #84	; 0x54
 800167a:	701a      	strb	r2, [r3, #0]
		break;
 800167c:	e357      	b.n	8001d2e <put_country_ID+0x10da>
    case 484:
		string[0] = 'M';
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	224d      	movs	r2, #77	; 0x4d
 8001682:	701a      	strb	r2, [r3, #0]
		string[1] = 'X';
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	2258      	movs	r2, #88	; 0x58
 800168a:	701a      	strb	r2, [r3, #0]
		break;
 800168c:	e34f      	b.n	8001d2e <put_country_ID+0x10da>
    case 583:
		string[0] = 'F';
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2246      	movs	r2, #70	; 0x46
 8001692:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	224d      	movs	r2, #77	; 0x4d
 800169a:	701a      	strb	r2, [r3, #0]
		break;
 800169c:	e347      	b.n	8001d2e <put_country_ID+0x10da>
    case 498:
		string[0] = 'M';
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	224d      	movs	r2, #77	; 0x4d
 80016a2:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2244      	movs	r2, #68	; 0x44
 80016aa:	701a      	strb	r2, [r3, #0]
		break;
 80016ac:	e33f      	b.n	8001d2e <put_country_ID+0x10da>
    case 492:
		string[0] = 'M';
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	224d      	movs	r2, #77	; 0x4d
 80016b2:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	2243      	movs	r2, #67	; 0x43
 80016ba:	701a      	strb	r2, [r3, #0]
		break;
 80016bc:	e337      	b.n	8001d2e <put_country_ID+0x10da>
    case 496:
		string[0] = 'M';
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	224d      	movs	r2, #77	; 0x4d
 80016c2:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	224e      	movs	r2, #78	; 0x4e
 80016ca:	701a      	strb	r2, [r3, #0]
		break;
 80016cc:	e32f      	b.n	8001d2e <put_country_ID+0x10da>
    case 499:
		string[0] = 'M';
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	224d      	movs	r2, #77	; 0x4d
 80016d2:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	2245      	movs	r2, #69	; 0x45
 80016da:	701a      	strb	r2, [r3, #0]
		break;
 80016dc:	e327      	b.n	8001d2e <put_country_ID+0x10da>
    case 500:
		string[0] = 'M';
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	224d      	movs	r2, #77	; 0x4d
 80016e2:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	2253      	movs	r2, #83	; 0x53
 80016ea:	701a      	strb	r2, [r3, #0]
		break;
 80016ec:	e31f      	b.n	8001d2e <put_country_ID+0x10da>
    case 504:
		string[0] = 'M';
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	224d      	movs	r2, #77	; 0x4d
 80016f2:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	2241      	movs	r2, #65	; 0x41
 80016fa:	701a      	strb	r2, [r3, #0]
		break;
 80016fc:	e317      	b.n	8001d2e <put_country_ID+0x10da>
    case 508:
		string[0] = 'M';
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	224d      	movs	r2, #77	; 0x4d
 8001702:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	225a      	movs	r2, #90	; 0x5a
 800170a:	701a      	strb	r2, [r3, #0]
		break;
 800170c:	e30f      	b.n	8001d2e <put_country_ID+0x10da>
    case 104:
		string[0] = 'M';
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	224d      	movs	r2, #77	; 0x4d
 8001712:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	224d      	movs	r2, #77	; 0x4d
 800171a:	701a      	strb	r2, [r3, #0]
		break;
 800171c:	e307      	b.n	8001d2e <put_country_ID+0x10da>
    case 516:
		string[0] = 'N';
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	224e      	movs	r2, #78	; 0x4e
 8001722:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	2241      	movs	r2, #65	; 0x41
 800172a:	701a      	strb	r2, [r3, #0]
		break;
 800172c:	e2ff      	b.n	8001d2e <put_country_ID+0x10da>
    case 520:
		string[0] = 'N';
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	224e      	movs	r2, #78	; 0x4e
 8001732:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	2252      	movs	r2, #82	; 0x52
 800173a:	701a      	strb	r2, [r3, #0]
		break;
 800173c:	e2f7      	b.n	8001d2e <put_country_ID+0x10da>
    case 524:
		string[0] = 'N';
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	224e      	movs	r2, #78	; 0x4e
 8001742:	701a      	strb	r2, [r3, #0]
		string[1] = 'P';
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	2250      	movs	r2, #80	; 0x50
 800174a:	701a      	strb	r2, [r3, #0]
		break;
 800174c:	e2ef      	b.n	8001d2e <put_country_ID+0x10da>
    case 528:
		string[0] = 'N';
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	224e      	movs	r2, #78	; 0x4e
 8001752:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	224c      	movs	r2, #76	; 0x4c
 800175a:	701a      	strb	r2, [r3, #0]
		break;
 800175c:	e2e7      	b.n	8001d2e <put_country_ID+0x10da>
    case 540:
		string[0] = 'N';
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	224e      	movs	r2, #78	; 0x4e
 8001762:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	2243      	movs	r2, #67	; 0x43
 800176a:	701a      	strb	r2, [r3, #0]
		break;
 800176c:	e2df      	b.n	8001d2e <put_country_ID+0x10da>
    case 554:
		string[0] = 'N';
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	224e      	movs	r2, #78	; 0x4e
 8001772:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	225a      	movs	r2, #90	; 0x5a
 800177a:	701a      	strb	r2, [r3, #0]
		break;
 800177c:	e2d7      	b.n	8001d2e <put_country_ID+0x10da>
    case 558:
		string[0] = 'N';
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	224e      	movs	r2, #78	; 0x4e
 8001782:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2249      	movs	r2, #73	; 0x49
 800178a:	701a      	strb	r2, [r3, #0]
		break;
 800178c:	e2cf      	b.n	8001d2e <put_country_ID+0x10da>
    case 562:
		string[0] = 'N';
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	224e      	movs	r2, #78	; 0x4e
 8001792:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	2245      	movs	r2, #69	; 0x45
 800179a:	701a      	strb	r2, [r3, #0]
		break;
 800179c:	e2c7      	b.n	8001d2e <put_country_ID+0x10da>
    case 566:
		string[0] = 'N';
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	224e      	movs	r2, #78	; 0x4e
 80017a2:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	2247      	movs	r2, #71	; 0x47
 80017aa:	701a      	strb	r2, [r3, #0]
		break;
 80017ac:	e2bf      	b.n	8001d2e <put_country_ID+0x10da>
    case 570:
		string[0] = 'N';
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	224e      	movs	r2, #78	; 0x4e
 80017b2:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	2255      	movs	r2, #85	; 0x55
 80017ba:	701a      	strb	r2, [r3, #0]
		break;
 80017bc:	e2b7      	b.n	8001d2e <put_country_ID+0x10da>
    case 574:
		string[0] = 'N';
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	224e      	movs	r2, #78	; 0x4e
 80017c2:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	2246      	movs	r2, #70	; 0x46
 80017ca:	701a      	strb	r2, [r3, #0]
		break;
 80017cc:	e2af      	b.n	8001d2e <put_country_ID+0x10da>
    case 807:
		string[0] = 'M';
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	224d      	movs	r2, #77	; 0x4d
 80017d2:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	224b      	movs	r2, #75	; 0x4b
 80017da:	701a      	strb	r2, [r3, #0]
		break;
 80017dc:	e2a7      	b.n	8001d2e <put_country_ID+0x10da>
    case 580:
		string[0] = 'M';
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	224d      	movs	r2, #77	; 0x4d
 80017e2:	701a      	strb	r2, [r3, #0]
		string[1] = 'P';
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	2250      	movs	r2, #80	; 0x50
 80017ea:	701a      	strb	r2, [r3, #0]
		break;
 80017ec:	e29f      	b.n	8001d2e <put_country_ID+0x10da>
    case 578:
		string[0] = 'N';
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	224e      	movs	r2, #78	; 0x4e
 80017f2:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	224f      	movs	r2, #79	; 0x4f
 80017fa:	701a      	strb	r2, [r3, #0]
		break;
 80017fc:	e297      	b.n	8001d2e <put_country_ID+0x10da>
    case 512:
		string[0] = 'O';
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	224f      	movs	r2, #79	; 0x4f
 8001802:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	224d      	movs	r2, #77	; 0x4d
 800180a:	701a      	strb	r2, [r3, #0]
		break;
 800180c:	e28f      	b.n	8001d2e <put_country_ID+0x10da>
    case 586:
		string[0] = 'P';
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2250      	movs	r2, #80	; 0x50
 8001812:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	224b      	movs	r2, #75	; 0x4b
 800181a:	701a      	strb	r2, [r3, #0]
		break;
 800181c:	e287      	b.n	8001d2e <put_country_ID+0x10da>
    case 585:
		string[0] = 'P';
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2250      	movs	r2, #80	; 0x50
 8001822:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	2257      	movs	r2, #87	; 0x57
 800182a:	701a      	strb	r2, [r3, #0]
		break;
 800182c:	e27f      	b.n	8001d2e <put_country_ID+0x10da>
    case 275:
		string[0] = 'P';
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2250      	movs	r2, #80	; 0x50
 8001832:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	2253      	movs	r2, #83	; 0x53
 800183a:	701a      	strb	r2, [r3, #0]
		break;
 800183c:	e277      	b.n	8001d2e <put_country_ID+0x10da>
    case 591:
		string[0] = 'P';
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2250      	movs	r2, #80	; 0x50
 8001842:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	2241      	movs	r2, #65	; 0x41
 800184a:	701a      	strb	r2, [r3, #0]
		break;
 800184c:	e26f      	b.n	8001d2e <put_country_ID+0x10da>
    case 598:
		string[0] = 'P';
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2250      	movs	r2, #80	; 0x50
 8001852:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	2247      	movs	r2, #71	; 0x47
 800185a:	701a      	strb	r2, [r3, #0]
		break;
 800185c:	e267      	b.n	8001d2e <put_country_ID+0x10da>
    case 600:
		string[0] = 'P';
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2250      	movs	r2, #80	; 0x50
 8001862:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	2259      	movs	r2, #89	; 0x59
 800186a:	701a      	strb	r2, [r3, #0]
		break;
 800186c:	e25f      	b.n	8001d2e <put_country_ID+0x10da>
    case 604:
		string[0] = 'P';
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2250      	movs	r2, #80	; 0x50
 8001872:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	2245      	movs	r2, #69	; 0x45
 800187a:	701a      	strb	r2, [r3, #0]
		break;
 800187c:	e257      	b.n	8001d2e <put_country_ID+0x10da>
    case 608:
		string[0] = 'P';
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2250      	movs	r2, #80	; 0x50
 8001882:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	2248      	movs	r2, #72	; 0x48
 800188a:	701a      	strb	r2, [r3, #0]
		break;
 800188c:	e24f      	b.n	8001d2e <put_country_ID+0x10da>
    case 612:
		string[0] = 'P';
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2250      	movs	r2, #80	; 0x50
 8001892:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	224e      	movs	r2, #78	; 0x4e
 800189a:	701a      	strb	r2, [r3, #0]
		break;
 800189c:	e247      	b.n	8001d2e <put_country_ID+0x10da>
    case 616:
		string[0] = 'P';
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2250      	movs	r2, #80	; 0x50
 80018a2:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	224c      	movs	r2, #76	; 0x4c
 80018aa:	701a      	strb	r2, [r3, #0]
		break;
 80018ac:	e23f      	b.n	8001d2e <put_country_ID+0x10da>
    case 620:
		string[0] = 'P';
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2250      	movs	r2, #80	; 0x50
 80018b2:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	2254      	movs	r2, #84	; 0x54
 80018ba:	701a      	strb	r2, [r3, #0]
		break;
 80018bc:	e237      	b.n	8001d2e <put_country_ID+0x10da>
    case 630:
		string[0] = 'P';
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2250      	movs	r2, #80	; 0x50
 80018c2:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	2252      	movs	r2, #82	; 0x52
 80018ca:	701a      	strb	r2, [r3, #0]
		break;
 80018cc:	e22f      	b.n	8001d2e <put_country_ID+0x10da>
    case 634:
		string[0] = 'Q';
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2251      	movs	r2, #81	; 0x51
 80018d2:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	2241      	movs	r2, #65	; 0x41
 80018da:	701a      	strb	r2, [r3, #0]
		break;
 80018dc:	e227      	b.n	8001d2e <put_country_ID+0x10da>
    case 638:
		string[0] = 'R';
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2252      	movs	r2, #82	; 0x52
 80018e2:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	2245      	movs	r2, #69	; 0x45
 80018ea:	701a      	strb	r2, [r3, #0]
		break;
 80018ec:	e21f      	b.n	8001d2e <put_country_ID+0x10da>
    case 642:
		string[0] = 'R';
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2252      	movs	r2, #82	; 0x52
 80018f2:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	224f      	movs	r2, #79	; 0x4f
 80018fa:	701a      	strb	r2, [r3, #0]
		break;
 80018fc:	e217      	b.n	8001d2e <put_country_ID+0x10da>
    case 643:
		string[0] = 'R';
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2252      	movs	r2, #82	; 0x52
 8001902:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	2255      	movs	r2, #85	; 0x55
 800190a:	701a      	strb	r2, [r3, #0]
		break;
 800190c:	e20f      	b.n	8001d2e <put_country_ID+0x10da>
    case 646:
		string[0] = 'R';
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2252      	movs	r2, #82	; 0x52
 8001912:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	2257      	movs	r2, #87	; 0x57
 800191a:	701a      	strb	r2, [r3, #0]
		break;
 800191c:	e207      	b.n	8001d2e <put_country_ID+0x10da>
    case 652:
		string[0] = 'B';
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2242      	movs	r2, #66	; 0x42
 8001922:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	224c      	movs	r2, #76	; 0x4c
 800192a:	701a      	strb	r2, [r3, #0]
		break;
 800192c:	e1ff      	b.n	8001d2e <put_country_ID+0x10da>
    case 654:
		string[0] = 'S';
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2253      	movs	r2, #83	; 0x53
 8001932:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	2248      	movs	r2, #72	; 0x48
 800193a:	701a      	strb	r2, [r3, #0]
		break;
 800193c:	e1f7      	b.n	8001d2e <put_country_ID+0x10da>
    case 659:
		string[0] = 'K';
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	224b      	movs	r2, #75	; 0x4b
 8001942:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	224e      	movs	r2, #78	; 0x4e
 800194a:	701a      	strb	r2, [r3, #0]
		break;
 800194c:	e1ef      	b.n	8001d2e <put_country_ID+0x10da>
    case 662:
		string[0] = 'L';
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	224c      	movs	r2, #76	; 0x4c
 8001952:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	2243      	movs	r2, #67	; 0x43
 800195a:	701a      	strb	r2, [r3, #0]
		break;
 800195c:	e1e7      	b.n	8001d2e <put_country_ID+0x10da>
    case 663:
		string[0] = 'M';
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	224d      	movs	r2, #77	; 0x4d
 8001962:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	2246      	movs	r2, #70	; 0x46
 800196a:	701a      	strb	r2, [r3, #0]
		break;
 800196c:	e1df      	b.n	8001d2e <put_country_ID+0x10da>
    case 666:
		string[0] = 'P';
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2250      	movs	r2, #80	; 0x50
 8001972:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	224d      	movs	r2, #77	; 0x4d
 800197a:	701a      	strb	r2, [r3, #0]
		break;
 800197c:	e1d7      	b.n	8001d2e <put_country_ID+0x10da>
    case 670:
		string[0] = 'V';
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2256      	movs	r2, #86	; 0x56
 8001982:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	2243      	movs	r2, #67	; 0x43
 800198a:	701a      	strb	r2, [r3, #0]
		break;
 800198c:	e1cf      	b.n	8001d2e <put_country_ID+0x10da>
    case 882:
		string[0] = 'W';
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2257      	movs	r2, #87	; 0x57
 8001992:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	2253      	movs	r2, #83	; 0x53
 800199a:	701a      	strb	r2, [r3, #0]
		break;
 800199c:	e1c7      	b.n	8001d2e <put_country_ID+0x10da>
    case 674:
		string[0] = 'S';
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2253      	movs	r2, #83	; 0x53
 80019a2:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	224d      	movs	r2, #77	; 0x4d
 80019aa:	701a      	strb	r2, [r3, #0]
		break;
 80019ac:	e1bf      	b.n	8001d2e <put_country_ID+0x10da>
    case 678:
		string[0] = 'S';
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2253      	movs	r2, #83	; 0x53
 80019b2:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	2254      	movs	r2, #84	; 0x54
 80019ba:	701a      	strb	r2, [r3, #0]
		break;
 80019bc:	e1b7      	b.n	8001d2e <put_country_ID+0x10da>
    case 682:
		string[0] = 'S';
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2253      	movs	r2, #83	; 0x53
 80019c2:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	701a      	strb	r2, [r3, #0]
		break;
 80019cc:	e1af      	b.n	8001d2e <put_country_ID+0x10da>
    case 686:
		string[0] = 'S';
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2253      	movs	r2, #83	; 0x53
 80019d2:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	224e      	movs	r2, #78	; 0x4e
 80019da:	701a      	strb	r2, [r3, #0]
		break;
 80019dc:	e1a7      	b.n	8001d2e <put_country_ID+0x10da>
    case 688:
		string[0] = 'R';
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2252      	movs	r2, #82	; 0x52
 80019e2:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	2253      	movs	r2, #83	; 0x53
 80019ea:	701a      	strb	r2, [r3, #0]
		break;
 80019ec:	e19f      	b.n	8001d2e <put_country_ID+0x10da>
    case 690:
		string[0] = 'S';
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2253      	movs	r2, #83	; 0x53
 80019f2:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	2243      	movs	r2, #67	; 0x43
 80019fa:	701a      	strb	r2, [r3, #0]
		break;
 80019fc:	e197      	b.n	8001d2e <put_country_ID+0x10da>
    case 694:
		string[0] = 'S';
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2253      	movs	r2, #83	; 0x53
 8001a02:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	224c      	movs	r2, #76	; 0x4c
 8001a0a:	701a      	strb	r2, [r3, #0]
		break;
 8001a0c:	e18f      	b.n	8001d2e <put_country_ID+0x10da>
    case 702:
		string[0] = 'S';
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2253      	movs	r2, #83	; 0x53
 8001a12:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	2247      	movs	r2, #71	; 0x47
 8001a1a:	701a      	strb	r2, [r3, #0]
		break;
 8001a1c:	e187      	b.n	8001d2e <put_country_ID+0x10da>
    case 534:
		string[0] = 'S';
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2253      	movs	r2, #83	; 0x53
 8001a22:	701a      	strb	r2, [r3, #0]
		string[1] = 'X';
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	2258      	movs	r2, #88	; 0x58
 8001a2a:	701a      	strb	r2, [r3, #0]
		break;
 8001a2c:	e17f      	b.n	8001d2e <put_country_ID+0x10da>
    case 703:
		string[0] = 'S';
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2253      	movs	r2, #83	; 0x53
 8001a32:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	224b      	movs	r2, #75	; 0x4b
 8001a3a:	701a      	strb	r2, [r3, #0]
		break;
 8001a3c:	e177      	b.n	8001d2e <put_country_ID+0x10da>
    case 705:
		string[0] = 'S';
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2253      	movs	r2, #83	; 0x53
 8001a42:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	2249      	movs	r2, #73	; 0x49
 8001a4a:	701a      	strb	r2, [r3, #0]
		break;
 8001a4c:	e16f      	b.n	8001d2e <put_country_ID+0x10da>
    case 90:
		string[0] = 'S';
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2253      	movs	r2, #83	; 0x53
 8001a52:	701a      	strb	r2, [r3, #0]
		string[1] = 'B';
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	2242      	movs	r2, #66	; 0x42
 8001a5a:	701a      	strb	r2, [r3, #0]
		break;
 8001a5c:	e167      	b.n	8001d2e <put_country_ID+0x10da>
    case 706:
		string[0] = 'S';
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2253      	movs	r2, #83	; 0x53
 8001a62:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	224f      	movs	r2, #79	; 0x4f
 8001a6a:	701a      	strb	r2, [r3, #0]
		break;
 8001a6c:	e15f      	b.n	8001d2e <put_country_ID+0x10da>
    case 710:
		string[0] = 'Z';
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	225a      	movs	r2, #90	; 0x5a
 8001a72:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	2241      	movs	r2, #65	; 0x41
 8001a7a:	701a      	strb	r2, [r3, #0]
		break;
 8001a7c:	e157      	b.n	8001d2e <put_country_ID+0x10da>
    case 239:
		string[0] = 'G';
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2247      	movs	r2, #71	; 0x47
 8001a82:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	2253      	movs	r2, #83	; 0x53
 8001a8a:	701a      	strb	r2, [r3, #0]
		break;
 8001a8c:	e14f      	b.n	8001d2e <put_country_ID+0x10da>
    case 728:
		string[0] = 'S';
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2253      	movs	r2, #83	; 0x53
 8001a92:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	2253      	movs	r2, #83	; 0x53
 8001a9a:	701a      	strb	r2, [r3, #0]
		break;
 8001a9c:	e147      	b.n	8001d2e <put_country_ID+0x10da>
    case 724:
		string[0] = 'E';
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2245      	movs	r2, #69	; 0x45
 8001aa2:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2253      	movs	r2, #83	; 0x53
 8001aaa:	701a      	strb	r2, [r3, #0]
		break;
 8001aac:	e13f      	b.n	8001d2e <put_country_ID+0x10da>
    case 144:
		string[0] = 'L';
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	224c      	movs	r2, #76	; 0x4c
 8001ab2:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	224b      	movs	r2, #75	; 0x4b
 8001aba:	701a      	strb	r2, [r3, #0]
		break;
 8001abc:	e137      	b.n	8001d2e <put_country_ID+0x10da>
    case 729:
		string[0] = 'S';
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2253      	movs	r2, #83	; 0x53
 8001ac2:	701a      	strb	r2, [r3, #0]
		string[1] = 'D';
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	2244      	movs	r2, #68	; 0x44
 8001aca:	701a      	strb	r2, [r3, #0]
		break;
 8001acc:	e12f      	b.n	8001d2e <put_country_ID+0x10da>
    case 740:
		string[0] = 'S';
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2253      	movs	r2, #83	; 0x53
 8001ad2:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	2252      	movs	r2, #82	; 0x52
 8001ada:	701a      	strb	r2, [r3, #0]
		break;
 8001adc:	e127      	b.n	8001d2e <put_country_ID+0x10da>
    case 744:
		string[0] = 'S';
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2253      	movs	r2, #83	; 0x53
 8001ae2:	701a      	strb	r2, [r3, #0]
		string[1] = 'J';
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	224a      	movs	r2, #74	; 0x4a
 8001aea:	701a      	strb	r2, [r3, #0]
		break;
 8001aec:	e11f      	b.n	8001d2e <put_country_ID+0x10da>
    case 752:
		string[0] = 'S';
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2253      	movs	r2, #83	; 0x53
 8001af2:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	2245      	movs	r2, #69	; 0x45
 8001afa:	701a      	strb	r2, [r3, #0]
		break;
 8001afc:	e117      	b.n	8001d2e <put_country_ID+0x10da>
    case 756:
		string[0] = 'C';
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2243      	movs	r2, #67	; 0x43
 8001b02:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	2248      	movs	r2, #72	; 0x48
 8001b0a:	701a      	strb	r2, [r3, #0]
		break;
 8001b0c:	e10f      	b.n	8001d2e <put_country_ID+0x10da>
    case 760:
		string[0] = 'S';
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2253      	movs	r2, #83	; 0x53
 8001b12:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	2259      	movs	r2, #89	; 0x59
 8001b1a:	701a      	strb	r2, [r3, #0]
		break;
 8001b1c:	e107      	b.n	8001d2e <put_country_ID+0x10da>
    case 158:
		string[0] = 'T';
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2254      	movs	r2, #84	; 0x54
 8001b22:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	2257      	movs	r2, #87	; 0x57
 8001b2a:	701a      	strb	r2, [r3, #0]
		break;
 8001b2c:	e0ff      	b.n	8001d2e <put_country_ID+0x10da>
    case 762:
		string[0] = 'T';
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2254      	movs	r2, #84	; 0x54
 8001b32:	701a      	strb	r2, [r3, #0]
		string[1] = 'J';
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	224a      	movs	r2, #74	; 0x4a
 8001b3a:	701a      	strb	r2, [r3, #0]
		break;
 8001b3c:	e0f7      	b.n	8001d2e <put_country_ID+0x10da>
    case 834:
		string[0] = 'T';
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2254      	movs	r2, #84	; 0x54
 8001b42:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	225a      	movs	r2, #90	; 0x5a
 8001b4a:	701a      	strb	r2, [r3, #0]
		break;
 8001b4c:	e0ef      	b.n	8001d2e <put_country_ID+0x10da>
    case 764:
		string[0] = 'T';
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2254      	movs	r2, #84	; 0x54
 8001b52:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	2248      	movs	r2, #72	; 0x48
 8001b5a:	701a      	strb	r2, [r3, #0]
		break;
 8001b5c:	e0e7      	b.n	8001d2e <put_country_ID+0x10da>
    case 626:
		string[0] = 'T';
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2254      	movs	r2, #84	; 0x54
 8001b62:	701a      	strb	r2, [r3, #0]
		string[1] = 'L';
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	224c      	movs	r2, #76	; 0x4c
 8001b6a:	701a      	strb	r2, [r3, #0]
		break;
 8001b6c:	e0df      	b.n	8001d2e <put_country_ID+0x10da>
    case 768:
		string[0] = 'T';
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2254      	movs	r2, #84	; 0x54
 8001b72:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	2247      	movs	r2, #71	; 0x47
 8001b7a:	701a      	strb	r2, [r3, #0]
		break;
 8001b7c:	e0d7      	b.n	8001d2e <put_country_ID+0x10da>
    case 772:
		string[0] = 'T';
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2254      	movs	r2, #84	; 0x54
 8001b82:	701a      	strb	r2, [r3, #0]
		string[1] = 'K';
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	224b      	movs	r2, #75	; 0x4b
 8001b8a:	701a      	strb	r2, [r3, #0]
		break;
 8001b8c:	e0cf      	b.n	8001d2e <put_country_ID+0x10da>
    case 776:
		string[0] = 'T';
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2254      	movs	r2, #84	; 0x54
 8001b92:	701a      	strb	r2, [r3, #0]
		string[1] = 'O';
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	224f      	movs	r2, #79	; 0x4f
 8001b9a:	701a      	strb	r2, [r3, #0]
		break;
 8001b9c:	e0c7      	b.n	8001d2e <put_country_ID+0x10da>
    case 780:
		string[0] = 'T';
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2254      	movs	r2, #84	; 0x54
 8001ba2:	701a      	strb	r2, [r3, #0]
		string[1] = 'T';
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	2254      	movs	r2, #84	; 0x54
 8001baa:	701a      	strb	r2, [r3, #0]
		break;
 8001bac:	e0bf      	b.n	8001d2e <put_country_ID+0x10da>
    case 788:
		string[0] = 'T';
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2254      	movs	r2, #84	; 0x54
 8001bb2:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	224e      	movs	r2, #78	; 0x4e
 8001bba:	701a      	strb	r2, [r3, #0]
		break;
 8001bbc:	e0b7      	b.n	8001d2e <put_country_ID+0x10da>
    case 792:
		string[0] = 'T';
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2254      	movs	r2, #84	; 0x54
 8001bc2:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	2252      	movs	r2, #82	; 0x52
 8001bca:	701a      	strb	r2, [r3, #0]
		break;
 8001bcc:	e0af      	b.n	8001d2e <put_country_ID+0x10da>
    case 795:
		string[0] = 'T';
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2254      	movs	r2, #84	; 0x54
 8001bd2:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	224d      	movs	r2, #77	; 0x4d
 8001bda:	701a      	strb	r2, [r3, #0]
		break;
 8001bdc:	e0a7      	b.n	8001d2e <put_country_ID+0x10da>
    case 796:
		string[0] = 'T';
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2254      	movs	r2, #84	; 0x54
 8001be2:	701a      	strb	r2, [r3, #0]
		string[1] = 'C';
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	2243      	movs	r2, #67	; 0x43
 8001bea:	701a      	strb	r2, [r3, #0]
		break;
 8001bec:	e09f      	b.n	8001d2e <put_country_ID+0x10da>
    case 798:
		string[0] = 'T';
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2254      	movs	r2, #84	; 0x54
 8001bf2:	701a      	strb	r2, [r3, #0]
		string[1] = 'V';
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	2256      	movs	r2, #86	; 0x56
 8001bfa:	701a      	strb	r2, [r3, #0]
		break;
 8001bfc:	e097      	b.n	8001d2e <put_country_ID+0x10da>
    case 800:
		string[0] = 'U';
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2255      	movs	r2, #85	; 0x55
 8001c02:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	2247      	movs	r2, #71	; 0x47
 8001c0a:	701a      	strb	r2, [r3, #0]
		break;
 8001c0c:	e08f      	b.n	8001d2e <put_country_ID+0x10da>
    case 804:
		string[0] = 'U';
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2255      	movs	r2, #85	; 0x55
 8001c12:	701a      	strb	r2, [r3, #0]
		string[1] = 'A';
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	2241      	movs	r2, #65	; 0x41
 8001c1a:	701a      	strb	r2, [r3, #0]
		break;
 8001c1c:	e087      	b.n	8001d2e <put_country_ID+0x10da>
    case 784:
		string[0] = 'A';
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2241      	movs	r2, #65	; 0x41
 8001c22:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	2245      	movs	r2, #69	; 0x45
 8001c2a:	701a      	strb	r2, [r3, #0]
		break;
 8001c2c:	e07f      	b.n	8001d2e <put_country_ID+0x10da>
    case 826:
		string[0] = 'G';
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2247      	movs	r2, #71	; 0x47
 8001c32:	701a      	strb	r2, [r3, #0]
		string[1] = 'B';
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	2242      	movs	r2, #66	; 0x42
 8001c3a:	701a      	strb	r2, [r3, #0]
		break;
 8001c3c:	e077      	b.n	8001d2e <put_country_ID+0x10da>
    case 840:
		string[0] = 'U';
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2255      	movs	r2, #85	; 0x55
 8001c42:	701a      	strb	r2, [r3, #0]
		string[1] = 'S';
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	2253      	movs	r2, #83	; 0x53
 8001c4a:	701a      	strb	r2, [r3, #0]
		break;
 8001c4c:	e06f      	b.n	8001d2e <put_country_ID+0x10da>
    case 581:
		string[0] = 'U';
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2255      	movs	r2, #85	; 0x55
 8001c52:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	224d      	movs	r2, #77	; 0x4d
 8001c5a:	701a      	strb	r2, [r3, #0]
		break;
 8001c5c:	e067      	b.n	8001d2e <put_country_ID+0x10da>
    case 858:
		string[0] = 'U';
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2255      	movs	r2, #85	; 0x55
 8001c62:	701a      	strb	r2, [r3, #0]
		string[1] = 'Y';
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	2259      	movs	r2, #89	; 0x59
 8001c6a:	701a      	strb	r2, [r3, #0]
		break;
 8001c6c:	e05f      	b.n	8001d2e <put_country_ID+0x10da>
    case 860:
		string[0] = 'U';
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2255      	movs	r2, #85	; 0x55
 8001c72:	701a      	strb	r2, [r3, #0]
		string[1] = 'Z';
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	225a      	movs	r2, #90	; 0x5a
 8001c7a:	701a      	strb	r2, [r3, #0]
		break;
 8001c7c:	e057      	b.n	8001d2e <put_country_ID+0x10da>
    case 548:
		string[0] = 'V';
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2256      	movs	r2, #86	; 0x56
 8001c82:	701a      	strb	r2, [r3, #0]
		string[1] = 'U';
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	2255      	movs	r2, #85	; 0x55
 8001c8a:	701a      	strb	r2, [r3, #0]
		break;
 8001c8c:	e04f      	b.n	8001d2e <put_country_ID+0x10da>
    case 862:
		string[0] = 'V';
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2256      	movs	r2, #86	; 0x56
 8001c92:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	2245      	movs	r2, #69	; 0x45
 8001c9a:	701a      	strb	r2, [r3, #0]
		break;
 8001c9c:	e047      	b.n	8001d2e <put_country_ID+0x10da>
    case 704:
		string[0] = 'V';
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2256      	movs	r2, #86	; 0x56
 8001ca2:	701a      	strb	r2, [r3, #0]
		string[1] = 'N';
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	224e      	movs	r2, #78	; 0x4e
 8001caa:	701a      	strb	r2, [r3, #0]
		break;
 8001cac:	e03f      	b.n	8001d2e <put_country_ID+0x10da>
    case 92:
		string[0] = 'V';
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2256      	movs	r2, #86	; 0x56
 8001cb2:	701a      	strb	r2, [r3, #0]
		string[1] = 'G';
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	2247      	movs	r2, #71	; 0x47
 8001cba:	701a      	strb	r2, [r3, #0]
		break;
 8001cbc:	e037      	b.n	8001d2e <put_country_ID+0x10da>
    case 850:
		string[0] = 'V';
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2256      	movs	r2, #86	; 0x56
 8001cc2:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	2249      	movs	r2, #73	; 0x49
 8001cca:	701a      	strb	r2, [r3, #0]
		break;
 8001ccc:	e02f      	b.n	8001d2e <put_country_ID+0x10da>
    case 876:
		string[0] = 'W';
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2257      	movs	r2, #87	; 0x57
 8001cd2:	701a      	strb	r2, [r3, #0]
		string[1] = 'F';
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2246      	movs	r2, #70	; 0x46
 8001cda:	701a      	strb	r2, [r3, #0]
		break;
 8001cdc:	e027      	b.n	8001d2e <put_country_ID+0x10da>
    case 732:
		string[0] = 'E';
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2245      	movs	r2, #69	; 0x45
 8001ce2:	701a      	strb	r2, [r3, #0]
		string[1] = 'H';
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	2248      	movs	r2, #72	; 0x48
 8001cea:	701a      	strb	r2, [r3, #0]
		break;
 8001cec:	e01f      	b.n	8001d2e <put_country_ID+0x10da>
    case 887:
		string[0] = 'Y';
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2259      	movs	r2, #89	; 0x59
 8001cf2:	701a      	strb	r2, [r3, #0]
		string[1] = 'E';
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2245      	movs	r2, #69	; 0x45
 8001cfa:	701a      	strb	r2, [r3, #0]
		break;
 8001cfc:	e017      	b.n	8001d2e <put_country_ID+0x10da>
    case 894:
		string[0] = 'Z';
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	225a      	movs	r2, #90	; 0x5a
 8001d02:	701a      	strb	r2, [r3, #0]
		string[1] = 'M';
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	224d      	movs	r2, #77	; 0x4d
 8001d0a:	701a      	strb	r2, [r3, #0]
		break;
 8001d0c:	e00f      	b.n	8001d2e <put_country_ID+0x10da>
    case 716:
		string[0] = 'Z';
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	225a      	movs	r2, #90	; 0x5a
 8001d12:	701a      	strb	r2, [r3, #0]
		string[1] = 'W';
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	2257      	movs	r2, #87	; 0x57
 8001d1a:	701a      	strb	r2, [r3, #0]
		break;
 8001d1c:	e007      	b.n	8001d2e <put_country_ID+0x10da>
	default:
		string[0] = 'X';
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2258      	movs	r2, #88	; 0x58
 8001d22:	701a      	strb	r2, [r3, #0]
		string[1] = 'X';
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	2258      	movs	r2, #88	; 0x58
 8001d2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)

08001d38 <init_spi>:
/*-----------------------------------------------------------------------*/

/* Initialize MMC interface */
static
void init_spi (void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	//SPIxENABLE();		/* Enable SPI function */
	//CS_HIGH();			/* Set CS# high */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	0059      	lsls	r1, r3, #1
 8001d40:	2390      	movs	r3, #144	; 0x90
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	2201      	movs	r2, #1
 8001d46:	0018      	movs	r0, r3
 8001d48:	f005 ffb3 	bl	8007cb2 <HAL_GPIO_WritePin>


	//for (Timer1 = 10; Timer1; ) ;	/* 10ms */
	HAL_Delay(10);
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f005 fba1 	bl	8007494 <HAL_Delay>
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	0002      	movs	r2, r0
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	701a      	strb	r2, [r3, #0]
	//SPIx_DR = dat;
	//while (SPIx_SR & _BV(7)) ;
	//return (BYTE)SPIx_DR;
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	HAL_SPI_TransmitReceive(&hspi2, &dat, &dat, 1, 10);
 8001d64:	1dfa      	adds	r2, r7, #7
 8001d66:	1df9      	adds	r1, r7, #7
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <xchg_spi+0x28>)
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f007 fd94 	bl	800989c <HAL_SPI_TransmitReceive>
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	return dat;
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	781b      	ldrb	r3, [r3, #0]
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200001a0 	.word	0x200001a0

08001d84 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	uint8_t i, Tx[10];
	for(i=0;i<10;i++)Tx[i]=0xFF;
 8001d8e:	2317      	movs	r3, #23
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <rcvr_spi_multi+0x2c>
 8001d98:	2017      	movs	r0, #23
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	18ba      	adds	r2, r7, r2
 8001da2:	21ff      	movs	r1, #255	; 0xff
 8001da4:	54d1      	strb	r1, [r2, r3]
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	3201      	adds	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	2217      	movs	r2, #23
 8001db2:	18bb      	adds	r3, r7, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d9ee      	bls.n	8001d98 <rcvr_spi_multi+0x14>
	i=0;
 8001dba:	18bb      	adds	r3, r7, r2
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
	while(btr>10){
 8001dc0:	e019      	b.n	8001df6 <rcvr_spi_multi+0x72>
		HAL_SPI_TransmitReceive(&hspi2, Tx, (buff+(i*10)), 10, 10);
 8001dc2:	2417      	movs	r4, #23
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	0013      	movs	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	189b      	adds	r3, r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	189a      	adds	r2, r3, r2
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	18f9      	adds	r1, r7, r3
 8001dda:	4814      	ldr	r0, [pc, #80]	; (8001e2c <rcvr_spi_multi+0xa8>)
 8001ddc:	230a      	movs	r3, #10
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	230a      	movs	r3, #10
 8001de2:	f007 fd5b 	bl	800989c <HAL_SPI_TransmitReceive>
		btr -= 10;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3b0a      	subs	r3, #10
 8001dea:	603b      	str	r3, [r7, #0]
		i++;
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	3201      	adds	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
	while(btr>10){
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b0a      	cmp	r3, #10
 8001dfa:	d8e2      	bhi.n	8001dc2 <rcvr_spi_multi+0x3e>
	}
	HAL_SPI_TransmitReceive(&hspi2, Tx, (buff+(i*10)), btr, 10);
 8001dfc:	2317      	movs	r3, #23
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	0013      	movs	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	189a      	adds	r2, r3, r2
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	210c      	movs	r1, #12
 8001e16:	1879      	adds	r1, r7, r1
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <rcvr_spi_multi+0xa8>)
 8001e1a:	240a      	movs	r4, #10
 8001e1c:	9400      	str	r4, [sp, #0]
 8001e1e:	f007 fd3d 	bl	800989c <HAL_SPI_TransmitReceive>
	d = SPIx_DR;
	buff[1] = d; buff[0] = d >> 8;

	SPIx_CR1 &= ~(_BV(6) | _BV(11));	// Set SPI to 8-bit mode
	SPIx_CR1 |= _BV(6);*/
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b007      	add	sp, #28
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	200001a0 	.word	0x200001a0

08001e30 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
	uint8_t i, Rx[10];
	i=0;
 8001e3a:	2317      	movs	r3, #23
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
	while(btx>10){
 8001e42:	e019      	b.n	8001e78 <xmit_spi_multi+0x48>
		HAL_SPI_TransmitReceive(&hspi2, (buff+(i*10)), Rx, 10, 10);
 8001e44:	2417      	movs	r4, #23
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	001a      	movs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1899      	adds	r1, r3, r2
 8001e58:	230c      	movs	r3, #12
 8001e5a:	18fa      	adds	r2, r7, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <xmit_spi_multi+0x7c>)
 8001e5e:	230a      	movs	r3, #10
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	230a      	movs	r3, #10
 8001e64:	f007 fd1a 	bl	800989c <HAL_SPI_TransmitReceive>
		btx -= 10;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	3b0a      	subs	r3, #10
 8001e6c:	603b      	str	r3, [r7, #0]
		i++;
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	3201      	adds	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
	while(btx>10){
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b0a      	cmp	r3, #10
 8001e7c:	d8e2      	bhi.n	8001e44 <xmit_spi_multi+0x14>
	}
	HAL_SPI_TransmitReceive(&hspi2, (buff+(i*10)), Rx, btx, 10);
 8001e7e:	2317      	movs	r3, #23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	0013      	movs	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	1899      	adds	r1, r3, r2
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	220c      	movs	r2, #12
 8001e98:	18ba      	adds	r2, r7, r2
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <xmit_spi_multi+0x7c>)
 8001e9c:	240a      	movs	r4, #10
 8001e9e:	9400      	str	r4, [sp, #0]
 8001ea0:	f007 fcfc 	bl	800989c <HAL_SPI_TransmitReceive>
	while (SPIx_SR & _BV(7)) ;
	SPIx_DR;

	SPIx_CR1 &= ~(_BV(6) | _BV(11));	// Set SPI to 8-bit mode
	SPIx_CR1 |= _BV(6);*/
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b007      	add	sp, #28
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	200001a0 	.word	0x200001a0

08001eb0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	BYTE d;


	Timer2 = wt;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <wait_ready+0x44>)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
	do {
		d = xchg_spi(0xFF);
 8001ebe:	250f      	movs	r5, #15
 8001ec0:	197c      	adds	r4, r7, r5
 8001ec2:	20ff      	movs	r0, #255	; 0xff
 8001ec4:	f7ff ff48 	bl	8001d58 <xchg_spi>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
 8001ecc:	197b      	adds	r3, r7, r5
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2bff      	cmp	r3, #255	; 0xff
 8001ed2:	d003      	beq.n	8001edc <wait_ready+0x2c>
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <wait_ready+0x44>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <wait_ready+0xe>

	return (d == 0xFF) ? 1 : 0;
 8001edc:	230f      	movs	r3, #15
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	3bff      	subs	r3, #255	; 0xff
 8001ee4:	425a      	negs	r2, r3
 8001ee6:	4153      	adcs	r3, r2
 8001ee8:	b2db      	uxtb	r3, r3
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b004      	add	sp, #16
 8001ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	20000128 	.word	0x20000128

08001ef8 <deselect>:
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	//CS_HIGH();		/* Set CS# high */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	0059      	lsls	r1, r3, #1
 8001f00:	2390      	movs	r3, #144	; 0x90
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	2201      	movs	r2, #1
 8001f06:	0018      	movs	r0, r3
 8001f08:	f005 fed3 	bl	8007cb2 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001f0c:	20ff      	movs	r0, #255	; 0xff
 8001f0e:	f7ff ff23 	bl	8001d58 <xchg_spi>

}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int _select (void)	/* 1:OK, 0:Timeout */
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	//CS_LOW();		/* Set CS# low */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	0059      	lsls	r1, r3, #1
 8001f20:	2390      	movs	r3, #144	; 0x90
 8001f22:	05db      	lsls	r3, r3, #23
 8001f24:	2200      	movs	r2, #0
 8001f26:	0018      	movs	r0, r3
 8001f28:	f005 fec3 	bl	8007cb2 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001f2c:	20ff      	movs	r0, #255	; 0xff
 8001f2e:	f7ff ff13 	bl	8001d58 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001f32:	23fa      	movs	r3, #250	; 0xfa
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff ffba 	bl	8001eb0 <wait_ready>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d001      	beq.n	8001f44 <_select+0x2c>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e002      	b.n	8001f4a <_select+0x32>

	deselect();
 8001f44:	f7ff ffd8 	bl	8001ef8 <deselect>
	return 0;	/* Timeout */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	BYTE token;


	Timer1 = 200;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <rcvr_datablock+0x60>)
 8001f5c:	22c8      	movs	r2, #200	; 0xc8
 8001f5e:	601a      	str	r2, [r3, #0]
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001f60:	250f      	movs	r5, #15
 8001f62:	197c      	adds	r4, r7, r5
 8001f64:	20ff      	movs	r0, #255	; 0xff
 8001f66:	f7ff fef7 	bl	8001d58 <xchg_spi>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
 8001f6e:	197b      	adds	r3, r7, r5
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2bff      	cmp	r3, #255	; 0xff
 8001f74:	d103      	bne.n	8001f7e <rcvr_datablock+0x2e>
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <rcvr_datablock+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001f7e:	230f      	movs	r3, #15
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2bfe      	cmp	r3, #254	; 0xfe
 8001f86:	d001      	beq.n	8001f8c <rcvr_datablock+0x3c>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e00c      	b.n	8001fa6 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0011      	movs	r1, r2
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff fef6 	bl	8001d84 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001f98:	20ff      	movs	r0, #255	; 0xff
 8001f9a:	f7ff fedd 	bl	8001d58 <xchg_spi>
 8001f9e:	20ff      	movs	r0, #255	; 0xff
 8001fa0:	f7ff feda 	bl	8001d58 <xchg_spi>

	return 1;						/* Function succeeded */
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bdb0      	pop	{r4, r5, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000124 	.word	0x20000124

08001fb4 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	1cfb      	adds	r3, r7, #3
 8001fc0:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8001fc2:	23fa      	movs	r3, #250	; 0xfa
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff ff72 	bl	8001eb0 <wait_ready>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d101      	bne.n	8001fd4 <xmit_datablock+0x20>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e025      	b.n	8002020 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8001fd4:	1cfb      	adds	r3, r7, #3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff febd 	bl	8001d58 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001fde:	1cfb      	adds	r3, r7, #3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2bfd      	cmp	r3, #253	; 0xfd
 8001fe4:	d01b      	beq.n	800201e <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	009a      	lsls	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0011      	movs	r1, r2
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff ff1e 	bl	8001e30 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001ff4:	20ff      	movs	r0, #255	; 0xff
 8001ff6:	f7ff feaf 	bl	8001d58 <xchg_spi>
 8001ffa:	20ff      	movs	r0, #255	; 0xff
 8001ffc:	f7ff feac 	bl	8001d58 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002000:	250f      	movs	r5, #15
 8002002:	197c      	adds	r4, r7, r5
 8002004:	20ff      	movs	r0, #255	; 0xff
 8002006:	f7ff fea7 	bl	8001d58 <xchg_spi>
 800200a:	0003      	movs	r3, r0
 800200c:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05)		/* Function fails if the data packet was not accepted */
 800200e:	197b      	adds	r3, r7, r5
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	221f      	movs	r2, #31
 8002014:	4013      	ands	r3, r2
 8002016:	2b05      	cmp	r3, #5
 8002018:	d001      	beq.n	800201e <xmit_datablock+0x6a>
			return 0;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <xmit_datablock+0x6c>
	}
	return 1;
 800201e:	2301      	movs	r3, #1
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bdb0      	pop	{r4, r5, r7, pc}

08002028 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b25b      	sxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	da15      	bge.n	800206c <send_cmd+0x44>
		cmd &= 0x7F;
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	1dfa      	adds	r2, r7, #7
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	217f      	movs	r1, #127	; 0x7f
 8002048:	400a      	ands	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 800204c:	250e      	movs	r5, #14
 800204e:	197c      	adds	r4, r7, r5
 8002050:	2100      	movs	r1, #0
 8002052:	2037      	movs	r0, #55	; 0x37
 8002054:	f7ff ffe8 	bl	8002028 <send_cmd>
 8002058:	0003      	movs	r3, r0
 800205a:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 800205c:	002a      	movs	r2, r5
 800205e:	18bb      	adds	r3, r7, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d902      	bls.n	800206c <send_cmd+0x44>
 8002066:	18bb      	adds	r3, r7, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	e067      	b.n	800213c <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d007      	beq.n	8002084 <send_cmd+0x5c>
		deselect();
 8002074:	f7ff ff40 	bl	8001ef8 <deselect>
		if (!_select()) return 0xFF;
 8002078:	f7ff ff4e 	bl	8001f18 <_select>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d101      	bne.n	8002084 <send_cmd+0x5c>
 8002080:	23ff      	movs	r3, #255	; 0xff
 8002082:	e05b      	b.n	800213c <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2240      	movs	r2, #64	; 0x40
 800208a:	4313      	orrs	r3, r2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff fe62 	bl	8001d58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	0e1b      	lsrs	r3, r3, #24
 8002098:	b2db      	uxtb	r3, r3
 800209a:	0018      	movs	r0, r3
 800209c:	f7ff fe5c 	bl	8001d58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	0c1b      	lsrs	r3, r3, #16
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff fe56 	bl	8001d58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7ff fe50 	bl	8001d58 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff fe4b 	bl	8001d58 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80020c2:	210f      	movs	r1, #15
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <send_cmd+0xb0>
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2295      	movs	r2, #149	; 0x95
 80020d6:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d103      	bne.n	80020e8 <send_cmd+0xc0>
 80020e0:	230f      	movs	r3, #15
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2287      	movs	r2, #135	; 0x87
 80020e6:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 80020e8:	230f      	movs	r3, #15
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fe32 	bl	8001d58 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d102      	bne.n	8002102 <send_cmd+0xda>
 80020fc:	20ff      	movs	r0, #255	; 0xff
 80020fe:	f7ff fe2b 	bl	8001d58 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002102:	230f      	movs	r3, #15
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	220a      	movs	r2, #10
 8002108:	701a      	strb	r2, [r3, #0]
	do
		res = xchg_spi(0xFF);
 800210a:	250e      	movs	r5, #14
 800210c:	197c      	adds	r4, r7, r5
 800210e:	20ff      	movs	r0, #255	; 0xff
 8002110:	f7ff fe22 	bl	8001d58 <xchg_spi>
 8002114:	0003      	movs	r3, r0
 8002116:	7023      	strb	r3, [r4, #0]
	while ((res & 0x80) && --n);
 8002118:	197b      	adds	r3, r7, r5
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b25b      	sxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	da09      	bge.n	8002136 <send_cmd+0x10e>
 8002122:	210f      	movs	r1, #15
 8002124:	187b      	adds	r3, r7, r1
 8002126:	187a      	adds	r2, r7, r1
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	3a01      	subs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	187b      	adds	r3, r7, r1
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e9      	bne.n	800210a <send_cmd+0xe2>

	return res;							/* Return received response */
 8002136:	230e      	movs	r3, #14
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	781b      	ldrb	r3, [r3, #0]
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bdb0      	pop	{r4, r5, r7, pc}

08002144 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	0002      	movs	r2, r0
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <disk_initialize+0x18>
 8002158:	2301      	movs	r3, #1
 800215a:	e0fd      	b.n	8002358 <disk_initialize+0x214>
	init_spi();							/* Initialize SPI */
 800215c:	f7ff fdec 	bl	8001d38 <init_spi>

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002160:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <disk_initialize+0x21c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	001a      	movs	r2, r3
 8002168:	2302      	movs	r3, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d003      	beq.n	8002176 <disk_initialize+0x32>
 800216e:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <disk_initialize+0x21c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e0f0      	b.n	8002358 <disk_initialize+0x214>

	FCLK_SLOW();
 8002176:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <disk_initialize+0x220>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2238      	movs	r2, #56	; 0x38
 800217c:	4393      	bics	r3, r2
 800217e:	001a      	movs	r2, r3
 8002180:	4b78      	ldr	r3, [pc, #480]	; (8002364 <disk_initialize+0x220>)
 8002182:	2130      	movs	r1, #48	; 0x30
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002188:	230f      	movs	r3, #15
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	220a      	movs	r2, #10
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e008      	b.n	80021a4 <disk_initialize+0x60>
 8002192:	20ff      	movs	r0, #255	; 0xff
 8002194:	f7ff fde0 	bl	8001d58 <xchg_spi>
 8002198:	210f      	movs	r1, #15
 800219a:	187b      	adds	r3, r7, r1
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	240f      	movs	r4, #15
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f1      	bne.n	8002192 <disk_initialize+0x4e>

	ty = 0;
 80021ae:	230d      	movs	r3, #13
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80021b6:	2100      	movs	r1, #0
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff ff35 	bl	8002028 <send_cmd>
 80021be:	0003      	movs	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d000      	beq.n	80021c6 <disk_initialize+0x82>
 80021c4:	e0a5      	b.n	8002312 <disk_initialize+0x1ce>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 80021c6:	4b68      	ldr	r3, [pc, #416]	; (8002368 <disk_initialize+0x224>)
 80021c8:	22fa      	movs	r2, #250	; 0xfa
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80021ce:	23d5      	movs	r3, #213	; 0xd5
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	0019      	movs	r1, r3
 80021d4:	2008      	movs	r0, #8
 80021d6:	f7ff ff27 	bl	8002028 <send_cmd>
 80021da:	0003      	movs	r3, r0
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d162      	bne.n	80022a6 <disk_initialize+0x162>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e00f      	b.n	8002208 <disk_initialize+0xc4>
 80021e8:	250f      	movs	r5, #15
 80021ea:	197b      	adds	r3, r7, r5
 80021ec:	781c      	ldrb	r4, [r3, #0]
 80021ee:	20ff      	movs	r0, #255	; 0xff
 80021f0:	f7ff fdb2 	bl	8001d58 <xchg_spi>
 80021f4:	0003      	movs	r3, r0
 80021f6:	001a      	movs	r2, r3
 80021f8:	2308      	movs	r3, #8
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	551a      	strb	r2, [r3, r4]
 80021fe:	197b      	adds	r3, r7, r5
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	197b      	adds	r3, r7, r5
 8002204:	3201      	adds	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	230f      	movs	r3, #15
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d9ea      	bls.n	80021e8 <disk_initialize+0xa4>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002212:	2208      	movs	r2, #8
 8002214:	18bb      	adds	r3, r7, r2
 8002216:	789b      	ldrb	r3, [r3, #2]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d000      	beq.n	800221e <disk_initialize+0xda>
 800221c:	e079      	b.n	8002312 <disk_initialize+0x1ce>
 800221e:	18bb      	adds	r3, r7, r2
 8002220:	78db      	ldrb	r3, [r3, #3]
 8002222:	2baa      	cmp	r3, #170	; 0xaa
 8002224:	d000      	beq.n	8002228 <disk_initialize+0xe4>
 8002226:	e074      	b.n	8002312 <disk_initialize+0x1ce>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <disk_initialize+0x224>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <disk_initialize+0xfe>
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	05db      	lsls	r3, r3, #23
 8002236:	0019      	movs	r1, r3
 8002238:	20a9      	movs	r0, #169	; 0xa9
 800223a:	f7ff fef5 	bl	8002028 <send_cmd>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d1f3      	bne.n	800222a <disk_initialize+0xe6>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <disk_initialize+0x224>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d063      	beq.n	8002312 <disk_initialize+0x1ce>
 800224a:	2100      	movs	r1, #0
 800224c:	203a      	movs	r0, #58	; 0x3a
 800224e:	f7ff feeb 	bl	8002028 <send_cmd>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d15d      	bne.n	8002312 <disk_initialize+0x1ce>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002256:	230f      	movs	r3, #15
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e00f      	b.n	8002280 <disk_initialize+0x13c>
 8002260:	250f      	movs	r5, #15
 8002262:	197b      	adds	r3, r7, r5
 8002264:	781c      	ldrb	r4, [r3, #0]
 8002266:	20ff      	movs	r0, #255	; 0xff
 8002268:	f7ff fd76 	bl	8001d58 <xchg_spi>
 800226c:	0003      	movs	r3, r0
 800226e:	001a      	movs	r2, r3
 8002270:	2308      	movs	r3, #8
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	551a      	strb	r2, [r3, r4]
 8002276:	197b      	adds	r3, r7, r5
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	197b      	adds	r3, r7, r5
 800227c:	3201      	adds	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	230f      	movs	r3, #15
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d9ea      	bls.n	8002260 <disk_initialize+0x11c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800228a:	2308      	movs	r3, #8
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	001a      	movs	r2, r3
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	4013      	ands	r3, r2
 8002296:	d001      	beq.n	800229c <disk_initialize+0x158>
 8002298:	220c      	movs	r2, #12
 800229a:	e000      	b.n	800229e <disk_initialize+0x15a>
 800229c:	2204      	movs	r2, #4
 800229e:	230d      	movs	r3, #13
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e035      	b.n	8002312 <disk_initialize+0x1ce>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80022a6:	2100      	movs	r1, #0
 80022a8:	20a9      	movs	r0, #169	; 0xa9
 80022aa:	f7ff febd 	bl	8002028 <send_cmd>
 80022ae:	0003      	movs	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d808      	bhi.n	80022c6 <disk_initialize+0x182>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80022b4:	230d      	movs	r3, #13
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2202      	movs	r2, #2
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	230e      	movs	r3, #14
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	22a9      	movs	r2, #169	; 0xa9
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e007      	b.n	80022d6 <disk_initialize+0x192>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80022c6:	230d      	movs	r3, #13
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	230e      	movs	r3, #14
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <disk_initialize+0x224>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <disk_initialize+0x1ae>
 80022e0:	230e      	movs	r3, #14
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff fe9d 	bl	8002028 <send_cmd>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d1f2      	bne.n	80022d8 <disk_initialize+0x194>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <disk_initialize+0x224>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <disk_initialize+0x1c6>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	0019      	movs	r1, r3
 8002300:	2010      	movs	r0, #16
 8002302:	f7ff fe91 	bl	8002028 <send_cmd>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d003      	beq.n	8002312 <disk_initialize+0x1ce>
				ty = 0;
 800230a:	230d      	movs	r3, #13
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <disk_initialize+0x228>)
 8002314:	240d      	movs	r4, #13
 8002316:	193a      	adds	r2, r7, r4
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	701a      	strb	r2, [r3, #0]
	deselect();
 800231c:	f7ff fdec 	bl	8001ef8 <deselect>

	if (ty) {			/* OK */
 8002320:	193b      	adds	r3, r7, r4
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d011      	beq.n	800234c <disk_initialize+0x208>
		FCLK_FAST();			/* Set fast clock */
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <disk_initialize+0x220>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2238      	movs	r2, #56	; 0x38
 800232e:	4393      	bics	r3, r2
 8002330:	001a      	movs	r2, r3
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <disk_initialize+0x220>)
 8002334:	2120      	movs	r1, #32
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <disk_initialize+0x21c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2201      	movs	r2, #1
 8002342:	4393      	bics	r3, r2
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <disk_initialize+0x21c>)
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e002      	b.n	8002352 <disk_initialize+0x20e>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <disk_initialize+0x21c>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002352:	4b03      	ldr	r3, [pc, #12]	; (8002360 <disk_initialize+0x21c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	20000000 	.word	0x20000000
 8002364:	40013000 	.word	0x40013000
 8002368:	20000124 	.word	0x20000124
 800236c:	2000012c 	.word	0x2000012c

08002370 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	0002      	movs	r2, r0
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <disk_status+0x18>
 8002384:	2301      	movs	r3, #1
 8002386:	e002      	b.n	800238e <disk_status+0x1e>

	return Stat;	/* Return disk status */
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <disk_status+0x28>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	20000000 	.word	0x20000000

0800239c <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	210f      	movs	r1, #15
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	1c02      	adds	r2, r0, #0
 80023ae:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <disk_read+0x22>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <disk_read+0x26>
 80023be:	2304      	movs	r3, #4
 80023c0:	e04f      	b.n	8002462 <disk_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <disk_read+0xd0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	001a      	movs	r2, r3
 80023ca:	2301      	movs	r3, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d001      	beq.n	80023d4 <disk_read+0x38>
 80023d0:	2303      	movs	r3, #3
 80023d2:	e046      	b.n	8002462 <disk_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <disk_read+0xd4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	001a      	movs	r2, r3
 80023da:	2308      	movs	r3, #8
 80023dc:	4013      	ands	r3, r2
 80023de:	d102      	bne.n	80023e6 <disk_read+0x4a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d112      	bne.n	8002412 <disk_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0019      	movs	r1, r3
 80023f0:	2011      	movs	r0, #17
 80023f2:	f7ff fe19 	bl	8002028 <send_cmd>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d12d      	bne.n	8002456 <disk_read+0xba>
			&& rcvr_datablock(buff, 512))
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fda4 	bl	8001f50 <rcvr_datablock>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d024      	beq.n	8002456 <disk_read+0xba>
			count = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	e021      	b.n	8002456 <disk_read+0xba>
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0019      	movs	r1, r3
 8002416:	2012      	movs	r0, #18
 8002418:	f7ff fe06 	bl	8002028 <send_cmd>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d11a      	bne.n	8002456 <disk_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	0011      	movs	r1, r2
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff fd91 	bl	8001f50 <rcvr_datablock>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d00c      	beq.n	800244c <disk_read+0xb0>
				buff += 512;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4694      	mov	ip, r2
 800243a:	4463      	add	r3, ip
 800243c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3b01      	subs	r3, #1
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ea      	bne.n	8002420 <disk_read+0x84>
 800244a:	e000      	b.n	800244e <disk_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 800244c:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800244e:	2100      	movs	r1, #0
 8002450:	200c      	movs	r0, #12
 8002452:	f7ff fde9 	bl	8002028 <send_cmd>
		}
	}
	deselect();
 8002456:	f7ff fd4f 	bl	8001ef8 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	4193      	sbcs	r3, r2
 8002460:	b2db      	uxtb	r3, r3
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	20000000 	.word	0x20000000
 8002470:	2000012c 	.word	0x2000012c

08002474 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	210f      	movs	r1, #15
 8002482:	187b      	adds	r3, r7, r1
 8002484:	1c02      	adds	r2, r0, #0
 8002486:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002488:	187b      	adds	r3, r7, r1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <disk_write+0x22>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <disk_write+0x26>
 8002496:	2304      	movs	r3, #4
 8002498:	e063      	b.n	8002562 <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <disk_write+0xf8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	001a      	movs	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	d001      	beq.n	80024ac <disk_write+0x38>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e05a      	b.n	8002562 <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <disk_write+0xf8>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	001a      	movs	r2, r3
 80024b4:	2304      	movs	r3, #4
 80024b6:	4013      	ands	r3, r2
 80024b8:	d001      	beq.n	80024be <disk_write+0x4a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e051      	b.n	8002562 <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <disk_write+0xfc>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	001a      	movs	r2, r3
 80024c4:	2308      	movs	r3, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d102      	bne.n	80024d0 <disk_write+0x5c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	025b      	lsls	r3, r3, #9
 80024ce:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d110      	bne.n	80024f8 <disk_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0019      	movs	r1, r3
 80024da:	2018      	movs	r0, #24
 80024dc:	f7ff fda4 	bl	8002028 <send_cmd>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d138      	bne.n	8002556 <disk_write+0xe2>
			&& xmit_datablock(buff, 0xFE))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	21fe      	movs	r1, #254	; 0xfe
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff fd63 	bl	8001fb4 <xmit_datablock>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d031      	beq.n	8002556 <disk_write+0xe2>
			count = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	e02e      	b.n	8002556 <disk_write+0xe2>
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <disk_write+0xfc>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	001a      	movs	r2, r3
 80024fe:	2306      	movs	r3, #6
 8002500:	4013      	ands	r3, r2
 8002502:	d004      	beq.n	800250e <disk_write+0x9a>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	0019      	movs	r1, r3
 8002508:	2097      	movs	r0, #151	; 0x97
 800250a:	f7ff fd8d 	bl	8002028 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0019      	movs	r1, r3
 8002512:	2019      	movs	r0, #25
 8002514:	f7ff fd88 	bl	8002028 <send_cmd>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d11c      	bne.n	8002556 <disk_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	21fc      	movs	r1, #252	; 0xfc
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fd47 	bl	8001fb4 <xmit_datablock>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d00c      	beq.n	8002544 <disk_write+0xd0>
				buff += 512;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4694      	mov	ip, r2
 8002532:	4463      	add	r3, ip
 8002534:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	3b01      	subs	r3, #1
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ec      	bne.n	800251c <disk_write+0xa8>
 8002542:	e000      	b.n	8002546 <disk_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002544:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8002546:	21fd      	movs	r1, #253	; 0xfd
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff fd33 	bl	8001fb4 <xmit_datablock>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d101      	bne.n	8002556 <disk_write+0xe2>
				count = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	603b      	str	r3, [r7, #0]
		}
	}
	deselect();
 8002556:	f7ff fccf 	bl	8001ef8 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	4193      	sbcs	r3, r2
 8002560:	b2db      	uxtb	r3, r3
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	20000000 	.word	0x20000000
 8002570:	2000012c 	.word	0x2000012c

08002574 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08d      	sub	sp, #52	; 0x34
 8002578:	af00      	add	r7, sp, #0
 800257a:	603a      	str	r2, [r7, #0]
 800257c:	1dfb      	adds	r3, r7, #7
 800257e:	1c02      	adds	r2, r0, #0
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	1dbb      	adds	r3, r7, #6
 8002584:	1c0a      	adds	r2, r1, #0
 8002586:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <disk_ioctl+0x20>
 8002590:	2304      	movs	r3, #4
 8002592:	e178      	b.n	8002886 <disk_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002594:	4bbe      	ldr	r3, [pc, #760]	; (8002890 <disk_ioctl+0x31c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	001a      	movs	r2, r3
 800259c:	2301      	movs	r3, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	d001      	beq.n	80025a6 <disk_ioctl+0x32>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e16f      	b.n	8002886 <disk_ioctl+0x312>

	res = RES_ERROR;
 80025a6:	232f      	movs	r3, #47	; 0x2f
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80025ae:	1dbb      	adds	r3, r7, #6
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d100      	bne.n	80025b8 <disk_ioctl+0x44>
 80025b6:	e100      	b.n	80027ba <disk_ioctl+0x246>
 80025b8:	dd00      	ble.n	80025bc <disk_ioctl+0x48>
 80025ba:	e14d      	b.n	8002858 <disk_ioctl+0x2e4>
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d100      	bne.n	80025c2 <disk_ioctl+0x4e>
 80025c0:	e074      	b.n	80026ac <disk_ioctl+0x138>
 80025c2:	dd00      	ble.n	80025c6 <disk_ioctl+0x52>
 80025c4:	e148      	b.n	8002858 <disk_ioctl+0x2e4>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <disk_ioctl+0x5c>
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d00a      	beq.n	80025e4 <disk_ioctl+0x70>
 80025ce:	e143      	b.n	8002858 <disk_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (_select()) res = RES_OK;
 80025d0:	f7ff fca2 	bl	8001f18 <_select>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d100      	bne.n	80025da <disk_ioctl+0x66>
 80025d8:	e143      	b.n	8002862 <disk_ioctl+0x2ee>
 80025da:	232f      	movs	r3, #47	; 0x2f
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
		break;
 80025e2:	e13e      	b.n	8002862 <disk_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80025e4:	2100      	movs	r1, #0
 80025e6:	2009      	movs	r0, #9
 80025e8:	f7ff fd1e 	bl	8002028 <send_cmd>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d000      	beq.n	80025f2 <disk_ioctl+0x7e>
 80025f0:	e139      	b.n	8002866 <disk_ioctl+0x2f2>
 80025f2:	240c      	movs	r4, #12
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	2110      	movs	r1, #16
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fca9 	bl	8001f50 <rcvr_datablock>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d100      	bne.n	8002604 <disk_ioctl+0x90>
 8002602:	e130      	b.n	8002866 <disk_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002604:	0020      	movs	r0, r4
 8002606:	183b      	adds	r3, r7, r0
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d115      	bne.n	800263e <disk_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002612:	183b      	adds	r3, r7, r0
 8002614:	7a5b      	ldrb	r3, [r3, #9]
 8002616:	001a      	movs	r2, r3
 8002618:	183b      	adds	r3, r7, r0
 800261a:	7a1b      	ldrb	r3, [r3, #8]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	18d3      	adds	r3, r2, r3
 8002620:	0019      	movs	r1, r3
 8002622:	183b      	adds	r3, r7, r0
 8002624:	79db      	ldrb	r3, [r3, #7]
 8002626:	041a      	lsls	r2, r3, #16
 8002628:	23fc      	movs	r3, #252	; 0xfc
 800262a:	039b      	lsls	r3, r3, #14
 800262c:	4013      	ands	r3, r2
 800262e:	18cb      	adds	r3, r1, r3
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	029a      	lsls	r2, r3, #10
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e031      	b.n	80026a2 <disk_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800263e:	200c      	movs	r0, #12
 8002640:	183b      	adds	r3, r7, r0
 8002642:	795b      	ldrb	r3, [r3, #5]
 8002644:	220f      	movs	r2, #15
 8002646:	4013      	ands	r3, r2
 8002648:	b2da      	uxtb	r2, r3
 800264a:	183b      	adds	r3, r7, r0
 800264c:	7a9b      	ldrb	r3, [r3, #10]
 800264e:	09db      	lsrs	r3, r3, #7
 8002650:	b2db      	uxtb	r3, r3
 8002652:	18d3      	adds	r3, r2, r3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	183b      	adds	r3, r7, r0
 8002658:	7a5b      	ldrb	r3, [r3, #9]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2106      	movs	r1, #6
 8002660:	400b      	ands	r3, r1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	18d3      	adds	r3, r2, r3
 8002666:	b2da      	uxtb	r2, r3
 8002668:	242e      	movs	r4, #46	; 0x2e
 800266a:	193b      	adds	r3, r7, r4
 800266c:	3202      	adds	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002670:	183b      	adds	r3, r7, r0
 8002672:	7a1b      	ldrb	r3, [r3, #8]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	b2db      	uxtb	r3, r3
 8002678:	001a      	movs	r2, r3
 800267a:	183b      	adds	r3, r7, r0
 800267c:	79db      	ldrb	r3, [r3, #7]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	18d2      	adds	r2, r2, r3
 8002682:	183b      	adds	r3, r7, r0
 8002684:	799b      	ldrb	r3, [r3, #6]
 8002686:	0299      	lsls	r1, r3, #10
 8002688:	23c0      	movs	r3, #192	; 0xc0
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	400b      	ands	r3, r1
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002694:	193b      	adds	r3, r7, r4
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	3b09      	subs	r3, #9
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	409a      	lsls	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80026a2:	232f      	movs	r3, #47	; 0x2f
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80026aa:	e0dc      	b.n	8002866 <disk_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80026ac:	4b79      	ldr	r3, [pc, #484]	; (8002894 <disk_ioctl+0x320>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	001a      	movs	r2, r3
 80026b2:	2304      	movs	r3, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	d035      	beq.n	8002724 <disk_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80026b8:	2100      	movs	r1, #0
 80026ba:	208d      	movs	r0, #141	; 0x8d
 80026bc:	f7ff fcb4 	bl	8002028 <send_cmd>
 80026c0:	1e03      	subs	r3, r0, #0
 80026c2:	d000      	beq.n	80026c6 <disk_ioctl+0x152>
 80026c4:	e0d1      	b.n	800286a <disk_ioctl+0x2f6>
				xchg_spi(0xFF);
 80026c6:	20ff      	movs	r0, #255	; 0xff
 80026c8:	f7ff fb46 	bl	8001d58 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80026cc:	230c      	movs	r3, #12
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2110      	movs	r1, #16
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff fc3c 	bl	8001f50 <rcvr_datablock>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d100      	bne.n	80026de <disk_ioctl+0x16a>
 80026dc:	e0c5      	b.n	800286a <disk_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80026de:	232e      	movs	r3, #46	; 0x2e
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2230      	movs	r2, #48	; 0x30
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e008      	b.n	80026fa <disk_ioctl+0x186>
 80026e8:	20ff      	movs	r0, #255	; 0xff
 80026ea:	f7ff fb35 	bl	8001d58 <xchg_spi>
 80026ee:	212e      	movs	r1, #46	; 0x2e
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	232e      	movs	r3, #46	; 0x2e
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f1      	bne.n	80026e8 <disk_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002704:	230c      	movs	r3, #12
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	7a9b      	ldrb	r3, [r3, #10]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	b2db      	uxtb	r3, r3
 800270e:	001a      	movs	r2, r3
 8002710:	2310      	movs	r3, #16
 8002712:	4093      	lsls	r3, r2
 8002714:	001a      	movs	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800271a:	232f      	movs	r3, #47	; 0x2f
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002722:	e0a2      	b.n	800286a <disk_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002724:	2100      	movs	r1, #0
 8002726:	2009      	movs	r0, #9
 8002728:	f7ff fc7e 	bl	8002028 <send_cmd>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d000      	beq.n	8002732 <disk_ioctl+0x1be>
 8002730:	e09b      	b.n	800286a <disk_ioctl+0x2f6>
 8002732:	240c      	movs	r4, #12
 8002734:	193b      	adds	r3, r7, r4
 8002736:	2110      	movs	r1, #16
 8002738:	0018      	movs	r0, r3
 800273a:	f7ff fc09 	bl	8001f50 <rcvr_datablock>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d100      	bne.n	8002744 <disk_ioctl+0x1d0>
 8002742:	e092      	b.n	800286a <disk_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <disk_ioctl+0x320>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	001a      	movs	r2, r3
 800274a:	2302      	movs	r3, #2
 800274c:	4013      	ands	r3, r2
 800274e:	d016      	beq.n	800277e <disk_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002750:	0021      	movs	r1, r4
 8002752:	187b      	adds	r3, r7, r1
 8002754:	7a9b      	ldrb	r3, [r3, #10]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	227e      	movs	r2, #126	; 0x7e
 800275a:	4013      	ands	r3, r2
 800275c:	187a      	adds	r2, r7, r1
 800275e:	7ad2      	ldrb	r2, [r2, #11]
 8002760:	09d2      	lsrs	r2, r2, #7
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	189b      	adds	r3, r3, r2
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	187b      	adds	r3, r7, r1
 800276a:	7b5b      	ldrb	r3, [r3, #13]
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	409a      	lsls	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	001a      	movs	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e018      	b.n	80027b0 <disk_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800277e:	210c      	movs	r1, #12
 8002780:	187b      	adds	r3, r7, r1
 8002782:	7a9b      	ldrb	r3, [r3, #10]
 8002784:	109b      	asrs	r3, r3, #2
 8002786:	b29b      	uxth	r3, r3
 8002788:	001a      	movs	r2, r3
 800278a:	231f      	movs	r3, #31
 800278c:	4013      	ands	r3, r2
 800278e:	3301      	adds	r3, #1
 8002790:	0008      	movs	r0, r1
 8002792:	187a      	adds	r2, r7, r1
 8002794:	7ad2      	ldrb	r2, [r2, #11]
 8002796:	00d2      	lsls	r2, r2, #3
 8002798:	2118      	movs	r1, #24
 800279a:	400a      	ands	r2, r1
 800279c:	1839      	adds	r1, r7, r0
 800279e:	7ac9      	ldrb	r1, [r1, #11]
 80027a0:	0949      	lsrs	r1, r1, #5
 80027a2:	b2c9      	uxtb	r1, r1
 80027a4:	1852      	adds	r2, r2, r1
 80027a6:	3201      	adds	r2, #1
 80027a8:	4353      	muls	r3, r2
 80027aa:	001a      	movs	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80027b0:	232f      	movs	r3, #47	; 0x2f
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
		break;
 80027b8:	e057      	b.n	800286a <disk_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <disk_ioctl+0x320>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	001a      	movs	r2, r3
 80027c0:	2306      	movs	r3, #6
 80027c2:	4013      	ands	r3, r2
 80027c4:	d053      	beq.n	800286e <disk_ioctl+0x2fa>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80027c6:	240c      	movs	r4, #12
 80027c8:	193a      	adds	r2, r7, r4
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2133      	movs	r1, #51	; 0x33
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7ff fecf 	bl	8002574 <disk_ioctl>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d14b      	bne.n	8002872 <disk_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <disk_ioctl+0x27e>
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	7a9b      	ldrb	r3, [r3, #10]
 80027ea:	001a      	movs	r2, r3
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	4013      	ands	r3, r2
 80027f0:	d041      	beq.n	8002876 <disk_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <disk_ioctl+0x320>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	001a      	movs	r2, r3
 8002808:	2308      	movs	r3, #8
 800280a:	4013      	ands	r3, r2
 800280c:	d105      	bne.n	800281a <disk_ioctl+0x2a6>
			st *= 512; ed *= 512;
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	025b      	lsls	r3, r3, #9
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	0019      	movs	r1, r3
 800281e:	2020      	movs	r0, #32
 8002820:	f7ff fc02 	bl	8002028 <send_cmd>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d128      	bne.n	800287a <disk_ioctl+0x306>
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	0019      	movs	r1, r3
 800282c:	2021      	movs	r0, #33	; 0x21
 800282e:	f7ff fbfb 	bl	8002028 <send_cmd>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d121      	bne.n	800287a <disk_ioctl+0x306>
 8002836:	2100      	movs	r1, #0
 8002838:	2026      	movs	r0, #38	; 0x26
 800283a:	f7ff fbf5 	bl	8002028 <send_cmd>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d11b      	bne.n	800287a <disk_ioctl+0x306>
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <disk_ioctl+0x324>)
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff fb33 	bl	8001eb0 <wait_ready>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d015      	beq.n	800287a <disk_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 800284e:	232f      	movs	r3, #47	; 0x2f
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
		break;
 8002856:	e010      	b.n	800287a <disk_ioctl+0x306>

	default:
		res = RES_PARERR;
 8002858:	232f      	movs	r3, #47	; 0x2f
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2204      	movs	r2, #4
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e00c      	b.n	800287c <disk_ioctl+0x308>
		break;
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	e00a      	b.n	800287c <disk_ioctl+0x308>
		break;
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	e008      	b.n	800287c <disk_ioctl+0x308>
		break;
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	e006      	b.n	800287c <disk_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	e004      	b.n	800287c <disk_ioctl+0x308>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	e002      	b.n	800287c <disk_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	e000      	b.n	800287c <disk_ioctl+0x308>
		break;
 800287a:	46c0      	nop			; (mov r8, r8)
	}

	deselect();
 800287c:	f7ff fb3c 	bl	8001ef8 <deselect>

	return res;
 8002880:	232f      	movs	r3, #47	; 0x2f
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b00d      	add	sp, #52	; 0x34
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	20000000 	.word	0x20000000
 8002894:	2000012c 	.word	0x2000012c
 8002898:	00007530 	.word	0x00007530

0800289c <EPD_Init>:

#include <stdlib.h>
#include "epd1in54.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  epd->reset_pin = RST_PIN;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
  epd->dc_pin = DC_PIN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	605a      	str	r2, [r3, #4]
  epd->cs_pin = CS_PIN;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  epd->busy_pin = BUSY_PIN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2203      	movs	r2, #3
 80028bc:	60da      	str	r2, [r3, #12]
  epd->width = EPD_WIDTH;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	22c8      	movs	r2, #200	; 0xc8
 80028c2:	611a      	str	r2, [r3, #16]
  epd->height = EPD_HEIGHT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	22c8      	movs	r2, #200	; 0xc8
 80028c8:	615a      	str	r2, [r3, #20]
  /* this calls the peripheral hardware interface, see epdif */
  if (EpdInitCallback() != 0) {
 80028ca:	f000 fabd 	bl	8002e48 <EpdInitCallback>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d002      	beq.n	80028d8 <EPD_Init+0x3c>
    return -1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	425b      	negs	r3, r3
 80028d6:	e05e      	b.n	8002996 <EPD_Init+0xfa>
  }
  epd->lut = lut;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	619a      	str	r2, [r3, #24]
  /* EPD hardware init start */
  EPD_Reset(epd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 f8ce 	bl	8002a82 <EPD_Reset>
  EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2101      	movs	r1, #1
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f882 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, (EPD_HEIGHT - 1) & 0xFF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	21c7      	movs	r1, #199	; 0xc7
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 f894 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, ((EPD_HEIGHT - 1) >> 8) & 0xFF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2100      	movs	r1, #0
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f88f 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, 0x00);                     // GD = 0; SM = 0; TB = 0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2100      	movs	r1, #0
 8002908:	0018      	movs	r0, r3
 800290a:	f000 f88a 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, BOOSTER_SOFT_START_CONTROL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	210c      	movs	r1, #12
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f86e 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, 0xD7);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	21d7      	movs	r1, #215	; 0xd7
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f880 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, 0xD6);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	21d6      	movs	r1, #214	; 0xd6
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f87b 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, 0x9D);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	219d      	movs	r1, #157	; 0x9d
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f876 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, WRITE_VCOM_REGISTER);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f85a 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, 0xA8);                     // VCOM 7C
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	21a8      	movs	r1, #168	; 0xa8
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f86c 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, SET_DUMMY_LINE_PERIOD);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	213a      	movs	r1, #58	; 0x3a
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f850 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, 0x1A);                     // 4 dummy lines per gate
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	211a      	movs	r1, #26
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f862 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, SET_GATE_TIME);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	213b      	movs	r1, #59	; 0x3b
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f846 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, 0x08);                     // 2us per line
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2108      	movs	r1, #8
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f858 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2111      	movs	r1, #17
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f83c 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, 0x03);                     // X increment; Y increment
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2103      	movs	r1, #3
 8002980:	0018      	movs	r0, r3
 8002982:	f000 f84e 	bl	8002a22 <EPD_SendData>
  EPD_SetLut(epd, epd->lut);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0011      	movs	r1, r2
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f942 	bl	8002c18 <EPD_SetLut>
  /* EPD hardware init end */
  return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}

0800299e <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f9c9 	bl	8002d48 <EpdDigitalWriteCallback>
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}

080029be <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f9ea 	bl	8002da4 <EpdDigitalReadCallback>
 80029d0:	0003      	movs	r3, r0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}

080029da <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f9fa 	bl	8002de0 <EpdDelayMsCallback>
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	000a      	movs	r2, r1
 80029fe:	1cfb      	adds	r3, r7, #3
 8002a00:	701a      	strb	r2, [r3, #0]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff ffc7 	bl	800299e <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 8002a10:	1cfb      	adds	r3, r7, #3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f9ef 	bl	8002df8 <EpdSpiTransferCallback>
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b002      	add	sp, #8
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	000a      	movs	r2, r1
 8002a2c:	1cfb      	adds	r3, r7, #3
 8002a2e:	701a      	strb	r2, [r3, #0]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ffb0 	bl	800299e <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 8002a3e:	1cfb      	adds	r3, r7, #3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 f9d8 	bl	8002df8 <EpdSpiTransferCallback>
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes LOW
 */
void EPD_WaitUntilIdle(EPD* epd) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 8002a58:	e004      	b.n	8002a64 <EPD_WaitUntilIdle+0x14>
    EPD_DelayMs(epd, 100);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2164      	movs	r1, #100	; 0x64
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ffbb 	bl	80029da <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ffa6 	bl	80029be <EPD_DigitalRead>
 8002a72:	0003      	movs	r3, r0
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d0f0      	beq.n	8002a5a <EPD_WaitUntilIdle+0xa>
  }      
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /*HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
  HAL_Delay(200);
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
  HAL_Delay(200);*/
	EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	0018      	movs	r0, r3
 8002a94:	f7ff ff83 	bl	800299e <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	21c8      	movs	r1, #200	; 0xc8
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff ff9c 	bl	80029da <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff ff77 	bl	800299e <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	21c8      	movs	r1, #200	; 0xc8
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff ff90 	bl	80029da <EPD_DelayMs>
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <EPD_SetFrameMemory>:
  const unsigned char* image_buffer,
  int x,
  int y,
  int image_width,
  int image_height
) {
 8002ac2:	b590      	push	{r4, r7, lr}
 8002ac4:	b08b      	sub	sp, #44	; 0x2c
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
  int x_end;
  int y_end;

  if (
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d100      	bne.n	8002ad8 <EPD_SetFrameMemory+0x16>
 8002ad6:	e07f      	b.n	8002bd8 <EPD_SetFrameMemory+0x116>
    image_buffer == NULL ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da00      	bge.n	8002ae0 <EPD_SetFrameMemory+0x1e>
 8002ade:	e07b      	b.n	8002bd8 <EPD_SetFrameMemory+0x116>
    x < 0 || image_width < 0 ||
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da00      	bge.n	8002ae8 <EPD_SetFrameMemory+0x26>
 8002ae6:	e077      	b.n	8002bd8 <EPD_SetFrameMemory+0x116>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da00      	bge.n	8002af0 <EPD_SetFrameMemory+0x2e>
 8002aee:	e073      	b.n	8002bd8 <EPD_SetFrameMemory+0x116>
    y < 0 || image_height < 0
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da00      	bge.n	8002af8 <EPD_SetFrameMemory+0x36>
 8002af6:	e06f      	b.n	8002bd8 <EPD_SetFrameMemory+0x116>
  ) {
    return;
  }
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  x &= 0xF8;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	22f8      	movs	r2, #248	; 0xf8
 8002afc:	4013      	ands	r3, r2
 8002afe:	607b      	str	r3, [r7, #4]
  image_width &= 0xF8;
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	22f8      	movs	r2, #248	; 0xf8
 8002b04:	4013      	ands	r3, r2
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
  if (x + image_width >= epd->width) {
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	18d2      	adds	r2, r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	db04      	blt.n	8002b20 <EPD_SetFrameMemory+0x5e>
    x_end = epd->width - 1;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e004      	b.n	8002b2a <EPD_SetFrameMemory+0x68>
  } else {
    x_end = x + image_width - 1;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	18d3      	adds	r3, r2, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
  }
  if (y + image_height >= epd->height) {
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2e:	18d2      	adds	r2, r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	db04      	blt.n	8002b42 <EPD_SetFrameMemory+0x80>
    y_end = epd->height - 1;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e004      	b.n	8002b4c <EPD_SetFrameMemory+0x8a>
  } else {
    y_end = y + image_height - 1;
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b46:	18d3      	adds	r3, r2, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
  }
  EPD_SetMemoryArea(epd, x, y, x_end, y_end);
 8002b4c:	69fc      	ldr	r4, [r7, #28]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	0023      	movs	r3, r4
 8002b5a:	f000 f882 	bl	8002c62 <EPD_SetMemoryArea>
  EPD_SetMemoryPointer(epd, x, y);
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 f8bf 	bl	8002ce8 <EPD_SetMemoryPointer>
  EPD_SendCommand(epd, WRITE_RAM);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2124      	movs	r1, #36	; 0x24
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7ff ff40 	bl	80029f4 <EPD_SendCommand>
  /* send the image data */
  for (int j = 0; j < y_end - y + 1; j++) {
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e027      	b.n	8002bca <EPD_SetFrameMemory+0x108>
    for (int i = 0; i < (x_end - x + 1) / 8; i++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e015      	b.n	8002bac <EPD_SetFrameMemory+0xea>
      EPD_SendData(epd, image_buffer[i + j * (image_width / 8)]);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	da00      	bge.n	8002b88 <EPD_SetFrameMemory+0xc6>
 8002b86:	3307      	adds	r3, #7
 8002b88:	10db      	asrs	r3, r3, #3
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	435a      	muls	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	001a      	movs	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff ff3e 	bl	8002a22 <EPD_SendData>
    for (int i = 0; i < (x_end - x + 1) / 8; i++) {
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da00      	bge.n	8002bba <EPD_SetFrameMemory+0xf8>
 8002bb8:	3307      	adds	r3, #7
 8002bba:	10db      	asrs	r3, r3, #3
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	dbdd      	blt.n	8002b80 <EPD_SetFrameMemory+0xbe>
  for (int j = 0; j < y_end - y + 1; j++) {
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	ddd1      	ble.n	8002b7a <EPD_SetFrameMemory+0xb8>
 8002bd6:	e000      	b.n	8002bda <EPD_SetFrameMemory+0x118>
    return;
 8002bd8:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b009      	add	sp, #36	; 0x24
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <EPD_DisplayFrame>:
*          there are 2 memory areas embedded in the e-paper display
*          but once this function is called,
*          the the next action of SetFrameMemory or ClearFrame will 
*          set the other memory area.
*/
void EPD_DisplayFrame(EPD* epd) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2122      	movs	r1, #34	; 0x22
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff ff01 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, 0xC4);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	21c4      	movs	r1, #196	; 0xc4
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff ff13 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, MASTER_ACTIVATION);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2120      	movs	r1, #32
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff fef7 	bl	80029f4 <EPD_SendCommand>
  EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	21ff      	movs	r1, #255	; 0xff
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7ff fef2 	bl	80029f4 <EPD_SendCommand>
  //EPD_WaitUntilIdle(epd);
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <EPD_SetLut>:
}

/**
 *  @brief: set the look-up tables
 */
static void EPD_SetLut(EPD* epd, const unsigned char* lut) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  epd->lut = lut;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	619a      	str	r2, [r3, #24]
  EPD_SendCommand(epd, WRITE_LUT_REGISTER);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2132      	movs	r1, #50	; 0x32
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff fee1 	bl	80029f4 <EPD_SendCommand>
  /* the length of look-up table is 30 bytes */
  for (int i = 0; i < 30; i++) {
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e00c      	b.n	8002c52 <EPD_SetLut+0x3a>
    EPD_SendData(epd, epd->lut[i]);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	18d3      	adds	r3, r2, r3
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0011      	movs	r1, r2
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7ff feeb 	bl	8002a22 <EPD_SendData>
  for (int i = 0; i < 30; i++) {
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b1d      	cmp	r3, #29
 8002c56:	ddef      	ble.n	8002c38 <EPD_SetLut+0x20>
  } 
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <EPD_SetMemoryArea>:

/**
 *  @brief: private function to specify the memory area for data R/W
 */
static void EPD_SetMemoryArea(EPD* epd, int x_start, int y_start, int x_end, int y_end) {
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
  EPD_SendCommand(epd, SET_RAM_X_ADDRESS_START_END_POSITION);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2144      	movs	r1, #68	; 0x44
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff febd 	bl	80029f4 <EPD_SendCommand>
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  EPD_SendData(epd, (x_start >> 3) & 0xFF);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	10db      	asrs	r3, r3, #3
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fecc 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, (x_end >> 3) & 0xFF);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff fec4 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_START_END_POSITION);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2145      	movs	r1, #69	; 0x45
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff fea8 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, y_start & 0xFF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff feb8 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, (y_start >> 8) & 0xFF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	121b      	asrs	r3, r3, #8
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	0011      	movs	r1, r2
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff feb0 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, y_end & 0xFF);
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	0011      	movs	r1, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fea9 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, (y_end >> 8) & 0xFF);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	121b      	asrs	r3, r3, #8
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff fea1 	bl	8002a22 <EPD_SendData>
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <EPD_SetMemoryPointer>:

/**
 *  @brief: private function to specify the start point for data R/W
 */
static void EPD_SetMemoryPointer(EPD* epd, int x, int y) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  EPD_SendCommand(epd, SET_RAM_X_ADDRESS_COUNTER);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	214e      	movs	r1, #78	; 0x4e
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff fe7b 	bl	80029f4 <EPD_SendCommand>
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  EPD_SendData(epd, (x >> 3) & 0xFF);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	10db      	asrs	r3, r3, #3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7ff fe8a 	bl	8002a22 <EPD_SendData>
  EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_COUNTER);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	214f      	movs	r1, #79	; 0x4f
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff fe6e 	bl	80029f4 <EPD_SendCommand>
  EPD_SendData(epd, y & 0xFF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fe7e 	bl	8002a22 <EPD_SendData>
  EPD_SendData(epd, (y >> 8) & 0xFF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	121b      	asrs	r3, r3, #8
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	0011      	movs	r1, r2
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fe76 	bl	8002a22 <EPD_SendData>
  EPD_WaitUntilIdle(epd);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff fe89 	bl	8002a50 <EPD_WaitUntilIdle>
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <EpdDigitalWriteCallback>:
  BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10f      	bne.n	8002d78 <EpdDigitalWriteCallback+0x30>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <EpdDigitalWriteCallback+0x58>)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	00d2      	lsls	r2, r2, #3
 8002d5e:	58d0      	ldr	r0, [r2, r3]
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <EpdDigitalWriteCallback+0x58>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	18d3      	adds	r3, r2, r3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2201      	movs	r2, #1
 8002d70:	0019      	movs	r1, r3
 8002d72:	f004 ff9e 	bl	8007cb2 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8002d76:	e00e      	b.n	8002d96 <EpdDigitalWriteCallback+0x4e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <EpdDigitalWriteCallback+0x58>)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	58d0      	ldr	r0, [r2, r3]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <EpdDigitalWriteCallback+0x58>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	18d3      	adds	r3, r2, r3
 8002d88:	3304      	adds	r3, #4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2200      	movs	r2, #0
 8002d90:	0019      	movs	r1, r3
 8002d92:	f004 ff8e 	bl	8007cb2 <HAL_GPIO_WritePin>
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000180 	.word	0x20000180

08002da4 <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <EpdDigitalReadCallback+0x38>)
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	00d2      	lsls	r2, r2, #3
 8002db2:	58d0      	ldr	r0, [r2, r3]
 8002db4:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <EpdDigitalReadCallback+0x38>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	18d3      	adds	r3, r2, r3
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	f004 ff58 	bl	8007c78 <HAL_GPIO_ReadPin>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <EpdDigitalReadCallback+0x2e>
    return HIGH;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 8002dd2:	2300      	movs	r3, #0
  }
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000180 	.word	0x20000180

08002de0 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f004 fb52 	bl	8007494 <HAL_Delay>
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	0002      	movs	r2, r0
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <EpdSpiTransferCallback+0x48>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <EpdSpiTransferCallback+0x48>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2200      	movs	r2, #0
 8002e10:	0019      	movs	r1, r3
 8002e12:	f004 ff4e 	bl	8007cb2 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8002e16:	23fa      	movs	r3, #250	; 0xfa
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	1df9      	adds	r1, r7, #7
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <EpdSpiTransferCallback+0x4c>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f006 fbdc 	bl	80095dc <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <EpdSpiTransferCallback+0x48>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <EpdSpiTransferCallback+0x48>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2201      	movs	r2, #1
 8002e30:	0019      	movs	r1, r3
 8002e32:	f004 ff3e 	bl	8007cb2 <HAL_GPIO_WritePin>
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	20000180 	.word	0x20000180
 8002e44:	200008e8 	.word	0x200008e8

08002e48 <EpdInitCallback>:

int EpdInitCallback(void) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <EpdInitCallback+0x34>)
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <EpdInitCallback+0x38>)
 8002e50:	ca03      	ldmia	r2!, {r0, r1}
 8002e52:	c303      	stmia	r3!, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <EpdInitCallback+0x34>)
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <EpdInitCallback+0x3c>)
 8002e58:	3308      	adds	r3, #8
 8002e5a:	ca03      	ldmia	r2!, {r0, r1}
 8002e5c:	c303      	stmia	r3!, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <EpdInitCallback+0x34>)
 8002e60:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <EpdInitCallback+0x40>)
 8002e62:	3310      	adds	r3, #16
 8002e64:	ca03      	ldmia	r2!, {r0, r1}
 8002e66:	c303      	stmia	r3!, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <EpdInitCallback+0x34>)
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <EpdInitCallback+0x44>)
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	ca03      	ldmia	r2!, {r0, r1}
 8002e70:	c303      	stmia	r3!, {r0, r1}
  
  return 0;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	20000180 	.word	0x20000180
 8002e80:	20000004 	.word	0x20000004
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	20000014 	.word	0x20000014
 8002e8c:	2000001c 	.word	0x2000001c

08002e90 <Paint_Init>:
 */

#include "epdpaint.h"


void Paint_Init(Paint* paint, unsigned char* image, int width, int height) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
    paint->rotate = ROTATE_0;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
    paint->image = image;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	601a      	str	r2, [r3, #0]
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2207      	movs	r2, #7
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <Paint_Init+0x3e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <Paint_Init+0x54>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	d504      	bpl.n	8002eca <Paint_Init+0x3a>
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	2108      	movs	r1, #8
 8002ec4:	4249      	negs	r1, r1
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	3301      	adds	r3, #1
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	e000      	b.n	8002ed0 <Paint_Init+0x40>
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	605a      	str	r2, [r3, #4]
    paint->height = height;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	80000007 	.word	0x80000007

08002ee8 <Paint_Clear>:

/**
 *  @brief: clear the image
 */
void Paint_Clear(Paint* paint, int colored) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    for (int x = 0; x < paint->width; x++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e013      	b.n	8002f20 <Paint_Clear+0x38>
        for (int y = 0; y < paint->height; y++) {
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	e008      	b.n	8002f10 <Paint_Clear+0x28>
            Paint_DrawAbsolutePixel(paint, x, y, colored);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f815 	bl	8002f34 <Paint_DrawAbsolutePixel>
        for (int y = 0; y < paint->height; y++) {
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dbf1      	blt.n	8002efe <Paint_Clear+0x16>
    for (int x = 0; x < paint->width; x++) {
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	dbe6      	blt.n	8002ef8 <Paint_Clear+0x10>
        }
    }
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <Paint_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint_DrawAbsolutePixel(Paint* paint, int x, int y, int colored) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
    if (x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db5f      	blt.n	8003008 <Paint_DrawAbsolutePixel+0xd4>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	da5a      	bge.n	8003008 <Paint_DrawAbsolutePixel+0xd4>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db57      	blt.n	8003008 <Paint_DrawAbsolutePixel+0xd4>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	da52      	bge.n	8003008 <Paint_DrawAbsolutePixel+0xd4>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d026      	beq.n	8002fb6 <Paint_DrawAbsolutePixel+0x82>
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4359      	muls	r1, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	18cb      	adds	r3, r1, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da00      	bge.n	8002f7e <Paint_DrawAbsolutePixel+0x4a>
 8002f7c:	3307      	adds	r3, #7
 8002f7e:	10db      	asrs	r3, r3, #3
 8002f80:	0018      	movs	r0, r3
 8002f82:	0003      	movs	r3, r0
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b25a      	sxtb	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4920      	ldr	r1, [pc, #128]	; (8003010 <Paint_DrawAbsolutePixel+0xdc>)
 8002f8e:	400b      	ands	r3, r1
 8002f90:	d504      	bpl.n	8002f9c <Paint_DrawAbsolutePixel+0x68>
 8002f92:	3b01      	subs	r3, #1
 8002f94:	2108      	movs	r1, #8
 8002f96:	4249      	negs	r1, r1
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	410b      	asrs	r3, r1
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b25a      	sxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0001      	movs	r1, r0
 8002fae:	185b      	adds	r3, r3, r1
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e029      	b.n	800300a <Paint_DrawAbsolutePixel+0xd6>
        } else {
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4359      	muls	r1, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	18cb      	adds	r3, r1, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da00      	bge.n	8002fcc <Paint_DrawAbsolutePixel+0x98>
 8002fca:	3307      	adds	r3, #7
 8002fcc:	10db      	asrs	r3, r3, #3
 8002fce:	0018      	movs	r0, r3
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b25a      	sxtb	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	490d      	ldr	r1, [pc, #52]	; (8003010 <Paint_DrawAbsolutePixel+0xdc>)
 8002fdc:	400b      	ands	r3, r1
 8002fde:	d504      	bpl.n	8002fea <Paint_DrawAbsolutePixel+0xb6>
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	4249      	negs	r1, r1
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	3301      	adds	r3, #1
 8002fea:	0019      	movs	r1, r3
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	410b      	asrs	r3, r1
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b25a      	sxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0001      	movs	r1, r0
 8003000:	185b      	adds	r3, r3, r1
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e000      	b.n	800300a <Paint_DrawAbsolutePixel+0xd6>
        return;
 8003008:	46c0      	nop			; (mov r8, r8)
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}
 8003010:	80000007 	.word	0x80000007

08003014 <Paint_CheckAbsolutePixel>:

uint8_t Paint_CheckAbsolutePixel(Paint* paint, int x, int y)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
	if ((paint->image[(x + ((y) * paint->width)) / 8]) & (0x80 >> ((x) % 8)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4359      	muls	r1, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	18cb      	adds	r3, r1, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	da00      	bge.n	8003036 <Paint_CheckAbsolutePixel+0x22>
 8003034:	3307      	adds	r3, #7
 8003036:	10db      	asrs	r3, r3, #3
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	0019      	movs	r1, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <Paint_CheckAbsolutePixel+0x54>)
 8003042:	4013      	ands	r3, r2
 8003044:	d504      	bpl.n	8003050 <Paint_CheckAbsolutePixel+0x3c>
 8003046:	3b01      	subs	r3, #1
 8003048:	2208      	movs	r2, #8
 800304a:	4252      	negs	r2, r2
 800304c:	4313      	orrs	r3, r2
 800304e:	3301      	adds	r3, #1
 8003050:	001a      	movs	r2, r3
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	4113      	asrs	r3, r2
 8003056:	400b      	ands	r3, r1
 8003058:	d001      	beq.n	800305e <Paint_CheckAbsolutePixel+0x4a>
		return 1;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <Paint_CheckAbsolutePixel+0x4c>
	else
		return 0;
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}
 8003068:	80000007 	.word	0x80000007

0800306c <Paint_GetWidth>:
 */
unsigned char* Paint_GetImage(Paint* paint) {
    return paint->image;
}

int Paint_GetWidth(Paint* paint) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    return paint->width;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <Paint_GetHeight>:

void Paint_SetWidth(Paint* paint, int width) {
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint_GetHeight(Paint* paint) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
    return paint->height;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <Paint_DrawPixel>:
}

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint_DrawPixel(Paint* paint, int x, int y, int colored) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11a      	bne.n	80030e0 <Paint_DrawPixel+0x4c>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Paint_DrawPixel+0x1e>
 80030b0:	e084      	b.n	80031bc <Paint_DrawPixel+0x128>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	db00      	blt.n	80030be <Paint_DrawPixel+0x2a>
 80030bc:	e07e      	b.n	80031bc <Paint_DrawPixel+0x128>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da00      	bge.n	80030c6 <Paint_DrawPixel+0x32>
 80030c4:	e07a      	b.n	80031bc <Paint_DrawPixel+0x128>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	db00      	blt.n	80030d2 <Paint_DrawPixel+0x3e>
 80030d0:	e074      	b.n	80031bc <Paint_DrawPixel+0x128>
            return;
        }
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff ff2b 	bl	8002f34 <Paint_DrawAbsolutePixel>
 80030de:	e074      	b.n	80031ca <Paint_DrawPixel+0x136>
    } else if (paint->rotate == ROTATE_90) {
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d120      	bne.n	800312a <Paint_DrawPixel+0x96>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da00      	bge.n	80030f0 <Paint_DrawPixel+0x5c>
 80030ee:	e067      	b.n	80031c0 <Paint_DrawPixel+0x12c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	da62      	bge.n	80031c0 <Paint_DrawPixel+0x12c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db5f      	blt.n	80031c0 <Paint_DrawPixel+0x12c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	da5a      	bge.n	80031c0 <Paint_DrawPixel+0x12c>
          return;
        }
        point_temp = x;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff06 	bl	8002f34 <Paint_DrawAbsolutePixel>
 8003128:	e04f      	b.n	80031ca <Paint_DrawPixel+0x136>
    } else if (paint->rotate == ROTATE_180) {
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d120      	bne.n	8003174 <Paint_DrawPixel+0xe0>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db45      	blt.n	80031c4 <Paint_DrawPixel+0x130>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	da40      	bge.n	80031c4 <Paint_DrawPixel+0x130>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db3d      	blt.n	80031c4 <Paint_DrawPixel+0x130>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	da38      	bge.n	80031c4 <Paint_DrawPixel+0x130>
          return;
        }
        x = paint->width - x;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fee1 	bl	8002f34 <Paint_DrawAbsolutePixel>
 8003172:	e02a      	b.n	80031ca <Paint_DrawPixel+0x136>
    } else if (paint->rotate == ROTATE_270) {
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d126      	bne.n	80031ca <Paint_DrawPixel+0x136>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db22      	blt.n	80031c8 <Paint_DrawPixel+0x134>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	da1d      	bge.n	80031c8 <Paint_DrawPixel+0x134>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db1a      	blt.n	80031c8 <Paint_DrawPixel+0x134>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	da15      	bge.n	80031c8 <Paint_DrawPixel+0x134>
          return;
        }
        point_temp = x;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	617b      	str	r3, [r7, #20]
        x = y;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff febd 	bl	8002f34 <Paint_DrawAbsolutePixel>
 80031ba:	e006      	b.n	80031ca <Paint_DrawPixel+0x136>
            return;
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	e004      	b.n	80031ca <Paint_DrawPixel+0x136>
          return;
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	e002      	b.n	80031ca <Paint_DrawPixel+0x136>
          return;
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	e000      	b.n	80031ca <Paint_DrawPixel+0x136>
          return;
 80031c8:	46c0      	nop			; (mov r8, r8)
    }
}
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b006      	add	sp, #24
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <Paint_CheckPixel>:

uint8_t Paint_CheckPixel(Paint* paint, int x, int y)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <Paint_CheckPixel+0x24>
        return Paint_CheckAbsolutePixel(paint, x, y);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff12 	bl	8003014 <Paint_CheckAbsolutePixel>
 80031f0:	0003      	movs	r3, r0
 80031f2:	e03f      	b.n	8003274 <Paint_CheckPixel+0xa4>
    } else if (paint->rotate == ROTATE_90) {
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d110      	bne.n	800321e <Paint_CheckPixel+0x4e>
        point_temp = x;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	607b      	str	r3, [r7, #4]
        return Paint_CheckAbsolutePixel(paint, x, y);
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fefd 	bl	8003014 <Paint_CheckAbsolutePixel>
 800321a:	0003      	movs	r3, r0
 800321c:	e02a      	b.n	8003274 <Paint_CheckPixel+0xa4>
    } else if (paint->rotate == ROTATE_180) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d111      	bne.n	800324a <Paint_CheckPixel+0x7a>
        x = paint->width - x;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	607b      	str	r3, [r7, #4]
        return Paint_CheckAbsolutePixel(paint, x, y);
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff fee7 	bl	8003014 <Paint_CheckAbsolutePixel>
 8003246:	0003      	movs	r3, r0
 8003248:	e014      	b.n	8003274 <Paint_CheckPixel+0xa4>
    } else if (paint->rotate == ROTATE_270) {
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d110      	bne.n	8003274 <Paint_CheckPixel+0xa4>
        point_temp = x;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	617b      	str	r3, [r7, #20]
        x = y;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	607b      	str	r3, [r7, #4]
        return Paint_CheckAbsolutePixel(paint, x, y);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff fed2 	bl	8003014 <Paint_CheckAbsolutePixel>
 8003270:	0003      	movs	r3, r0
 8003272:	e7ff      	b.n	8003274 <Paint_CheckPixel+0xa4>
    }
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b006      	add	sp, #24
 800327a:	bd80      	pop	{r7, pc}

0800327c <Paint_DrawCharAt>:


/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint_DrawCharAt(Paint* paint, int x, int y, char ascii_char, sFONT* font, int colored) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	001a      	movs	r2, r3
 800328a:	1cfb      	adds	r3, r7, #3
 800328c:	701a      	strb	r2, [r3, #0]
    int i, j;
    unsigned char a,b,c;
    int temp_x, temp_y;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 800328e:	1cfb      	adds	r3, r7, #3
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	3b20      	subs	r3, #32
 8003294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003296:	88d2      	ldrh	r2, [r2, #6]
 8003298:	4353      	muls	r3, r2
 800329a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329c:	8892      	ldrh	r2, [r2, #4]
 800329e:	08d2      	lsrs	r2, r2, #3
 80032a0:	b292      	uxth	r2, r2
 80032a2:	0010      	movs	r0, r2
 80032a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a6:	8892      	ldrh	r2, [r2, #4]
 80032a8:	2107      	movs	r1, #7
 80032aa:	400a      	ands	r2, r1
 80032ac:	b292      	uxth	r2, r2
 80032ae:	1e51      	subs	r1, r2, #1
 80032b0:	418a      	sbcs	r2, r1
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	1882      	adds	r2, r0, r2
 80032b6:	4353      	muls	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	18d3      	adds	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e058      	b.n	800337c <Paint_DrawCharAt+0x100>
        for (i = 0; i < font->Width; i++) {
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e042      	b.n	8003356 <Paint_DrawCharAt+0xda>
            if (*ptr & (0x80 >> (i % 8))) {
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	0019      	movs	r1, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <Paint_DrawCharAt+0x118>)
 80032da:	4013      	ands	r3, r2
 80032dc:	d504      	bpl.n	80032e8 <Paint_DrawCharAt+0x6c>
 80032de:	3b01      	subs	r3, #1
 80032e0:	2208      	movs	r2, #8
 80032e2:	4252      	negs	r2, r2
 80032e4:	4313      	orrs	r3, r2
 80032e6:	3301      	adds	r3, #1
 80032e8:	001a      	movs	r2, r3
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	4113      	asrs	r3, r2
 80032ee:	400b      	ands	r3, r1
 80032f0:	d020      	beq.n	8003334 <Paint_DrawCharAt+0xb8>
            	temp_y = paint->height - (x+1);
            	a = paint->image[(temp_x + ((temp_y) * paint->width)) / 8];
            	b = (0x80 >> ((temp_x) % 8));
            	c = a & b;
            	if (c)*/
            	if (Paint_CheckPixel(paint, x + i, y + j))
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	18d1      	adds	r1, r2, r3
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	18d2      	adds	r2, r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff ff65 	bl	80031d0 <Paint_CheckPixel>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d00a      	beq.n	8003320 <Paint_DrawCharAt+0xa4>
            		Paint_DrawPixel(paint, x + i, y + j, 0);
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	18d1      	adds	r1, r2, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	18d2      	adds	r2, r2, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	2300      	movs	r3, #0
 800331a:	f7ff febb 	bl	8003094 <Paint_DrawPixel>
 800331e:	e009      	b.n	8003334 <Paint_DrawCharAt+0xb8>
            	else
            		Paint_DrawPixel(paint, x + i, y + j, 1);
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	18d1      	adds	r1, r2, r3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	18d2      	adds	r2, r2, r3
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	2301      	movs	r3, #1
 8003330:	f7ff feb0 	bl	8003094 <Paint_DrawPixel>
            	/*******/
            }
            if (i % 8 == 7) {
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <Paint_DrawCharAt+0x118>)
 8003338:	4013      	ands	r3, r2
 800333a:	d504      	bpl.n	8003346 <Paint_DrawCharAt+0xca>
 800333c:	3b01      	subs	r3, #1
 800333e:	2208      	movs	r2, #8
 8003340:	4252      	negs	r2, r2
 8003342:	4313      	orrs	r3, r2
 8003344:	3301      	adds	r3, #1
 8003346:	2b07      	cmp	r3, #7
 8003348:	d102      	bne.n	8003350 <Paint_DrawCharAt+0xd4>
                ptr++;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	889b      	ldrh	r3, [r3, #4]
 800335a:	001a      	movs	r2, r3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4293      	cmp	r3, r2
 8003360:	dbb6      	blt.n	80032d0 <Paint_DrawCharAt+0x54>
            }
        }
        if (font->Width % 8 != 0) {
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	889b      	ldrh	r3, [r3, #4]
 8003366:	2207      	movs	r2, #7
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <Paint_DrawCharAt+0xfa>
            ptr++;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	3301      	adds	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	3301      	adds	r3, #1
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	88db      	ldrh	r3, [r3, #6]
 8003380:	001a      	movs	r2, r3
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4293      	cmp	r3, r2
 8003386:	dba0      	blt.n	80032ca <Paint_DrawCharAt+0x4e>
        }
    }
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b008      	add	sp, #32
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	80000007 	.word	0x80000007

08003398 <Paint_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint_DrawStringAt(Paint* paint, int x, int y, const char* text, sFONT* font, int colored) {
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b08b      	sub	sp, #44	; 0x2c
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
    const char* p_text = text;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	617b      	str	r3, [r7, #20]
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 80033b2:	e017      	b.n	80033e4 <Paint_DrawStringAt+0x4c>
        /* Display one character on EPD */
        Paint_DrawCharAt(paint, refcolumn, y, *p_text, font, colored);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	781c      	ldrb	r4, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	0023      	movs	r3, r4
 80033c8:	f7ff ff58 	bl	800327c <Paint_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	889b      	ldrh	r3, [r3, #4]
 80033d0:	001a      	movs	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3301      	adds	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
        counter++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3301      	adds	r3, #1
 80033e2:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e3      	bne.n	80033b4 <Paint_DrawStringAt+0x1c>
    }
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b009      	add	sp, #36	; 0x24
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <Paint_DrawHorizontalLine>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
    int i;
    for (i = x; i < x + line_width; i++) {
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e008      	b.n	800341c <Paint_DrawHorizontalLine+0x26>
        Paint_DrawPixel(paint, i, y, colored);
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fe3f 	bl	8003094 <Paint_DrawPixel>
    for (i = x; i < x + line_width; i++) {
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	dbf0      	blt.n	800340a <Paint_DrawHorizontalLine+0x14>
    }
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b006      	add	sp, #24
 8003430:	bd80      	pop	{r7, pc}

08003432 <Paint_ImageFromMemory>:
        }
    } while(x_pos <= 0);
}

void Paint_ImageFromMemory(Paint* paint, int8_t* image, int x, int y, int width, int height)
{
 8003432:	b590      	push	{r4, r7, lr}
 8003434:	b087      	sub	sp, #28
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
	uint16_t px, py;
	uint8_t x_bytes = width/8;
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	da00      	bge.n	8003448 <Paint_ImageFromMemory+0x16>
 8003446:	3307      	adds	r3, #7
 8003448:	10db      	asrs	r3, r3, #3
 800344a:	001a      	movs	r2, r3
 800344c:	2113      	movs	r1, #19
 800344e:	187b      	adds	r3, r7, r1
 8003450:	701a      	strb	r2, [r3, #0]
	if (width%8)
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	2207      	movs	r2, #7
 8003456:	4013      	ands	r3, r2
 8003458:	d004      	beq.n	8003464 <Paint_ImageFromMemory+0x32>
		x_bytes++;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	187b      	adds	r3, r7, r1
 8003460:	3201      	adds	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
	for (py=0; py<height; py++)
 8003464:	2314      	movs	r3, #20
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2200      	movs	r2, #0
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	e03e      	b.n	80034ec <Paint_ImageFromMemory+0xba>
	{
		for (px=0; px<width; px++)
 800346e:	2316      	movs	r3, #22
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	2200      	movs	r2, #0
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	e02d      	b.n	80034d4 <Paint_ImageFromMemory+0xa2>
		{
			if (image[(py*x_bytes)+(px/8)] & (0x80>>(px%8)))
 8003478:	2414      	movs	r4, #20
 800347a:	193b      	adds	r3, r7, r4
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	2213      	movs	r2, #19
 8003480:	18ba      	adds	r2, r7, r2
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	4353      	muls	r3, r2
 8003486:	2016      	movs	r0, #22
 8003488:	183a      	adds	r2, r7, r0
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	08d2      	lsrs	r2, r2, #3
 800348e:	b292      	uxth	r2, r2
 8003490:	189b      	adds	r3, r3, r2
 8003492:	001a      	movs	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	189b      	adds	r3, r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b25b      	sxtb	r3, r3
 800349c:	0019      	movs	r1, r3
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	2207      	movs	r2, #7
 80034a4:	4013      	ands	r3, r2
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	411a      	asrs	r2, r3
 80034aa:	0013      	movs	r3, r2
 80034ac:	400b      	ands	r3, r1
 80034ae:	d00b      	beq.n	80034c8 <Paint_ImageFromMemory+0x96>
			{
				Paint_DrawPixel(paint, x+px, y+py, 0);
 80034b0:	183b      	adds	r3, r7, r0
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	18d1      	adds	r1, r2, r3
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	18d2      	adds	r2, r2, r3
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	2300      	movs	r3, #0
 80034c4:	f7ff fde6 	bl	8003094 <Paint_DrawPixel>
		for (px=0; px<width; px++)
 80034c8:	2116      	movs	r1, #22
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	3201      	adds	r2, #1
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	2316      	movs	r3, #22
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034dc:	429a      	cmp	r2, r3
 80034de:	dccb      	bgt.n	8003478 <Paint_ImageFromMemory+0x46>
	for (py=0; py<height; py++)
 80034e0:	2114      	movs	r1, #20
 80034e2:	187b      	adds	r3, r7, r1
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	3201      	adds	r2, #1
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	2314      	movs	r3, #20
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dcba      	bgt.n	800346e <Paint_ImageFromMemory+0x3c>
			}
		}
	}

}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b007      	add	sp, #28
 8003500:	bd90      	pop	{r4, r7, pc}

08003502 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3301      	adds	r3, #1
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	210e      	movs	r1, #14
 8003512:	187b      	adds	r3, r7, r1
 8003514:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8003516:	187b      	adds	r3, r7, r1
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	b21a      	sxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b21b      	sxth	r3, r3
 8003524:	4313      	orrs	r3, r2
 8003526:	b21a      	sxth	r2, r3
 8003528:	187b      	adds	r3, r7, r1
 800352a:	801a      	strh	r2, [r3, #0]
	return rv;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	881b      	ldrh	r3, [r3, #0]
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}

08003538 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3303      	adds	r3, #3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	3202      	adds	r2, #2
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	3201      	adds	r2, #1
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003570:	68fb      	ldr	r3, [r7, #12]
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}

0800357a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	000a      	movs	r2, r1
 8003584:	1cbb      	adds	r3, r7, #2
 8003586:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	1cba      	adds	r2, r7, #2
 8003590:	8812      	ldrh	r2, [r2, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	1cba      	adds	r2, r7, #2
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	0a12      	lsrs	r2, r2, #8
 800359e:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	1cba      	adds	r2, r7, #2
 80035a8:	8812      	ldrh	r2, [r2, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}

0800360a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	1c53      	adds	r3, r2, #1
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1c59      	adds	r1, r3, #1
 800362e:	6179      	str	r1, [r7, #20]
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f1      	bne.n	8003624 <mem_cpy+0x1a>
	}
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	617a      	str	r2, [r7, #20]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f3      	bne.n	8003658 <mem_set+0x10>
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}

0800367a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800367a:	b580      	push	{r7, lr}
 800367c:	b088      	sub	sp, #32
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	61fa      	str	r2, [r7, #28]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	0019      	movs	r1, r3
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	61ba      	str	r2, [r7, #24]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	1acb      	subs	r3, r1, r3
 80036a6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <mem_cmp+0x40>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0eb      	beq.n	8003692 <mem_cmp+0x18>

	return r;
 80036ba:	697b      	ldr	r3, [r7, #20]
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b008      	add	sp, #32
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80036ce:	e002      	b.n	80036d6 <chk_chr+0x12>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3301      	adds	r3, #1
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <chk_chr+0x26>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	001a      	movs	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d1f2      	bne.n	80036d0 <chk_chr+0xc>
	return *str;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	781b      	ldrb	r3, [r3, #0]
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80036f6:	b590      	push	{r4, r7, lr}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80036fe:	240f      	movs	r4, #15
 8003700:	193b      	adds	r3, r7, r4
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	78db      	ldrb	r3, [r3, #3]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d034      	beq.n	8003778 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7858      	ldrb	r0, [r3, #1]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3330      	adds	r3, #48	; 0x30
 800371c:	0019      	movs	r1, r3
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	2301      	movs	r3, #1
 8003722:	f7fe fea7 	bl	8002474 <disk_write>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d003      	beq.n	8003732 <sync_window+0x3c>
			res = FR_DISK_ERR;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e022      	b.n	8003778 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	429a      	cmp	r2, r3
 8003746:	d217      	bcs.n	8003778 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	789b      	ldrb	r3, [r3, #2]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e010      	b.n	8003772 <sync_window+0x7c>
					wsect += fs->fsize;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7858      	ldrb	r0, [r3, #1]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3330      	adds	r3, #48	; 0x30
 8003762:	0019      	movs	r1, r3
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	2301      	movs	r3, #1
 8003768:	f7fe fe84 	bl	8002474 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3b01      	subs	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d8eb      	bhi.n	8003750 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8003778:	230f      	movs	r3, #15
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	781b      	ldrb	r3, [r3, #0]
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b007      	add	sp, #28
 8003784:	bd90      	pop	{r4, r7, pc}

08003786 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003786:	b5b0      	push	{r4, r5, r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003790:	250f      	movs	r5, #15
 8003792:	197b      	adds	r3, r7, r5
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d01f      	beq.n	80037e2 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80037a2:	197c      	adds	r4, r7, r5
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff ffa5 	bl	80036f6 <sync_window>
 80037ac:	0003      	movs	r3, r0
 80037ae:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80037b0:	002c      	movs	r4, r5
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7858      	ldrb	r0, [r3, #1]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3330      	adds	r3, #48	; 0x30
 80037c2:	0019      	movs	r1, r3
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	2301      	movs	r3, #1
 80037c8:	f7fe fde8 	bl	800239c <disk_read>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d005      	beq.n	80037dc <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80037d0:	2301      	movs	r3, #1
 80037d2:	425b      	negs	r3, r3
 80037d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80037d6:	193b      	adds	r3, r7, r4
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80037e2:	230f      	movs	r3, #15
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	781b      	ldrb	r3, [r3, #0]
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bdb0      	pop	{r4, r5, r7, pc}

080037f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80037f8:	250f      	movs	r5, #15
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f7ff ff79 	bl	80036f6 <sync_window>
 8003804:	0003      	movs	r3, r0
 8003806:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003808:	197b      	adds	r3, r7, r5
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d15d      	bne.n	80038cc <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d14c      	bne.n	80038b2 <sync_fs+0xc2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d148      	bne.n	80038b2 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3330      	adds	r3, #48	; 0x30
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	2100      	movs	r1, #0
 800382a:	0018      	movs	r0, r3
 800382c:	f7ff ff0c 	bl	8003648 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3330      	adds	r3, #48	; 0x30
 8003834:	33ff      	adds	r3, #255	; 0xff
 8003836:	33ff      	adds	r3, #255	; 0xff
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <sync_fs+0xec>)
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff fe9c 	bl	800357a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3330      	adds	r3, #48	; 0x30
 8003846:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <sync_fs+0xf0>)
 8003848:	0011      	movs	r1, r2
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff feb3 	bl	80035b6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3330      	adds	r3, #48	; 0x30
 8003854:	33e5      	adds	r3, #229	; 0xe5
 8003856:	33ff      	adds	r3, #255	; 0xff
 8003858:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <sync_fs+0xf4>)
 800385a:	0011      	movs	r1, r2
 800385c:	0018      	movs	r0, r3
 800385e:	f7ff feaa 	bl	80035b6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3330      	adds	r3, #48	; 0x30
 8003866:	33e9      	adds	r3, #233	; 0xe9
 8003868:	33ff      	adds	r3, #255	; 0xff
 800386a:	001a      	movs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	0019      	movs	r1, r3
 8003872:	0010      	movs	r0, r2
 8003874:	f7ff fe9f 	bl	80035b6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3330      	adds	r3, #48	; 0x30
 800387c:	33ed      	adds	r3, #237	; 0xed
 800387e:	33ff      	adds	r3, #255	; 0xff
 8003880:	001a      	movs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	0019      	movs	r1, r3
 8003888:	0010      	movs	r0, r2
 800388a:	f7ff fe94 	bl	80035b6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7858      	ldrb	r0, [r3, #1]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3330      	adds	r3, #48	; 0x30
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	2301      	movs	r3, #1
 80038a8:	f7fe fde4 	bl	8002474 <disk_write>
			fs->fsi_flag = 0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fe fe5a 	bl	8002574 <disk_ioctl>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d003      	beq.n	80038cc <sync_fs+0xdc>
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	0000aa55 	.word	0x0000aa55
 80038e0:	41615252 	.word	0x41615252
 80038e4:	61417272 	.word	0x61417272

080038e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3b02      	subs	r3, #2
 80038f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	3b02      	subs	r3, #2
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d301      	bcc.n	8003908 <clust2sect+0x20>
 8003904:	2300      	movs	r3, #0
 8003906:	e007      	b.n	8003918 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	895b      	ldrh	r3, [r3, #10]
 800390c:	001a      	movs	r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	435a      	muls	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	18d3      	adds	r3, r2, r3
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d904      	bls.n	8003940 <get_fat+0x20>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003940:	2301      	movs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e092      	b.n	8003a6c <get_fat+0x14c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003946:	2301      	movs	r3, #1
 8003948:	425b      	negs	r3, r3
 800394a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d064      	beq.n	8003a1e <get_fat+0xfe>
 8003954:	dd00      	ble.n	8003958 <get_fat+0x38>
 8003956:	e07f      	b.n	8003a58 <get_fat+0x138>
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <get_fat+0x42>
 800395c:	2b02      	cmp	r3, #2
 800395e:	d043      	beq.n	80039e8 <get_fat+0xc8>
 8003960:	e07a      	b.n	8003a58 <get_fat+0x138>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	18d3      	adds	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	18d2      	adds	r2, r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff ff01 	bl	8003786 <move_window>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d16a      	bne.n	8003a5e <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60fa      	str	r2, [r7, #12]
 800398e:	05db      	lsls	r3, r3, #23
 8003990:	0ddb      	lsrs	r3, r3, #23
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	2130      	movs	r1, #48	; 0x30
 8003996:	18d3      	adds	r3, r2, r3
 8003998:	185b      	adds	r3, r3, r1
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0a5b      	lsrs	r3, r3, #9
 80039a6:	18d2      	adds	r2, r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7ff feea 	bl	8003786 <move_window>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d155      	bne.n	8003a62 <get_fat+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	05db      	lsls	r3, r3, #23
 80039ba:	0ddb      	lsrs	r3, r3, #23
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	2130      	movs	r1, #48	; 0x30
 80039c0:	18d3      	adds	r3, r2, r3
 80039c2:	185b      	adds	r3, r3, r1
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	001a      	movs	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	4013      	ands	r3, r2
 80039d6:	d002      	beq.n	80039de <get_fat+0xbe>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	e002      	b.n	80039e4 <get_fat+0xc4>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	051b      	lsls	r3, r3, #20
 80039e2:	0d1b      	lsrs	r3, r3, #20
 80039e4:	617b      	str	r3, [r7, #20]
			break;
 80039e6:	e041      	b.n	8003a6c <get_fat+0x14c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	18d2      	adds	r2, r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	0011      	movs	r1, r2
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7ff fec5 	bl	8003786 <move_window>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d132      	bne.n	8003a66 <get_fat+0x146>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3330      	adds	r3, #48	; 0x30
 8003a04:	001a      	movs	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	0059      	lsls	r1, r3, #1
 8003a0a:	23ff      	movs	r3, #255	; 0xff
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	400b      	ands	r3, r1
 8003a10:	18d3      	adds	r3, r2, r3
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff fd75 	bl	8003502 <ld_word>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	617b      	str	r3, [r7, #20]
			break;
 8003a1c:	e026      	b.n	8003a6c <get_fat+0x14c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	09db      	lsrs	r3, r3, #7
 8003a26:	18d2      	adds	r2, r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff feaa 	bl	8003786 <move_window>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d119      	bne.n	8003a6a <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3330      	adds	r3, #48	; 0x30
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	0099      	lsls	r1, r3, #2
 8003a40:	23fe      	movs	r3, #254	; 0xfe
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	400b      	ands	r3, r1
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7ff fd75 	bl	8003538 <ld_dword>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	617b      	str	r3, [r7, #20]
			break;
 8003a56:	e009      	b.n	8003a6c <get_fat+0x14c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e006      	b.n	8003a6c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	e004      	b.n	8003a6c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	e002      	b.n	8003a6c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	e000      	b.n	8003a6c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a6a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8003a6c:	697b      	ldr	r3, [r7, #20]
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b006      	add	sp, #24
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003a76:	b5b0      	push	{r4, r5, r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003a82:	231f      	movs	r3, #31
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2202      	movs	r2, #2
 8003a88:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d800      	bhi.n	8003a92 <put_fat+0x1c>
 8003a90:	e0e4      	b.n	8003c5c <put_fat+0x1e6>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d300      	bcc.n	8003a9e <put_fat+0x28>
 8003a9c:	e0de      	b.n	8003c5c <put_fat+0x1e6>
		switch (fs->fs_type) {
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d100      	bne.n	8003aa8 <put_fat+0x32>
 8003aa6:	e0a1      	b.n	8003bec <put_fat+0x176>
 8003aa8:	dd00      	ble.n	8003aac <put_fat+0x36>
 8003aaa:	e0e0      	b.n	8003c6e <put_fat+0x1f8>
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d003      	beq.n	8003ab8 <put_fat+0x42>
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d100      	bne.n	8003ab6 <put_fat+0x40>
 8003ab4:	e075      	b.n	8003ba2 <put_fat+0x12c>
 8003ab6:	e0da      	b.n	8003c6e <put_fat+0x1f8>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	18d3      	adds	r3, r2, r3
 8003ac4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	0a5b      	lsrs	r3, r3, #9
 8003ace:	18d2      	adds	r2, r2, r3
 8003ad0:	251f      	movs	r5, #31
 8003ad2:	197c      	adds	r4, r7, r5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff fe54 	bl	8003786 <move_window>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003ae2:	197b      	adds	r3, r7, r5
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d000      	beq.n	8003aec <put_fat+0x76>
 8003aea:	e0b9      	b.n	8003c60 <put_fat+0x1ea>
			p = fs->win + bc++ % SS(fs);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3330      	adds	r3, #48	; 0x30
 8003af0:	001a      	movs	r2, r3
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1c59      	adds	r1, r3, #1
 8003af6:	61b9      	str	r1, [r7, #24]
 8003af8:	05db      	lsls	r3, r3, #23
 8003afa:	0ddb      	lsrs	r3, r3, #23
 8003afc:	18d3      	adds	r3, r2, r3
 8003afe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00d      	beq.n	8003b24 <put_fat+0xae>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	220f      	movs	r2, #15
 8003b10:	4013      	ands	r3, r2
 8003b12:	b25a      	sxtb	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e001      	b.n	8003b28 <put_fat+0xb2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	0a5b      	lsrs	r3, r3, #9
 8003b3a:	18d2      	adds	r2, r2, r3
 8003b3c:	251f      	movs	r5, #31
 8003b3e:	197c      	adds	r4, r7, r5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0011      	movs	r1, r2
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff fe1e 	bl	8003786 <move_window>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d000      	beq.n	8003b58 <put_fat+0xe2>
 8003b56:	e085      	b.n	8003c64 <put_fat+0x1ee>
			p = fs->win + bc % SS(fs);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3330      	adds	r3, #48	; 0x30
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	0ddb      	lsrs	r3, r3, #23
 8003b64:	18d3      	adds	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <put_fat+0x102>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e00e      	b.n	8003b96 <put_fat+0x120>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	220f      	movs	r2, #15
 8003b80:	4393      	bics	r3, r2
 8003b82:	b25a      	sxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	400b      	ands	r3, r1
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	4313      	orrs	r3, r2
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	70da      	strb	r2, [r3, #3]
			break;
 8003ba0:	e065      	b.n	8003c6e <put_fat+0x1f8>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1a      	ldr	r2, [r3, #32]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	18d2      	adds	r2, r2, r3
 8003bac:	251f      	movs	r5, #31
 8003bae:	197c      	adds	r4, r7, r5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff fde6 	bl	8003786 <move_window>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003bbe:	197b      	adds	r3, r7, r5
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d150      	bne.n	8003c68 <put_fat+0x1f2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3330      	adds	r3, #48	; 0x30
 8003bca:	001a      	movs	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	0059      	lsls	r1, r3, #1
 8003bd0:	23ff      	movs	r3, #255	; 0xff
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	400b      	ands	r3, r1
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff fccb 	bl	800357a <st_word>
			fs->wflag = 1;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	70da      	strb	r2, [r3, #3]
			break;
 8003bea:	e040      	b.n	8003c6e <put_fat+0x1f8>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	09db      	lsrs	r3, r3, #7
 8003bf4:	18d2      	adds	r2, r2, r3
 8003bf6:	251f      	movs	r5, #31
 8003bf8:	197c      	adds	r4, r7, r5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fdc1 	bl	8003786 <move_window>
 8003c04:	0003      	movs	r3, r0
 8003c06:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003c08:	197b      	adds	r3, r7, r5
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d12d      	bne.n	8003c6c <put_fat+0x1f6>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	091c      	lsrs	r4, r3, #4
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3330      	adds	r3, #48	; 0x30
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	23fe      	movs	r3, #254	; 0xfe
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	400b      	ands	r3, r1
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fc85 	bl	8003538 <ld_dword>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	0f1b      	lsrs	r3, r3, #28
 8003c32:	071b      	lsls	r3, r3, #28
 8003c34:	4323      	orrs	r3, r4
 8003c36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3330      	adds	r3, #48	; 0x30
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0099      	lsls	r1, r3, #2
 8003c42:	23fe      	movs	r3, #254	; 0xfe
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	400b      	ands	r3, r1
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7ff fcb1 	bl	80035b6 <st_dword>
			fs->wflag = 1;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	70da      	strb	r2, [r3, #3]
			break;
 8003c5a:	e008      	b.n	8003c6e <put_fat+0x1f8>
		}
	}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	e006      	b.n	8003c6e <put_fat+0x1f8>
			if (res != FR_OK) break;
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	e004      	b.n	8003c6e <put_fat+0x1f8>
			if (res != FR_OK) break;
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	e002      	b.n	8003c6e <put_fat+0x1f8>
			if (res != FR_OK) break;
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	e000      	b.n	8003c6e <put_fat+0x1f8>
			if (res != FR_OK) break;
 8003c6c:	46c0      	nop			; (mov r8, r8)
	return res;
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b008      	add	sp, #32
 8003c7a:	bdb0      	pop	{r4, r5, r7, pc}

08003c7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003c7c:	b5b0      	push	{r4, r5, r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003c88:	231f      	movs	r3, #31
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d904      	bls.n	8003ca6 <remove_chain+0x2a>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d301      	bcc.n	8003caa <remove_chain+0x2e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e057      	b.n	8003d5a <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003cb0:	251f      	movs	r5, #31
 8003cb2:	197c      	adds	r4, r7, r5
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	425a      	negs	r2, r3
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff feda 	bl	8003a76 <put_fat>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8003cc6:	197b      	adds	r3, r7, r5
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <remove_chain+0x58>
 8003cce:	197b      	adds	r3, r7, r5
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	e042      	b.n	8003d5a <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff fe20 	bl	8003920 <get_fat>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d035      	beq.n	8003d56 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <remove_chain+0x78>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e032      	b.n	8003d5a <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <remove_chain+0x82>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e02d      	b.n	8003d5a <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003cfe:	251f      	movs	r5, #31
 8003d00:	197c      	adds	r4, r7, r5
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2200      	movs	r2, #0
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff feb4 	bl	8003a76 <put_fat>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8003d12:	197b      	adds	r3, r7, r5
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <remove_chain+0xa4>
 8003d1a:	197b      	adds	r3, r7, r5
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	e01c      	b.n	8003d5a <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	3b02      	subs	r3, #2
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d20b      	bcs.n	8003d46 <remove_chain+0xca>
			fs->free_clst++;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	791b      	ldrb	r3, [r3, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3bf      	bcc.n	8003cd4 <remove_chain+0x58>
 8003d54:	e000      	b.n	8003d58 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8003d56:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b008      	add	sp, #32
 8003d60:	bdb0      	pop	{r4, r5, r7, pc}

08003d62 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003d62:	b5b0      	push	{r4, r5, r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <create_chain+0x2c>
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d31d      	bcc.n	8003dca <create_chain+0x68>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	e01a      	b.n	8003dca <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0011      	movs	r1, r2
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7ff fdc0 	bl	8003920 <get_fat>
 8003da0:	0003      	movs	r3, r0
 8003da2:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d801      	bhi.n	8003dae <create_chain+0x4c>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e07b      	b.n	8003ea6 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d101      	bne.n	8003db8 <create_chain+0x56>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	e076      	b.n	8003ea6 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d201      	bcs.n	8003dc6 <create_chain+0x64>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	e06f      	b.n	8003ea6 <create_chain+0x144>
		scl = clst;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d307      	bcc.n	8003dee <create_chain+0x8c>
				ncl = 2;
 8003dde:	2302      	movs	r3, #2
 8003de0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d901      	bls.n	8003dee <create_chain+0x8c>
 8003dea:	2300      	movs	r3, #0
 8003dec:	e05b      	b.n	8003ea6 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff fd93 	bl	8003920 <get_fat>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d002      	beq.n	8003e10 <create_chain+0xae>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <create_chain+0xb2>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	e048      	b.n	8003ea6 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1d8      	bne.n	8003dce <create_chain+0x6c>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e042      	b.n	8003ea6 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8003e20:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003e22:	2517      	movs	r5, #23
 8003e24:	197c      	adds	r4, r7, r5
 8003e26:	2301      	movs	r3, #1
 8003e28:	425a      	negs	r2, r3
 8003e2a:	69f9      	ldr	r1, [r7, #28]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff fe21 	bl	8003a76 <put_fat>
 8003e34:	0003      	movs	r3, r0
 8003e36:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8003e38:	197b      	adds	r3, r7, r5
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <create_chain+0xf6>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003e46:	197c      	adds	r4, r7, r5
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fe11 	bl	8003a76 <put_fat>
 8003e54:	0003      	movs	r3, r0
 8003e56:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003e58:	2317      	movs	r3, #23
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <create_chain+0x12e>
		fs->last_clst = ncl;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	3b02      	subs	r3, #2
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d804      	bhi.n	8003e80 <create_chain+0x11e>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	1e5a      	subs	r2, r3, #1
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	791b      	ldrb	r3, [r3, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	711a      	strb	r2, [r3, #4]
 8003e8e:	e009      	b.n	8003ea4 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003e90:	2317      	movs	r3, #23
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <create_chain+0x13e>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	e000      	b.n	8003ea2 <create_chain+0x140>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003ea4:	69fb      	ldr	r3, [r7, #28]
}
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b008      	add	sp, #32
 8003eac:	bdb0      	pop	{r4, r5, r7, pc}

08003eae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	039b      	lsls	r3, r3, #14
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d203      	bcs.n	8003ed0 <dir_sdi+0x22>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	221f      	movs	r2, #31
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d001      	beq.n	8003ed4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e066      	b.n	8003fa2 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <dir_sdi+0x46>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d902      	bls.n	8003ef4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	8912      	ldrh	r2, [r2, #8]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d301      	bcc.n	8003f0a <dir_sdi+0x5c>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e04b      	b.n	8003fa2 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	619a      	str	r2, [r3, #24]
 8003f12:	e02c      	b.n	8003f6e <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	895b      	ldrh	r3, [r3, #10]
 8003f18:	025b      	lsls	r3, r3, #9
 8003f1a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003f1c:	e01a      	b.n	8003f54 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff fcfb 	bl	8003920 <get_fat>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	d101      	bne.n	8003f38 <dir_sdi+0x8a>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e034      	b.n	8003fa2 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d904      	bls.n	8003f48 <dir_sdi+0x9a>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d301      	bcc.n	8003f4c <dir_sdi+0x9e>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e02a      	b.n	8003fa2 <dir_sdi+0xf4>
			ofs -= csz;
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d2e0      	bcs.n	8003f1e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7ff fcc0 	bl	80038e8 <clust2sect>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <dir_sdi+0xd2>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e010      	b.n	8003fa2 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	0a5b      	lsrs	r3, r3, #9
 8003f88:	18d2      	adds	r2, r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3330      	adds	r3, #48	; 0x30
 8003f92:	001a      	movs	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	05db      	lsls	r3, r3, #23
 8003f98:	0ddb      	lsrs	r3, r3, #23
 8003f9a:	18d2      	adds	r2, r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	3320      	adds	r3, #32
 8003fc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <dir_next+0x2a>
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	039b      	lsls	r3, r3, #14
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d301      	bcc.n	8003fd8 <dir_next+0x2e>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	e0ad      	b.n	8004134 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	05db      	lsls	r3, r3, #23
 8003fdc:	0ddb      	lsrs	r3, r3, #23
 8003fde:	d000      	beq.n	8003fe2 <dir_next+0x38>
 8003fe0:	e09b      	b.n	800411a <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	8912      	ldrh	r2, [r2, #8]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d200      	bcs.n	8004002 <dir_next+0x58>
 8004000:	e08b      	b.n	800411a <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
 8004008:	2304      	movs	r3, #4
 800400a:	e093      	b.n	8004134 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	0a5b      	lsrs	r3, r3, #9
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	8952      	ldrh	r2, [r2, #10]
 8004014:	3a01      	subs	r2, #1
 8004016:	4013      	ands	r3, r2
 8004018:	d000      	beq.n	800401c <dir_next+0x72>
 800401a:	e07e      	b.n	800411a <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	0019      	movs	r1, r3
 8004024:	0010      	movs	r0, r2
 8004026:	f7ff fc7b 	bl	8003920 <get_fat>
 800402a:	0003      	movs	r3, r0
 800402c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d801      	bhi.n	8004038 <dir_next+0x8e>
 8004034:	2302      	movs	r3, #2
 8004036:	e07d      	b.n	8004134 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3301      	adds	r3, #1
 800403c:	d101      	bne.n	8004042 <dir_next+0x98>
 800403e:	2301      	movs	r3, #1
 8004040:	e078      	b.n	8004134 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	d35a      	bcc.n	8004102 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
 8004058:	2304      	movs	r3, #4
 800405a:	e06b      	b.n	8004134 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f7ff fe7c 	bl	8003d62 <create_chain>
 800406a:	0003      	movs	r3, r0
 800406c:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <dir_next+0xce>
 8004074:	2307      	movs	r3, #7
 8004076:	e05d      	b.n	8004134 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <dir_next+0xd8>
 800407e:	2302      	movs	r3, #2
 8004080:	e058      	b.n	8004134 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3301      	adds	r3, #1
 8004086:	d101      	bne.n	800408c <dir_next+0xe2>
 8004088:	2301      	movs	r3, #1
 800408a:	e053      	b.n	8004134 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff fb31 	bl	80036f6 <sync_window>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <dir_next+0xf2>
 8004098:	2301      	movs	r3, #1
 800409a:	e04b      	b.n	8004134 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3330      	adds	r3, #48	; 0x30
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	2100      	movs	r1, #0
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7ff face 	bl	8003648 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fc16 	bl	80038e8 <clust2sect>
 80040bc:	0002      	movs	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80040c2:	e012      	b.n	80040ea <dir_next+0x140>
						fs->wflag = 1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fb12 	bl	80036f6 <sync_window>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <dir_next+0x130>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02c      	b.n	8004134 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	895b      	ldrh	r3, [r3, #10]
 80040ee:	001a      	movs	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d3e6      	bcc.n	80040c4 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad2      	subs	r2, r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f7ff fbea 	bl	80038e8 <clust2sect>
 8004114:	0002      	movs	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3330      	adds	r3, #48	; 0x30
 8004124:	001a      	movs	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	05db      	lsls	r3, r3, #23
 800412a:	0ddb      	lsrs	r3, r3, #23
 800412c:	18d2      	adds	r2, r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b006      	add	sp, #24
 800413a:	bd80      	pop	{r7, pc}

0800413c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800414c:	2517      	movs	r5, #23
 800414e:	197c      	adds	r4, r7, r5
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2100      	movs	r1, #0
 8004154:	0018      	movs	r0, r3
 8004156:	f7ff feaa 	bl	8003eae <dir_sdi>
 800415a:	0003      	movs	r3, r0
 800415c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800415e:	197b      	adds	r3, r7, r5
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d133      	bne.n	80041ce <dir_alloc+0x92>
		n = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	2517      	movs	r5, #23
 8004170:	197c      	adds	r4, r7, r5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff fb05 	bl	8003786 <move_window>
 800417c:	0003      	movs	r3, r0
 800417e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004180:	197b      	adds	r3, r7, r5
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d121      	bne.n	80041cc <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2be5      	cmp	r3, #229	; 0xe5
 8004190:	d004      	beq.n	800419c <dir_alloc+0x60>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	3301      	adds	r3, #1
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d102      	bne.n	80041b0 <dir_alloc+0x74>
 80041aa:	e010      	b.n	80041ce <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80041b0:	2517      	movs	r5, #23
 80041b2:	197c      	adds	r4, r7, r5
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2101      	movs	r1, #1
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff fef6 	bl	8003faa <dir_next>
 80041be:	0003      	movs	r3, r0
 80041c0:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80041c2:	197b      	adds	r3, r7, r5
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0cf      	beq.n	800416a <dir_alloc+0x2e>
 80041ca:	e000      	b.n	80041ce <dir_alloc+0x92>
			if (res != FR_OK) break;
 80041cc:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80041ce:	2217      	movs	r2, #23
 80041d0:	18bb      	adds	r3, r7, r2
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d102      	bne.n	80041de <dir_alloc+0xa2>
 80041d8:	18bb      	adds	r3, r7, r2
 80041da:	2207      	movs	r2, #7
 80041dc:	701a      	strb	r2, [r3, #0]
	return res;
 80041de:	2317      	movs	r3, #23
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bdb0      	pop	{r4, r5, r7, pc}

080041ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	331a      	adds	r3, #26
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7ff f981 	bl	8003502 <ld_word>
 8004200:	0003      	movs	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d109      	bne.n	8004220 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	0018      	movs	r0, r3
 8004212:	f7ff f976 	bl	8003502 <ld_word>
 8004216:	0003      	movs	r3, r0
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b004      	add	sp, #16
 8004228:	bd80      	pop	{r7, pc}

0800422a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	331a      	adds	r3, #26
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	b292      	uxth	r2, r2
 800423e:	0011      	movs	r1, r2
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff f99a 	bl	800357a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d109      	bne.n	8004262 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3314      	adds	r3, #20
 8004252:	001a      	movs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b29b      	uxth	r3, r3
 800425a:	0019      	movs	r1, r3
 800425c:	0010      	movs	r0, r2
 800425e:	f7ff f98c 	bl	800357a <st_word>
	}
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b004      	add	sp, #16
 8004268:	bd80      	pop	{r7, pc}

0800426a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800426a:	b5b0      	push	{r4, r5, r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004278:	2517      	movs	r5, #23
 800427a:	197c      	adds	r4, r7, r5
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2100      	movs	r1, #0
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff fe14 	bl	8003eae <dir_sdi>
 8004286:	0003      	movs	r3, r0
 8004288:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800428a:	197b      	adds	r3, r7, r5
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <dir_find+0x2e>
 8004292:	197b      	adds	r3, r7, r5
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	e04c      	b.n	8004332 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	2517      	movs	r5, #23
 800429e:	197c      	adds	r4, r7, r5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	0011      	movs	r1, r2
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff fa6e 	bl	8003786 <move_window>
 80042aa:	0003      	movs	r3, r0
 80042ac:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80042ae:	0029      	movs	r1, r5
 80042b0:	187b      	adds	r3, r7, r1
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d136      	bne.n	8004326 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	200f      	movs	r0, #15
 80042be:	183b      	adds	r3, r7, r0
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80042c4:	183b      	adds	r3, r7, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d103      	bne.n	80042d4 <dir_find+0x6a>
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	2204      	movs	r2, #4
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	e02b      	b.n	800432c <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	330b      	adds	r3, #11
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	223f      	movs	r2, #63	; 0x3f
 80042de:	4013      	ands	r3, r2
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	330b      	adds	r3, #11
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	001a      	movs	r2, r3
 80042f0:	2308      	movs	r3, #8
 80042f2:	4013      	ands	r3, r2
 80042f4:	d109      	bne.n	800430a <dir_find+0xa0>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69d8      	ldr	r0, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3320      	adds	r3, #32
 80042fe:	220b      	movs	r2, #11
 8004300:	0019      	movs	r1, r3
 8004302:	f7ff f9ba 	bl	800367a <mem_cmp>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d00f      	beq.n	800432a <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800430a:	2517      	movs	r5, #23
 800430c:	197c      	adds	r4, r7, r5
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2100      	movs	r1, #0
 8004312:	0018      	movs	r0, r3
 8004314:	f7ff fe49 	bl	8003faa <dir_next>
 8004318:	0003      	movs	r3, r0
 800431a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800431c:	197b      	adds	r3, r7, r5
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0b9      	beq.n	8004298 <dir_find+0x2e>
 8004324:	e002      	b.n	800432c <dir_find+0xc2>
		if (res != FR_OK) break;
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	e000      	b.n	800432c <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800432a:	46c0      	nop			; (mov r8, r8)

	return res;
 800432c:	2317      	movs	r3, #23
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	781b      	ldrb	r3, [r3, #0]
}
 8004332:	0018      	movs	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	b006      	add	sp, #24
 8004338:	bdb0      	pop	{r4, r5, r7, pc}

0800433a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800433a:	b5b0      	push	{r4, r5, r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004348:	250f      	movs	r5, #15
 800434a:	197c      	adds	r4, r7, r5
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2101      	movs	r1, #1
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fef3 	bl	800413c <dir_alloc>
 8004356:	0003      	movs	r3, r0
 8004358:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800435a:	197b      	adds	r3, r7, r5
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11f      	bne.n	80043a2 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	197c      	adds	r4, r7, r5
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	0011      	movs	r1, r2
 800436c:	0018      	movs	r0, r3
 800436e:	f7ff fa0a 	bl	8003786 <move_window>
 8004372:	0003      	movs	r3, r0
 8004374:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8004376:	197b      	adds	r3, r7, r5
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d111      	bne.n	80043a2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2220      	movs	r2, #32
 8004384:	2100      	movs	r1, #0
 8004386:	0018      	movs	r0, r3
 8004388:	f7ff f95e 	bl	8003648 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69d8      	ldr	r0, [r3, #28]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3320      	adds	r3, #32
 8004394:	220b      	movs	r2, #11
 8004396:	0019      	movs	r1, r3
 8004398:	f7ff f937 	bl	800360a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2201      	movs	r2, #1
 80043a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80043a2:	230f      	movs	r3, #15
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	781b      	ldrb	r3, [r3, #0]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b004      	add	sp, #16
 80043ae:	bdb0      	pop	{r4, r5, r7, pc}

080043b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3320      	adds	r3, #32
 80043c4:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	220b      	movs	r2, #11
 80043ca:	2120      	movs	r1, #32
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7ff f93b 	bl	8003648 <mem_set>
	si = i = 0; ni = 8;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	2308      	movs	r3, #8
 80043dc:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	61fa      	str	r2, [r7, #28]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	18d2      	adds	r2, r2, r3
 80043e8:	2127      	movs	r1, #39	; 0x27
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80043f0:	000a      	movs	r2, r1
 80043f2:	18bb      	adds	r3, r7, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d800      	bhi.n	80043fc <create_name+0x4c>
 80043fa:	e09c      	b.n	8004536 <create_name+0x186>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80043fc:	18bb      	adds	r3, r7, r2
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b2f      	cmp	r3, #47	; 0x2f
 8004402:	d007      	beq.n	8004414 <create_name+0x64>
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b5c      	cmp	r3, #92	; 0x5c
 800440a:	d110      	bne.n	800442e <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800440c:	e002      	b.n	8004414 <create_name+0x64>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3301      	adds	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b2f      	cmp	r3, #47	; 0x2f
 800441e:	d0f6      	beq.n	800440e <create_name+0x5e>
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b5c      	cmp	r3, #92	; 0x5c
 800442a:	d0f0      	beq.n	800440e <create_name+0x5e>
			break;
 800442c:	e084      	b.n	8004538 <create_name+0x188>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800442e:	2327      	movs	r3, #39	; 0x27
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b2e      	cmp	r3, #46	; 0x2e
 8004436:	d003      	beq.n	8004440 <create_name+0x90>
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	429a      	cmp	r2, r3
 800443e:	d30e      	bcc.n	800445e <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b0b      	cmp	r3, #11
 8004444:	d004      	beq.n	8004450 <create_name+0xa0>
 8004446:	2327      	movs	r3, #39	; 0x27
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b2e      	cmp	r3, #46	; 0x2e
 800444e:	d001      	beq.n	8004454 <create_name+0xa4>
 8004450:	2306      	movs	r3, #6
 8004452:	e08e      	b.n	8004572 <create_name+0x1c2>
			i = 8; ni = 11;				/* Goto extension */
 8004454:	2308      	movs	r3, #8
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	230b      	movs	r3, #11
 800445a:	623b      	str	r3, [r7, #32]
			continue;
 800445c:	e06a      	b.n	8004534 <create_name+0x184>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 800445e:	2227      	movs	r2, #39	; 0x27
 8004460:	18bb      	adds	r3, r7, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d903      	bls.n	8004470 <create_name+0xc0>
 8004468:	18bb      	adds	r3, r7, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b9f      	cmp	r3, #159	; 0x9f
 800446e:	d908      	bls.n	8004482 <create_name+0xd2>
 8004470:	2227      	movs	r2, #39	; 0x27
 8004472:	18bb      	adds	r3, r7, r2
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2bdf      	cmp	r3, #223	; 0xdf
 8004478:	d939      	bls.n	80044ee <create_name+0x13e>
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2bfc      	cmp	r3, #252	; 0xfc
 8004480:	d835      	bhi.n	80044ee <create_name+0x13e>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	61fa      	str	r2, [r7, #28]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	18d2      	adds	r2, r2, r3
 800448c:	210f      	movs	r1, #15
 800448e:	187b      	adds	r3, r7, r1
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8004494:	000a      	movs	r2, r1
 8004496:	18bb      	adds	r3, r7, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b3f      	cmp	r3, #63	; 0x3f
 800449c:	d903      	bls.n	80044a6 <create_name+0xf6>
 800449e:	18bb      	adds	r3, r7, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b7e      	cmp	r3, #126	; 0x7e
 80044a4:	d909      	bls.n	80044ba <create_name+0x10a>
 80044a6:	220f      	movs	r2, #15
 80044a8:	18bb      	adds	r3, r7, r2
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da08      	bge.n	80044c4 <create_name+0x114>
 80044b2:	18bb      	adds	r3, r7, r2
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2bfc      	cmp	r3, #252	; 0xfc
 80044b8:	d804      	bhi.n	80044c4 <create_name+0x114>
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	3b01      	subs	r3, #1
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d301      	bcc.n	80044c8 <create_name+0x118>
 80044c4:	2306      	movs	r3, #6
 80044c6:	e054      	b.n	8004572 <create_name+0x1c2>
			sfn[i++] = c;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	61ba      	str	r2, [r7, #24]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	18d3      	adds	r3, r2, r3
 80044d2:	2227      	movs	r2, #39	; 0x27
 80044d4:	18ba      	adds	r2, r7, r2
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	61ba      	str	r2, [r7, #24]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	18d3      	adds	r3, r2, r3
 80044e4:	220f      	movs	r2, #15
 80044e6:	18ba      	adds	r2, r7, r2
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e022      	b.n	8004534 <create_name+0x184>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80044ee:	2327      	movs	r3, #39	; 0x27
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <create_name+0x1cc>)
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7ff f8e3 	bl	80036c4 <chk_chr>
 80044fe:	1e03      	subs	r3, r0, #0
 8004500:	d001      	beq.n	8004506 <create_name+0x156>
 8004502:	2306      	movs	r3, #6
 8004504:	e035      	b.n	8004572 <create_name+0x1c2>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004506:	2227      	movs	r2, #39	; 0x27
 8004508:	18bb      	adds	r3, r7, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b60      	cmp	r3, #96	; 0x60
 800450e:	d908      	bls.n	8004522 <create_name+0x172>
 8004510:	18bb      	adds	r3, r7, r2
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b7a      	cmp	r3, #122	; 0x7a
 8004516:	d804      	bhi.n	8004522 <create_name+0x172>
 8004518:	18bb      	adds	r3, r7, r2
 800451a:	18ba      	adds	r2, r7, r2
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	3a20      	subs	r2, #32
 8004520:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	61ba      	str	r2, [r7, #24]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	2227      	movs	r2, #39	; 0x27
 800452e:	18ba      	adds	r2, r7, r2
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004534:	e753      	b.n	80043de <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004536:	46c0      	nop			; (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	18d2      	adds	r2, r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <create_name+0x19c>
 8004548:	2306      	movs	r3, #6
 800454a:	e012      	b.n	8004572 <create_name+0x1c2>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2be5      	cmp	r3, #229	; 0xe5
 8004552:	d102      	bne.n	800455a <create_name+0x1aa>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2205      	movs	r2, #5
 8004558:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800455a:	2327      	movs	r3, #39	; 0x27
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b20      	cmp	r3, #32
 8004562:	d801      	bhi.n	8004568 <create_name+0x1b8>
 8004564:	2204      	movs	r2, #4
 8004566:	e000      	b.n	800456a <create_name+0x1ba>
 8004568:	2200      	movs	r2, #0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	330b      	adds	r3, #11
 800456e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004570:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b00a      	add	sp, #40	; 0x28
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	0800bf38 	.word	0x0800bf38

08004580 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004594:	e002      	b.n	800459c <follow_path+0x1c>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b2f      	cmp	r3, #47	; 0x2f
 80045a2:	d0f8      	beq.n	8004596 <follow_path+0x16>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b5c      	cmp	r3, #92	; 0x5c
 80045aa:	d0f4      	beq.n	8004596 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b1f      	cmp	r3, #31
 80045b8:	d80d      	bhi.n	80045d6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	222b      	movs	r2, #43	; 0x2b
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80045c2:	2317      	movs	r3, #23
 80045c4:	18fc      	adds	r4, r7, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2100      	movs	r1, #0
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7ff fc6f 	bl	8003eae <dir_sdi>
 80045d0:	0003      	movs	r3, r0
 80045d2:	7023      	strb	r3, [r4, #0]
 80045d4:	e052      	b.n	800467c <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80045d6:	2517      	movs	r5, #23
 80045d8:	197c      	adds	r4, r7, r5
 80045da:	003a      	movs	r2, r7
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff fee5 	bl	80043b0 <create_name>
 80045e6:	0003      	movs	r3, r0
 80045e8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80045ea:	197b      	adds	r3, r7, r5
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d13f      	bne.n	8004672 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 80045f2:	197c      	adds	r4, r7, r5
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff fe37 	bl	800426a <dir_find>
 80045fc:	0003      	movs	r3, r0
 80045fe:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8004600:	200b      	movs	r0, #11
 8004602:	183b      	adds	r3, r7, r0
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	212b      	movs	r1, #43	; 0x2b
 8004608:	5c52      	ldrb	r2, [r2, r1]
 800460a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800460c:	197b      	adds	r3, r7, r5
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00c      	beq.n	800462e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004614:	197b      	adds	r3, r7, r5
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d12c      	bne.n	8004676 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800461c:	183b      	adds	r3, r7, r0
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2204      	movs	r2, #4
 8004622:	4013      	ands	r3, r2
 8004624:	d127      	bne.n	8004676 <follow_path+0xf6>
 8004626:	197b      	adds	r3, r7, r5
 8004628:	2205      	movs	r2, #5
 800462a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800462c:	e023      	b.n	8004676 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800462e:	230b      	movs	r3, #11
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2204      	movs	r2, #4
 8004636:	4013      	ands	r3, r2
 8004638:	d11f      	bne.n	800467a <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	799b      	ldrb	r3, [r3, #6]
 800463e:	001a      	movs	r2, r3
 8004640:	2310      	movs	r3, #16
 8004642:	4013      	ands	r3, r2
 8004644:	d104      	bne.n	8004650 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8004646:	2317      	movs	r3, #23
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2205      	movs	r2, #5
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e015      	b.n	800467c <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3330      	adds	r3, #48	; 0x30
 8004654:	001a      	movs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	05db      	lsls	r3, r3, #23
 800465c:	0ddb      	lsrs	r3, r3, #23
 800465e:	18d2      	adds	r2, r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	0011      	movs	r1, r2
 8004664:	0018      	movs	r0, r3
 8004666:	f7ff fdc1 	bl	80041ec <ld_clust>
 800466a:	0002      	movs	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004670:	e7b1      	b.n	80045d6 <follow_path+0x56>
			if (res != FR_OK) break;
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	e002      	b.n	800467c <follow_path+0xfc>
				break;
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	e000      	b.n	800467c <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800467a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800467c:	2317      	movs	r3, #23
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	781b      	ldrb	r3, [r3, #0]
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b006      	add	sp, #24
 8004688:	bdb0      	pop	{r4, r5, r7, pc}

0800468a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004692:	2301      	movs	r3, #1
 8004694:	425b      	negs	r3, r3
 8004696:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d031      	beq.n	8004704 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e002      	b.n	80046ae <get_ldnumber+0x24>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3301      	adds	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d903      	bls.n	80046be <get_ldnumber+0x34>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b3a      	cmp	r3, #58	; 0x3a
 80046bc:	d1f4      	bne.n	80046a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b3a      	cmp	r3, #58	; 0x3a
 80046c4:	d11c      	bne.n	8004700 <get_ldnumber+0x76>
			tp = *path;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	60fa      	str	r2, [r7, #12]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	3b30      	subs	r3, #48	; 0x30
 80046d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b09      	cmp	r3, #9
 80046dc:	d80e      	bhi.n	80046fc <get_ldnumber+0x72>
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d10a      	bne.n	80046fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d107      	bne.n	80046fc <get_ldnumber+0x72>
					vol = (int)i;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	e002      	b.n	8004706 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004704:	693b      	ldr	r3, [r7, #16]
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b006      	add	sp, #24
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	70da      	strb	r2, [r3, #3]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	4252      	negs	r2, r2
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff f829 	bl	8003786 <move_window>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <check_fs+0x2c>
 8004738:	2304      	movs	r3, #4
 800473a:	e037      	b.n	80047ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3330      	adds	r3, #48	; 0x30
 8004740:	33ff      	adds	r3, #255	; 0xff
 8004742:	33ff      	adds	r3, #255	; 0xff
 8004744:	0018      	movs	r0, r3
 8004746:	f7fe fedc 	bl	8003502 <ld_word>
 800474a:	0003      	movs	r3, r0
 800474c:	001a      	movs	r2, r3
 800474e:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <check_fs+0xa4>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <check_fs+0x48>
 8004754:	2303      	movs	r3, #3
 8004756:	e029      	b.n	80047ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2230      	movs	r2, #48	; 0x30
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	2be9      	cmp	r3, #233	; 0xe9
 8004760:	d009      	beq.n	8004776 <check_fs+0x66>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2230      	movs	r2, #48	; 0x30
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	2beb      	cmp	r3, #235	; 0xeb
 800476a:	d11e      	bne.n	80047aa <check_fs+0x9a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2232      	movs	r2, #50	; 0x32
 8004770:	5c9b      	ldrb	r3, [r3, r2]
 8004772:	2b90      	cmp	r3, #144	; 0x90
 8004774:	d119      	bne.n	80047aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3330      	adds	r3, #48	; 0x30
 800477a:	3336      	adds	r3, #54	; 0x36
 800477c:	0018      	movs	r0, r3
 800477e:	f7fe fedb 	bl	8003538 <ld_dword>
 8004782:	0003      	movs	r3, r0
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	4a0b      	ldr	r2, [pc, #44]	; (80047b8 <check_fs+0xa8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <check_fs+0x82>
 800478e:	2300      	movs	r3, #0
 8004790:	e00c      	b.n	80047ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3330      	adds	r3, #48	; 0x30
 8004796:	3352      	adds	r3, #82	; 0x52
 8004798:	0018      	movs	r0, r3
 800479a:	f7fe fecd 	bl	8003538 <ld_dword>
 800479e:	0003      	movs	r3, r0
 80047a0:	4a06      	ldr	r2, [pc, #24]	; (80047bc <check_fs+0xac>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <check_fs+0x9a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80047aa:	2302      	movs	r3, #2
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b002      	add	sp, #8
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0000aa55 	.word	0x0000aa55
 80047b8:	00544146 	.word	0x00544146
 80047bc:	33544146 	.word	0x33544146

080047c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80047c0:	b5b0      	push	{r4, r5, r7, lr}
 80047c2:	b096      	sub	sp, #88	; 0x58
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7ff ff57 	bl	800468a <get_ldnumber>
 80047dc:	0003      	movs	r3, r0
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da01      	bge.n	80047ea <find_volume+0x2a>
 80047e6:	230b      	movs	r3, #11
 80047e8:	e247      	b.n	8004c7a <find_volume+0x4ba>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80047ea:	4bcc      	ldr	r3, [pc, #816]	; (8004b1c <find_volume+0x35c>)
 80047ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ee:	0092      	lsls	r2, r2, #2
 80047f0:	58d3      	ldr	r3, [r2, r3]
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <find_volume+0x3e>
 80047fa:	230c      	movs	r3, #12
 80047fc:	e23d      	b.n	8004c7a <find_volume+0x4ba>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004802:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	1dfa      	adds	r2, r7, #7
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	2101      	movs	r1, #1
 800480c:	438a      	bics	r2, r1
 800480e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01b      	beq.n	8004850 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2537      	movs	r5, #55	; 0x37
 800481e:	197c      	adds	r4, r7, r5
 8004820:	0018      	movs	r0, r3
 8004822:	f7fd fda5 	bl	8002370 <disk_status>
 8004826:	0003      	movs	r3, r0
 8004828:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800482a:	0029      	movs	r1, r5
 800482c:	187b      	adds	r3, r7, r1
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2201      	movs	r2, #1
 8004832:	4013      	ands	r3, r2
 8004834:	d10c      	bne.n	8004850 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004836:	1dfb      	adds	r3, r7, #7
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <find_volume+0x8c>
 800483e:	187b      	adds	r3, r7, r1
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2204      	movs	r2, #4
 8004844:	4013      	ands	r3, r2
 8004846:	d001      	beq.n	800484c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8004848:	230a      	movs	r3, #10
 800484a:	e216      	b.n	8004c7a <find_volume+0x4ba>
			}
			return FR_OK;				/* The file system object is valid */
 800484c:	2300      	movs	r3, #0
 800484e:	e214      	b.n	8004c7a <find_volume+0x4ba>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004858:	b2da      	uxtb	r2, r3
 800485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	2537      	movs	r5, #55	; 0x37
 8004864:	197c      	adds	r4, r7, r5
 8004866:	0018      	movs	r0, r3
 8004868:	f7fd fc6c 	bl	8002144 <disk_initialize>
 800486c:	0003      	movs	r3, r0
 800486e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004870:	197b      	adds	r3, r7, r5
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	4013      	ands	r3, r2
 8004878:	d001      	beq.n	800487e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800487a:	2303      	movs	r3, #3
 800487c:	e1fd      	b.n	8004c7a <find_volume+0x4ba>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800487e:	1dfb      	adds	r3, r7, #7
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <find_volume+0xd6>
 8004886:	2337      	movs	r3, #55	; 0x37
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2204      	movs	r2, #4
 800488e:	4013      	ands	r3, r2
 8004890:	d001      	beq.n	8004896 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8004892:	230a      	movs	r3, #10
 8004894:	e1f1      	b.n	8004c7a <find_volume+0x4ba>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800489a:	2557      	movs	r5, #87	; 0x57
 800489c:	197c      	adds	r4, r7, r5
 800489e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	0011      	movs	r1, r2
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff ff33 	bl	8004710 <check_fs>
 80048aa:	0003      	movs	r3, r0
 80048ac:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80048ae:	197b      	adds	r3, r7, r5
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d14b      	bne.n	800494e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048b6:	2300      	movs	r3, #0
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ba:	e01d      	b.n	80048f8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	3330      	adds	r3, #48	; 0x30
 80048c0:	001a      	movs	r2, r3
 80048c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	33bf      	adds	r3, #191	; 0xbf
 80048c8:	33ff      	adds	r3, #255	; 0xff
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	3304      	adds	r3, #4
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d006      	beq.n	80048e6 <find_volume+0x126>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	3308      	adds	r3, #8
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fe fe2b 	bl	8003538 <ld_dword>
 80048e2:	0003      	movs	r3, r0
 80048e4:	e000      	b.n	80048e8 <find_volume+0x128>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2214      	movs	r2, #20
 80048ea:	18ba      	adds	r2, r7, r2
 80048ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ee:	0089      	lsls	r1, r1, #2
 80048f0:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f4:	3301      	adds	r3, #1
 80048f6:	643b      	str	r3, [r7, #64]	; 0x40
 80048f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d9de      	bls.n	80048bc <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80048fe:	2300      	movs	r3, #0
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <find_volume+0x14e>
 8004908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490a:	3b01      	subs	r3, #1
 800490c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800490e:	2314      	movs	r3, #20
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004914:	0092      	lsls	r2, r2, #2
 8004916:	58d3      	ldr	r3, [r2, r3]
 8004918:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800491a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <find_volume+0x172>
 8004920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	0011      	movs	r1, r2
 8004926:	0018      	movs	r0, r3
 8004928:	f7ff fef2 	bl	8004710 <check_fs>
 800492c:	0003      	movs	r3, r0
 800492e:	001a      	movs	r2, r3
 8004930:	e000      	b.n	8004934 <find_volume+0x174>
 8004932:	2203      	movs	r2, #3
 8004934:	2157      	movs	r1, #87	; 0x57
 8004936:	187b      	adds	r3, r7, r1
 8004938:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800493a:	187b      	adds	r3, r7, r1
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d905      	bls.n	800494e <find_volume+0x18e>
 8004942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004944:	3301      	adds	r3, #1
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
 8004948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494a:	2b03      	cmp	r3, #3
 800494c:	d9df      	bls.n	800490e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800494e:	2357      	movs	r3, #87	; 0x57
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d101      	bne.n	800495c <find_volume+0x19c>
 8004958:	2301      	movs	r3, #1
 800495a:	e18e      	b.n	8004c7a <find_volume+0x4ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800495c:	2357      	movs	r3, #87	; 0x57
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d901      	bls.n	800496a <find_volume+0x1aa>
 8004966:	230d      	movs	r3, #13
 8004968:	e187      	b.n	8004c7a <find_volume+0x4ba>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	3330      	adds	r3, #48	; 0x30
 800496e:	330b      	adds	r3, #11
 8004970:	0018      	movs	r0, r3
 8004972:	f7fe fdc6 	bl	8003502 <ld_word>
 8004976:	0003      	movs	r3, r0
 8004978:	001a      	movs	r2, r3
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	429a      	cmp	r2, r3
 8004980:	d001      	beq.n	8004986 <find_volume+0x1c6>
 8004982:	230d      	movs	r3, #13
 8004984:	e179      	b.n	8004c7a <find_volume+0x4ba>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	3330      	adds	r3, #48	; 0x30
 800498a:	3316      	adds	r3, #22
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe fdb8 	bl	8003502 <ld_word>
 8004992:	0003      	movs	r3, r0
 8004994:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d107      	bne.n	80049ac <find_volume+0x1ec>
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	3330      	adds	r3, #48	; 0x30
 80049a0:	3324      	adds	r3, #36	; 0x24
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fe fdc8 	bl	8003538 <ld_dword>
 80049a8:	0003      	movs	r3, r0
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2240      	movs	r2, #64	; 0x40
 80049b6:	5c9a      	ldrb	r2, [r3, r2]
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	789b      	ldrb	r3, [r3, #2]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d005      	beq.n	80049d0 <find_volume+0x210>
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	789b      	ldrb	r3, [r3, #2]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d001      	beq.n	80049d0 <find_volume+0x210>
 80049cc:	230d      	movs	r3, #13
 80049ce:	e154      	b.n	8004c7a <find_volume+0x4ba>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	001a      	movs	r2, r3
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	4353      	muls	r3, r2
 80049da:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	223d      	movs	r2, #61	; 0x3d
 80049e0:	5c9b      	ldrb	r3, [r3, r2]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	895b      	ldrh	r3, [r3, #10]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <find_volume+0x240>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	895b      	ldrh	r3, [r3, #10]
 80049f4:	001a      	movs	r2, r3
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	895b      	ldrh	r3, [r3, #10]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	d001      	beq.n	8004a04 <find_volume+0x244>
 8004a00:	230d      	movs	r3, #13
 8004a02:	e13a      	b.n	8004c7a <find_volume+0x4ba>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	3330      	adds	r3, #48	; 0x30
 8004a08:	3311      	adds	r3, #17
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f7fe fd79 	bl	8003502 <ld_word>
 8004a10:	0003      	movs	r3, r0
 8004a12:	001a      	movs	r2, r3
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	891b      	ldrh	r3, [r3, #8]
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	4013      	ands	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <find_volume+0x26a>
 8004a26:	230d      	movs	r3, #13
 8004a28:	e127      	b.n	8004c7a <find_volume+0x4ba>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	3330      	adds	r3, #48	; 0x30
 8004a2e:	3313      	adds	r3, #19
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7fe fd66 	bl	8003502 <ld_word>
 8004a36:	0003      	movs	r3, r0
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <find_volume+0x290>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	3330      	adds	r3, #48	; 0x30
 8004a44:	3320      	adds	r3, #32
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fe fd76 	bl	8003538 <ld_dword>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	3330      	adds	r3, #48	; 0x30
 8004a54:	330e      	adds	r3, #14
 8004a56:	252e      	movs	r5, #46	; 0x2e
 8004a58:	197c      	adds	r4, r7, r5
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7fe fd51 	bl	8003502 <ld_word>
 8004a60:	0003      	movs	r3, r0
 8004a62:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004a64:	197b      	adds	r3, r7, r5
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <find_volume+0x2b0>
 8004a6c:	230d      	movs	r3, #13
 8004a6e:	e104      	b.n	8004c7a <find_volume+0x4ba>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004a70:	232e      	movs	r3, #46	; 0x2e
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a78:	18d3      	adds	r3, r2, r3
 8004a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a7c:	8912      	ldrh	r2, [r2, #8]
 8004a7e:	0912      	lsrs	r2, r2, #4
 8004a80:	b292      	uxth	r2, r2
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d201      	bcs.n	8004a92 <find_volume+0x2d2>
 8004a8e:	230d      	movs	r3, #13
 8004a90:	e0f3      	b.n	8004c7a <find_volume+0x4ba>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	895b      	ldrh	r3, [r3, #10]
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	0010      	movs	r0, r2
 8004aa0:	f7fb fb42 	bl	8000128 <__udivsi3>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <find_volume+0x2f2>
 8004aae:	230d      	movs	r3, #13
 8004ab0:	e0e3      	b.n	8004c7a <find_volume+0x4ba>
		fmt = FS_FAT32;
 8004ab2:	2157      	movs	r1, #87	; 0x57
 8004ab4:	187b      	adds	r3, r7, r1
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <find_volume+0x360>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d802      	bhi.n	8004ac8 <find_volume+0x308>
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <find_volume+0x364>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d803      	bhi.n	8004ad8 <find_volume+0x318>
 8004ad0:	2357      	movs	r3, #87	; 0x57
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ae4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004ae6:	232e      	movs	r3, #46	; 0x2e
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aee:	18d2      	adds	r2, r2, r3
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	18d2      	adds	r2, r2, r3
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004afe:	2357      	movs	r3, #87	; 0x57
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d123      	bne.n	8004b50 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	3330      	adds	r3, #48	; 0x30
 8004b0c:	332a      	adds	r3, #42	; 0x2a
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7fe fcf7 	bl	8003502 <ld_word>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d007      	beq.n	8004b28 <find_volume+0x368>
 8004b18:	230d      	movs	r3, #13
 8004b1a:	e0ae      	b.n	8004c7a <find_volume+0x4ba>
 8004b1c:	20000130 	.word	0x20000130
 8004b20:	0000fff5 	.word	0x0000fff5
 8004b24:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	891b      	ldrh	r3, [r3, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <find_volume+0x374>
 8004b30:	230d      	movs	r3, #13
 8004b32:	e0a2      	b.n	8004c7a <find_volume+0x4ba>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	3330      	adds	r3, #48	; 0x30
 8004b38:	332c      	adds	r3, #44	; 0x2c
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fe fcfc 	bl	8003538 <ld_dword>
 8004b40:	0002      	movs	r2, r0
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4e:	e020      	b.n	8004b92 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	891b      	ldrh	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <find_volume+0x39c>
 8004b58:	230d      	movs	r3, #13
 8004b5a:	e08e      	b.n	8004c7a <find_volume+0x4ba>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b62:	18d2      	adds	r2, r2, r3
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004b68:	2357      	movs	r3, #87	; 0x57
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d103      	bne.n	8004b7a <find_volume+0x3ba>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	e00a      	b.n	8004b90 <find_volume+0x3d0>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	0013      	movs	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	085a      	lsrs	r2, r3, #1
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	400b      	ands	r3, r1
 8004b8e:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	493a      	ldr	r1, [pc, #232]	; (8004c84 <find_volume+0x4c4>)
 8004b9a:	468c      	mov	ip, r1
 8004b9c:	4463      	add	r3, ip
 8004b9e:	0a5b      	lsrs	r3, r3, #9
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d201      	bcs.n	8004ba8 <find_volume+0x3e8>
 8004ba4:	230d      	movs	r3, #13
 8004ba6:	e068      	b.n	8004c7a <find_volume+0x4ba>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	2201      	movs	r2, #1
 8004bac:	4252      	negs	r2, r2
 8004bae:	611a      	str	r2, [r3, #16]
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004bbe:	2357      	movs	r3, #87	; 0x57
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d148      	bne.n	8004c5a <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	3330      	adds	r3, #48	; 0x30
 8004bcc:	3330      	adds	r3, #48	; 0x30
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7fe fc97 	bl	8003502 <ld_word>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d13f      	bne.n	8004c5a <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	0011      	movs	r1, r2
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7fe fdcf 	bl	8003786 <move_window>
 8004be8:	1e03      	subs	r3, r0, #0
 8004bea:	d136      	bne.n	8004c5a <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	2200      	movs	r2, #0
 8004bf0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	3330      	adds	r3, #48	; 0x30
 8004bf6:	33ff      	adds	r3, #255	; 0xff
 8004bf8:	33ff      	adds	r3, #255	; 0xff
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7fe fc81 	bl	8003502 <ld_word>
 8004c00:	0003      	movs	r3, r0
 8004c02:	001a      	movs	r2, r3
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <find_volume+0x4c8>)
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d127      	bne.n	8004c5a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	3330      	adds	r3, #48	; 0x30
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fe fc92 	bl	8003538 <ld_dword>
 8004c14:	0003      	movs	r3, r0
 8004c16:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <find_volume+0x4cc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d11e      	bne.n	8004c5a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	3330      	adds	r3, #48	; 0x30
 8004c20:	33e5      	adds	r3, #229	; 0xe5
 8004c22:	33ff      	adds	r3, #255	; 0xff
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fe fc87 	bl	8003538 <ld_dword>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <find_volume+0x4d0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d113      	bne.n	8004c5a <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	3330      	adds	r3, #48	; 0x30
 8004c36:	33e9      	adds	r3, #233	; 0xe9
 8004c38:	33ff      	adds	r3, #255	; 0xff
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7fe fc7c 	bl	8003538 <ld_dword>
 8004c40:	0002      	movs	r2, r0
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	3330      	adds	r3, #48	; 0x30
 8004c4a:	33ed      	adds	r3, #237	; 0xed
 8004c4c:	33ff      	adds	r3, #255	; 0xff
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7fe fc72 	bl	8003538 <ld_dword>
 8004c54:	0002      	movs	r2, r0
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	2257      	movs	r2, #87	; 0x57
 8004c5e:	18ba      	adds	r2, r7, r2
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <find_volume+0x4d4>)
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <find_volume+0x4d4>)
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <find_volume+0x4d4>)
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b016      	add	sp, #88	; 0x58
 8004c80:	bdb0      	pop	{r4, r5, r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	000001ff 	.word	0x000001ff
 8004c88:	0000aa55 	.word	0x0000aa55
 8004c8c:	41615252 	.word	0x41615252
 8004c90:	61417272 	.word	0x61417272
 8004c94:	20000134 	.word	0x20000134

08004c98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01a      	beq.n	8004cde <validate+0x46>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <validate+0x46>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <validate+0x46>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	88da      	ldrh	r2, [r3, #6]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	889b      	ldrh	r3, [r3, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d10a      	bne.n	8004cde <validate+0x46>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7fd fb4e 	bl	8002370 <disk_status>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d007      	beq.n	8004cee <validate+0x56>
		*fs = 0;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8004ce4:	230f      	movs	r3, #15
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2209      	movs	r2, #9
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e007      	b.n	8004cfe <validate+0x66>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	781b      	ldrb	r3, [r3, #0]
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004d0c:	b5b0      	push	{r4, r5, r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	1dfb      	adds	r3, r7, #7
 8004d18:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004d1e:	2310      	movs	r3, #16
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff fcb1 	bl	800468a <get_ldnumber>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da01      	bge.n	8004d36 <f_mount+0x2a>
 8004d32:	230b      	movs	r3, #11
 8004d34:	e02c      	b.n	8004d90 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <f_mount+0x8c>)
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	58d3      	ldr	r3, [r2, r3]
 8004d3e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <f_mount+0x4c>
		fs->fs_type = 0;				/* Clear new fs object */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <f_mount+0x8c>)
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <f_mount+0x64>
 8004d68:	1dfb      	adds	r3, r7, #7
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d001      	beq.n	8004d74 <f_mount+0x68>
 8004d70:	2300      	movs	r3, #0
 8004d72:	e00d      	b.n	8004d90 <f_mount+0x84>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004d74:	2517      	movs	r5, #23
 8004d76:	197c      	adds	r4, r7, r5
 8004d78:	230c      	movs	r3, #12
 8004d7a:	18f9      	adds	r1, r7, r3
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2200      	movs	r2, #0
 8004d82:	0018      	movs	r0, r3
 8004d84:	f7ff fd1c 	bl	80047c0 <find_volume>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8004d8c:	197b      	adds	r3, r7, r5
 8004d8e:	781b      	ldrb	r3, [r3, #0]
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b008      	add	sp, #32
 8004d96:	bdb0      	pop	{r4, r5, r7, pc}
 8004d98:	20000130 	.word	0x20000130

08004d9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9e:	b099      	sub	sp, #100	; 0x64
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <f_open+0x18>
 8004db0:	2309      	movs	r3, #9
 8004db2:	e1aa      	b.n	800510a <f_open+0x36e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004db4:	1dfb      	adds	r3, r7, #7
 8004db6:	1dfa      	adds	r2, r7, #7
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	213f      	movs	r1, #63	; 0x3f
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8004dc0:	255f      	movs	r5, #95	; 0x5f
 8004dc2:	197c      	adds	r4, r7, r5
 8004dc4:	1dfb      	adds	r3, r7, #7
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	2314      	movs	r3, #20
 8004dca:	18f9      	adds	r1, r7, r3
 8004dcc:	2308      	movs	r3, #8
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7ff fcf5 	bl	80047c0 <find_volume>
 8004dd6:	0003      	movs	r3, r0
 8004dd8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004dda:	197b      	adds	r3, r7, r5
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d000      	beq.n	8004de4 <f_open+0x48>
 8004de2:	e187      	b.n	80050f4 <f_open+0x358>
		dj.obj.fs = fs;
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	2618      	movs	r6, #24
 8004de8:	19bb      	adds	r3, r7, r6
 8004dea:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	197c      	adds	r4, r7, r5
 8004df0:	19bb      	adds	r3, r7, r6
 8004df2:	0011      	movs	r1, r2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff fbc3 	bl	8004580 <follow_path>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004dfe:	197b      	adds	r3, r7, r5
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d108      	bne.n	8004e18 <f_open+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004e06:	19bb      	adds	r3, r7, r6
 8004e08:	222b      	movs	r2, #43	; 0x2b
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da02      	bge.n	8004e18 <f_open+0x7c>
				res = FR_INVALID_NAME;
 8004e12:	197b      	adds	r3, r7, r5
 8004e14:	2206      	movs	r2, #6
 8004e16:	701a      	strb	r2, [r3, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	221c      	movs	r2, #28
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d100      	bne.n	8004e24 <f_open+0x88>
 8004e22:	e08c      	b.n	8004f3e <f_open+0x1a2>
			if (res != FR_OK) {					/* No file, create new */
 8004e24:	225f      	movs	r2, #95	; 0x5f
 8004e26:	18bb      	adds	r3, r7, r2
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <f_open+0xb8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004e2e:	18bb      	adds	r3, r7, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d107      	bne.n	8004e46 <f_open+0xaa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8004e36:	18bc      	adds	r4, r7, r2
 8004e38:	2318      	movs	r3, #24
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7ff fa7c 	bl	800433a <dir_register>
 8004e42:	0003      	movs	r3, r0
 8004e44:	7023      	strb	r3, [r4, #0]
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	1dfa      	adds	r2, r7, #7
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	2108      	movs	r1, #8
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e014      	b.n	8004e7e <f_open+0xe2>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e54:	2318      	movs	r3, #24
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	799b      	ldrb	r3, [r3, #6]
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	2311      	movs	r3, #17
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d004      	beq.n	8004e6c <f_open+0xd0>
					res = FR_DENIED;
 8004e62:	235f      	movs	r3, #95	; 0x5f
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2207      	movs	r2, #7
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e008      	b.n	8004e7e <f_open+0xe2>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2204      	movs	r2, #4
 8004e72:	4013      	ands	r3, r2
 8004e74:	d003      	beq.n	8004e7e <f_open+0xe2>
 8004e76:	235f      	movs	r3, #95	; 0x5f
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e7e:	245f      	movs	r4, #95	; 0x5f
 8004e80:	193b      	adds	r3, r7, r4
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d000      	beq.n	8004e8a <f_open+0xee>
 8004e88:	e079      	b.n	8004f7e <f_open+0x1e2>
 8004e8a:	1dfb      	adds	r3, r7, #7
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2208      	movs	r2, #8
 8004e90:	4013      	ands	r3, r2
 8004e92:	d100      	bne.n	8004e96 <f_open+0xfa>
 8004e94:	e073      	b.n	8004f7e <f_open+0x1e2>
				dw = GET_FATTIME();
 8004e96:	4b9f      	ldr	r3, [pc, #636]	; (8005114 <f_open+0x378>)
 8004e98:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004e9a:	2518      	movs	r5, #24
 8004e9c:	197b      	adds	r3, r7, r5
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	330e      	adds	r3, #14
 8004ea2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ea4:	0011      	movs	r1, r2
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7fe fb85 	bl	80035b6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004eac:	197b      	adds	r3, r7, r5
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	3316      	adds	r3, #22
 8004eb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7fe fb7d 	bl	80035b6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004ebc:	197b      	adds	r3, r7, r5
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	330b      	adds	r3, #11
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	197b      	adds	r3, r7, r5
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	0019      	movs	r1, r3
 8004ece:	0010      	movs	r0, r2
 8004ed0:	f7ff f98c 	bl	80041ec <ld_clust>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004ed8:	6978      	ldr	r0, [r7, #20]
 8004eda:	197b      	adds	r3, r7, r5
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	f7ff f9a2 	bl	800422a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004ee6:	197b      	adds	r3, r7, r5
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	331c      	adds	r3, #28
 8004eec:	2100      	movs	r1, #0
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7fe fb61 	bl	80035b6 <st_dword>
					fs->wflag = 1;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d03e      	beq.n	8004f7e <f_open+0x1e2>
						dw = fs->winsect;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004f06:	0026      	movs	r6, r4
 8004f08:	193c      	adds	r4, r7, r4
 8004f0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f0c:	197b      	adds	r3, r7, r5
 8004f0e:	2200      	movs	r2, #0
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7fe feb3 	bl	8003c7c <remove_chain>
 8004f16:	0003      	movs	r3, r0
 8004f18:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8004f1a:	19bb      	adds	r3, r7, r6
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12d      	bne.n	8004f7e <f_open+0x1e2>
							res = move_window(fs, dw);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	19bc      	adds	r4, r7, r6
 8004f26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f28:	0011      	movs	r1, r2
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7fe fc2b 	bl	8003786 <move_window>
 8004f30:	0003      	movs	r3, r0
 8004f32:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]
 8004f3c:	e01f      	b.n	8004f7e <f_open+0x1e2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004f3e:	215f      	movs	r1, #95	; 0x5f
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <f_open+0x1e2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004f48:	2318      	movs	r3, #24
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	799b      	ldrb	r3, [r3, #6]
 8004f4e:	001a      	movs	r2, r3
 8004f50:	2310      	movs	r3, #16
 8004f52:	4013      	ands	r3, r2
 8004f54:	d003      	beq.n	8004f5e <f_open+0x1c2>
					res = FR_NO_FILE;
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	2204      	movs	r2, #4
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e00f      	b.n	8004f7e <f_open+0x1e2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004f5e:	1dfb      	adds	r3, r7, #7
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2202      	movs	r2, #2
 8004f64:	4013      	ands	r3, r2
 8004f66:	d00a      	beq.n	8004f7e <f_open+0x1e2>
 8004f68:	2318      	movs	r3, #24
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	799b      	ldrb	r3, [r3, #6]
 8004f6e:	001a      	movs	r2, r3
 8004f70:	2301      	movs	r3, #1
 8004f72:	4013      	ands	r3, r2
 8004f74:	d003      	beq.n	8004f7e <f_open+0x1e2>
						res = FR_DENIED;
 8004f76:	235f      	movs	r3, #95	; 0x5f
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8004f7e:	235f      	movs	r3, #95	; 0x5f
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d113      	bne.n	8004fb0 <f_open+0x214>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d005      	beq.n	8004f9e <f_open+0x202>
				mode |= FA_MODIFIED;
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	1dfa      	adds	r2, r7, #7
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8004fa6:	2318      	movs	r3, #24
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004fb0:	235f      	movs	r3, #95	; 0x5f
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d000      	beq.n	8004fbc <f_open+0x220>
 8004fba:	e09b      	b.n	80050f4 <f_open+0x358>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	2418      	movs	r4, #24
 8004fc0:	193b      	adds	r3, r7, r4
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	f7ff f910 	bl	80041ec <ld_clust>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	331c      	adds	r3, #28
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7fe faad 	bl	8003538 <ld_dword>
 8004fde:	0002      	movs	r2, r0
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	88da      	ldrh	r2, [r3, #6]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1dfa      	adds	r2, r7, #7
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3328      	adds	r3, #40	; 0x28
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	2100      	movs	r1, #0
 8005016:	0018      	movs	r0, r3
 8005018:	f7fe fb16 	bl	8003648 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800501c:	1dfb      	adds	r3, r7, #7
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2220      	movs	r2, #32
 8005022:	4013      	ands	r3, r2
 8005024:	d066      	beq.n	80050f4 <f_open+0x358>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d062      	beq.n	80050f4 <f_open+0x358>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	895b      	ldrh	r3, [r3, #10]
 800503a:	025b      	lsls	r3, r3, #9
 800503c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	657b      	str	r3, [r7, #84]	; 0x54
 800504a:	e019      	b.n	8005080 <f_open+0x2e4>
					clst = get_fat(&fp->obj, clst);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005050:	0011      	movs	r1, r2
 8005052:	0018      	movs	r0, r3
 8005054:	f7fe fc64 	bl	8003920 <get_fat>
 8005058:	0003      	movs	r3, r0
 800505a:	65bb      	str	r3, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800505c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800505e:	2b01      	cmp	r3, #1
 8005060:	d803      	bhi.n	800506a <f_open+0x2ce>
 8005062:	235f      	movs	r3, #95	; 0x5f
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	2202      	movs	r2, #2
 8005068:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800506a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800506c:	3301      	adds	r3, #1
 800506e:	d103      	bne.n	8005078 <f_open+0x2dc>
 8005070:	235f      	movs	r3, #95	; 0x5f
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005078:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800507a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	657b      	str	r3, [r7, #84]	; 0x54
 8005080:	235f      	movs	r3, #95	; 0x5f
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <f_open+0x2f6>
 800508a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800508c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508e:	429a      	cmp	r2, r3
 8005090:	d8dc      	bhi.n	800504c <f_open+0x2b0>
				}
				fp->clust = clst;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005096:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005098:	245f      	movs	r4, #95	; 0x5f
 800509a:	193b      	adds	r3, r7, r4
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d128      	bne.n	80050f4 <f_open+0x358>
 80050a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a4:	05db      	lsls	r3, r3, #23
 80050a6:	0ddb      	lsrs	r3, r3, #23
 80050a8:	d024      	beq.n	80050f4 <f_open+0x358>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ae:	0011      	movs	r1, r2
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7fe fc19 	bl	80038e8 <clust2sect>
 80050b6:	0003      	movs	r3, r0
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <f_open+0x32c>
						res = FR_INT_ERR;
 80050c0:	193b      	adds	r3, r7, r4
 80050c2:	2202      	movs	r2, #2
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e015      	b.n	80050f4 <f_open+0x358>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80050c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ca:	0a5a      	lsrs	r2, r3, #9
 80050cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ce:	18d2      	adds	r2, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	7858      	ldrb	r0, [r3, #1]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3328      	adds	r3, #40	; 0x28
 80050dc:	0019      	movs	r1, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	2301      	movs	r3, #1
 80050e4:	f7fd f95a 	bl	800239c <disk_read>
 80050e8:	1e03      	subs	r3, r0, #0
 80050ea:	d003      	beq.n	80050f4 <f_open+0x358>
 80050ec:	235f      	movs	r3, #95	; 0x5f
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80050f4:	235f      	movs	r3, #95	; 0x5f
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <f_open+0x368>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005104:	235f      	movs	r3, #95	; 0x5f
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	781b      	ldrb	r3, [r3, #0]
}
 800510a:	0018      	movs	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	b019      	add	sp, #100	; 0x64
 8005110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	48210000 	.word	0x48210000

08005118 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005118:	b5b0      	push	{r4, r5, r7, lr}
 800511a:	b08c      	sub	sp, #48	; 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	252f      	movs	r5, #47	; 0x2f
 8005134:	197c      	adds	r4, r7, r5
 8005136:	2210      	movs	r2, #16
 8005138:	18ba      	adds	r2, r7, r2
 800513a:	0011      	movs	r1, r2
 800513c:	0018      	movs	r0, r3
 800513e:	f7ff fdab 	bl	8004c98 <validate>
 8005142:	0003      	movs	r3, r0
 8005144:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005146:	197b      	adds	r3, r7, r5
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <f_write+0x46>
 800514e:	197b      	adds	r3, r7, r5
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	7c52      	ldrb	r2, [r2, #17]
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	197b      	adds	r3, r7, r5
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <f_write+0x4e>
 800515e:	232f      	movs	r3, #47	; 0x2f
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	e140      	b.n	80053e8 <f_write+0x2d0>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	7c1b      	ldrb	r3, [r3, #16]
 800516a:	001a      	movs	r2, r3
 800516c:	2302      	movs	r3, #2
 800516e:	4013      	ands	r3, r2
 8005170:	d101      	bne.n	8005176 <f_write+0x5e>
 8005172:	2307      	movs	r3, #7
 8005174:	e138      	b.n	80053e8 <f_write+0x2d0>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	18d2      	adds	r2, r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	d300      	bcc.n	8005188 <f_write+0x70>
 8005186:	e121      	b.n	80053cc <f_write+0x2b4>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	43db      	mvns	r3, r3
 800518e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005190:	e11c      	b.n	80053cc <f_write+0x2b4>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	05db      	lsls	r3, r3, #23
 8005198:	0ddb      	lsrs	r3, r3, #23
 800519a:	d000      	beq.n	800519e <f_write+0x86>
 800519c:	e0d5      	b.n	800534a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	0a5b      	lsrs	r3, r3, #9
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	8952      	ldrh	r2, [r2, #10]
 80051a8:	3a01      	subs	r2, #1
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d138      	bne.n	8005226 <f_write+0x10e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10d      	bne.n	80051d8 <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d110      	bne.n	80051ea <f_write+0xd2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2100      	movs	r1, #0
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7fe fdc8 	bl	8003d62 <create_chain>
 80051d2:	0003      	movs	r3, r0
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	e008      	b.n	80051ea <f_write+0xd2>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	0019      	movs	r1, r3
 80051e0:	0010      	movs	r0, r2
 80051e2:	f7fe fdbe 	bl	8003d62 <create_chain>
 80051e6:	0003      	movs	r3, r0
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d100      	bne.n	80051f2 <f_write+0xda>
 80051f0:	e0f1      	b.n	80053d6 <f_write+0x2be>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d104      	bne.n	8005202 <f_write+0xea>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2202      	movs	r2, #2
 80051fc:	745a      	strb	r2, [r3, #17]
 80051fe:	2302      	movs	r3, #2
 8005200:	e0f2      	b.n	80053e8 <f_write+0x2d0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	3301      	adds	r3, #1
 8005206:	d104      	bne.n	8005212 <f_write+0xfa>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	745a      	strb	r2, [r3, #17]
 800520e:	2301      	movs	r3, #1
 8005210:	e0ea      	b.n	80053e8 <f_write+0x2d0>
				fp->clust = clst;			/* Update current cluster */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005216:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <f_write+0x10e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005224:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	7c1b      	ldrb	r3, [r3, #16]
 800522a:	b25b      	sxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	da17      	bge.n	8005260 <f_write+0x148>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	7858      	ldrb	r0, [r3, #1]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3328      	adds	r3, #40	; 0x28
 8005238:	0019      	movs	r1, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	2301      	movs	r3, #1
 8005240:	f7fd f918 	bl	8002474 <disk_write>
 8005244:	1e03      	subs	r3, r0, #0
 8005246:	d004      	beq.n	8005252 <f_write+0x13a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	745a      	strb	r2, [r3, #17]
 800524e:	2301      	movs	r3, #1
 8005250:	e0ca      	b.n	80053e8 <f_write+0x2d0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	7c1b      	ldrb	r3, [r3, #16]
 8005256:	227f      	movs	r2, #127	; 0x7f
 8005258:	4013      	ands	r3, r2
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	0019      	movs	r1, r3
 8005268:	0010      	movs	r0, r2
 800526a:	f7fe fb3d 	bl	80038e8 <clust2sect>
 800526e:	0003      	movs	r3, r0
 8005270:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <f_write+0x16a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2202      	movs	r2, #2
 800527c:	745a      	strb	r2, [r3, #17]
 800527e:	2302      	movs	r3, #2
 8005280:	e0b2      	b.n	80053e8 <f_write+0x2d0>
			sect += csect;
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	18d3      	adds	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0a5b      	lsrs	r3, r3, #9
 800528e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03b      	beq.n	800530e <f_write+0x1f6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	18d3      	adds	r3, r2, r3
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	8952      	ldrh	r2, [r2, #10]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d905      	bls.n	80052b0 <f_write+0x198>
					cc = fs->csize - csect;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	895b      	ldrh	r3, [r3, #10]
 80052a8:	001a      	movs	r2, r3
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	7858      	ldrb	r0, [r3, #1]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	f7fd f8db 	bl	8002474 <disk_write>
 80052be:	1e03      	subs	r3, r0, #0
 80052c0:	d004      	beq.n	80052cc <f_write+0x1b4>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	745a      	strb	r2, [r3, #17]
 80052c8:	2301      	movs	r3, #1
 80052ca:	e08d      	b.n	80053e8 <f_write+0x2d0>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d915      	bls.n	8005306 <f_write+0x1ee>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3328      	adds	r3, #40	; 0x28
 80052de:	0018      	movs	r0, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	025b      	lsls	r3, r3, #9
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	18d3      	adds	r3, r2, r3
 80052ee:	2280      	movs	r2, #128	; 0x80
 80052f0:	0092      	lsls	r2, r2, #2
 80052f2:	0019      	movs	r1, r3
 80052f4:	f7fe f989 	bl	800360a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	7c1b      	ldrb	r3, [r3, #16]
 80052fc:	227f      	movs	r2, #127	; 0x7f
 80052fe:	4013      	ands	r3, r2
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	025b      	lsls	r3, r3, #9
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800530c:	e040      	b.n	8005390 <f_write+0x278>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	429a      	cmp	r2, r3
 8005316:	d015      	beq.n	8005344 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005320:	429a      	cmp	r2, r3
 8005322:	d20f      	bcs.n	8005344 <f_write+0x22c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	7858      	ldrb	r0, [r3, #1]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3328      	adds	r3, #40	; 0x28
 800532c:	0019      	movs	r1, r3
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	2301      	movs	r3, #1
 8005332:	f7fd f833 	bl	800239c <disk_read>
 8005336:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8005338:	d004      	beq.n	8005344 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	745a      	strb	r2, [r3, #17]
 8005340:	2301      	movs	r3, #1
 8005342:	e051      	b.n	80053e8 <f_write+0x2d0>
			}
#endif
			fp->sect = sect;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	05db      	lsls	r3, r3, #23
 8005350:	0ddb      	lsrs	r3, r3, #23
 8005352:	2280      	movs	r2, #128	; 0x80
 8005354:	0092      	lsls	r2, r2, #2
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d901      	bls.n	8005366 <f_write+0x24e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3328      	adds	r3, #40	; 0x28
 800536a:	001a      	movs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	05db      	lsls	r3, r3, #23
 8005372:	0ddb      	lsrs	r3, r3, #23
 8005374:	18d3      	adds	r3, r2, r3
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	69f9      	ldr	r1, [r7, #28]
 800537a:	0018      	movs	r0, r3
 800537c:	f7fe f945 	bl	800360a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	7c1b      	ldrb	r3, [r3, #16]
 8005384:	2280      	movs	r2, #128	; 0x80
 8005386:	4252      	negs	r2, r2
 8005388:	4313      	orrs	r3, r2
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	18d3      	adds	r3, r2, r3
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	18d2      	adds	r2, r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	615a      	str	r2, [r3, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68d9      	ldr	r1, [r3, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	000b      	movs	r3, r1
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d200      	bcs.n	80053b4 <f_write+0x29c>
 80053b2:	0013      	movs	r3, r2
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	60d3      	str	r3, [r2, #12]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	18d2      	adds	r2, r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <f_write+0x2bc>
 80053d2:	e6de      	b.n	8005192 <f_write+0x7a>
 80053d4:	e000      	b.n	80053d8 <f_write+0x2c0>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80053d6:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	7c1b      	ldrb	r3, [r3, #16]
 80053dc:	2240      	movs	r2, #64	; 0x40
 80053de:	4313      	orrs	r3, r2
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b00c      	add	sp, #48	; 0x30
 80053ee:	bdb0      	pop	{r4, r5, r7, pc}

080053f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80053f0:	b5b0      	push	{r4, r5, r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2517      	movs	r5, #23
 80053fc:	197c      	adds	r4, r7, r5
 80053fe:	2208      	movs	r2, #8
 8005400:	18ba      	adds	r2, r7, r2
 8005402:	0011      	movs	r1, r2
 8005404:	0018      	movs	r0, r3
 8005406:	f7ff fc47 	bl	8004c98 <validate>
 800540a:	0003      	movs	r3, r0
 800540c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800540e:	197b      	adds	r3, r7, r5
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d16c      	bne.n	80054f0 <f_sync+0x100>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	7c1b      	ldrb	r3, [r3, #16]
 800541a:	001a      	movs	r2, r3
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	4013      	ands	r3, r2
 8005420:	d066      	beq.n	80054f0 <f_sync+0x100>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7c1b      	ldrb	r3, [r3, #16]
 8005426:	b25b      	sxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	da14      	bge.n	8005456 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	7858      	ldrb	r0, [r3, #1]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3328      	adds	r3, #40	; 0x28
 8005434:	0019      	movs	r1, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	2301      	movs	r3, #1
 800543c:	f7fd f81a 	bl	8002474 <disk_write>
 8005440:	1e03      	subs	r3, r0, #0
 8005442:	d001      	beq.n	8005448 <f_sync+0x58>
 8005444:	2301      	movs	r3, #1
 8005446:	e056      	b.n	80054f6 <f_sync+0x106>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7c1b      	ldrb	r3, [r3, #16]
 800544c:	227f      	movs	r2, #127	; 0x7f
 800544e:	4013      	ands	r3, r2
 8005450:	b2da      	uxtb	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005456:	4b2a      	ldr	r3, [pc, #168]	; (8005500 <f_sync+0x110>)
 8005458:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	2517      	movs	r5, #23
 8005462:	197c      	adds	r4, r7, r5
 8005464:	0019      	movs	r1, r3
 8005466:	0010      	movs	r0, r2
 8005468:	f7fe f98d 	bl	8003786 <move_window>
 800546c:	0003      	movs	r3, r0
 800546e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8005470:	002c      	movs	r4, r5
 8005472:	193b      	adds	r3, r7, r4
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d13a      	bne.n	80054f0 <f_sync+0x100>
					dir = fp->dir_ptr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	330b      	adds	r3, #11
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	330b      	adds	r3, #11
 800548a:	2120      	movs	r1, #32
 800548c:	430a      	orrs	r2, r1
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	0019      	movs	r1, r3
 800549e:	f7fe fec4 	bl	800422a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	331c      	adds	r3, #28
 80054a6:	001a      	movs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0019      	movs	r1, r3
 80054ae:	0010      	movs	r0, r2
 80054b0:	f7fe f881 	bl	80035b6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3316      	adds	r3, #22
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	0011      	movs	r1, r2
 80054bc:	0018      	movs	r0, r3
 80054be:	f7fe f87a 	bl	80035b6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3312      	adds	r3, #18
 80054c6:	2100      	movs	r1, #0
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fe f856 	bl	800357a <st_word>
					fs->wflag = 1;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2201      	movs	r2, #1
 80054d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	193c      	adds	r4, r7, r4
 80054d8:	0018      	movs	r0, r3
 80054da:	f7fe f989 	bl	80037f0 <sync_fs>
 80054de:	0003      	movs	r3, r0
 80054e0:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	7c1b      	ldrb	r3, [r3, #16]
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	4393      	bics	r3, r2
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80054f0:	2317      	movs	r3, #23
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	781b      	ldrb	r3, [r3, #0]
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b006      	add	sp, #24
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	48210000 	.word	0x48210000

08005504 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005504:	b5b0      	push	{r4, r5, r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800550c:	250f      	movs	r5, #15
 800550e:	197c      	adds	r4, r7, r5
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f7ff ff6c 	bl	80053f0 <f_sync>
 8005518:	0003      	movs	r3, r0
 800551a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800551c:	197b      	adds	r3, r7, r5
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d110      	bne.n	8005546 <f_close+0x42>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	197c      	adds	r4, r7, r5
 8005528:	2208      	movs	r2, #8
 800552a:	18ba      	adds	r2, r7, r2
 800552c:	0011      	movs	r1, r2
 800552e:	0018      	movs	r0, r3
 8005530:	f7ff fbb2 	bl	8004c98 <validate>
 8005534:	0003      	movs	r3, r0
 8005536:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005538:	197b      	adds	r3, r7, r5
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <f_close+0x42>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005546:	230f      	movs	r3, #15
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	781b      	ldrb	r3, [r3, #0]
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b004      	add	sp, #16
 8005552:	bdb0      	pop	{r4, r5, r7, pc}

08005554 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005554:	b5b0      	push	{r4, r5, r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	251f      	movs	r5, #31
 8005562:	197c      	adds	r4, r7, r5
 8005564:	2208      	movs	r2, #8
 8005566:	18ba      	adds	r2, r7, r2
 8005568:	0011      	movs	r1, r2
 800556a:	0018      	movs	r0, r3
 800556c:	f7ff fb94 	bl	8004c98 <validate>
 8005570:	0003      	movs	r3, r0
 8005572:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005574:	197b      	adds	r3, r7, r5
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <f_lseek+0x30>
 800557c:	197b      	adds	r3, r7, r5
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	7c52      	ldrb	r2, [r2, #17]
 8005582:	701a      	strb	r2, [r3, #0]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005584:	221f      	movs	r2, #31
 8005586:	18bb      	adds	r3, r7, r2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <f_lseek+0x40>
 800558e:	18bb      	adds	r3, r7, r2
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	e117      	b.n	80057c4 <f_lseek+0x270>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d908      	bls.n	80055b0 <f_lseek+0x5c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	7c1b      	ldrb	r3, [r3, #16]
 80055a2:	001a      	movs	r2, r3
 80055a4:	2302      	movs	r3, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d102      	bne.n	80055b0 <f_lseek+0x5c>
			ofs = fp->obj.objsize;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	615a      	str	r2, [r3, #20]
		if (ofs) {
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d100      	bne.n	80055c8 <f_lseek+0x74>
 80055c6:	e0af      	b.n	8005728 <f_lseek+0x1d4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	025b      	lsls	r3, r3, #9
 80055ce:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d020      	beq.n	8005618 <f_lseek+0xc4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	3b01      	subs	r3, #1
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	0018      	movs	r0, r3
 80055de:	f7fa fda3 	bl	8000128 <__udivsi3>
 80055e2:	0003      	movs	r3, r0
 80055e4:	001c      	movs	r4, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7fa fd9b 	bl	8000128 <__udivsi3>
 80055f2:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d30f      	bcc.n	8005618 <f_lseek+0xc4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4252      	negs	r2, r2
 8005600:	401a      	ands	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e022      	b.n	800565e <f_lseek+0x10a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d119      	bne.n	8005658 <f_lseek+0x104>
					clst = create_chain(&fp->obj, 0);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2100      	movs	r1, #0
 8005628:	0018      	movs	r0, r3
 800562a:	f7fe fb9a 	bl	8003d62 <create_chain>
 800562e:	0003      	movs	r3, r0
 8005630:	61bb      	str	r3, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d104      	bne.n	8005642 <f_lseek+0xee>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	745a      	strb	r2, [r3, #17]
 800563e:	2302      	movs	r3, #2
 8005640:	e0c0      	b.n	80057c4 <f_lseek+0x270>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3301      	adds	r3, #1
 8005646:	d104      	bne.n	8005652 <f_lseek+0xfe>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	745a      	strb	r2, [r3, #17]
 800564e:	2301      	movs	r3, #1
 8005650:	e0b8      	b.n	80057c4 <f_lseek+0x270>
					fp->obj.sclust = clst;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d061      	beq.n	8005728 <f_lseek+0x1d4>
				while (ofs > bcs) {						/* Cluster following loop */
 8005664:	e03d      	b.n	80056e2 <f_lseek+0x18e>
					ofs -= bcs; fp->fptr += bcs;
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	18d2      	adds	r2, r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	7c1b      	ldrb	r3, [r3, #16]
 800567e:	001a      	movs	r2, r3
 8005680:	2302      	movs	r3, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d00d      	beq.n	80056a2 <f_lseek+0x14e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0011      	movs	r1, r2
 800568c:	0018      	movs	r0, r3
 800568e:	f7fe fb68 	bl	8003d62 <create_chain>
 8005692:	0003      	movs	r3, r0
 8005694:	61bb      	str	r3, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <f_lseek+0x15e>
							ofs = 0; break;
 800569c:	2300      	movs	r3, #0
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	e023      	b.n	80056ea <f_lseek+0x196>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fe f939 	bl	8003920 <get_fat>
 80056ae:	0003      	movs	r3, r0
 80056b0:	61bb      	str	r3, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	3301      	adds	r3, #1
 80056b6:	d104      	bne.n	80056c2 <f_lseek+0x16e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	745a      	strb	r2, [r3, #17]
 80056be:	2301      	movs	r3, #1
 80056c0:	e080      	b.n	80057c4 <f_lseek+0x270>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d904      	bls.n	80056d2 <f_lseek+0x17e>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d304      	bcc.n	80056dc <f_lseek+0x188>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	745a      	strb	r2, [r3, #17]
 80056d8:	2302      	movs	r3, #2
 80056da:	e073      	b.n	80057c4 <f_lseek+0x270>
					fp->clust = clst;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d8bd      	bhi.n	8005666 <f_lseek+0x112>
				}
				fp->fptr += ofs;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	18d2      	adds	r2, r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	0ddb      	lsrs	r3, r3, #23
 80056fc:	d014      	beq.n	8005728 <f_lseek+0x1d4>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	0011      	movs	r1, r2
 8005704:	0018      	movs	r0, r3
 8005706:	f7fe f8ef 	bl	80038e8 <clust2sect>
 800570a:	0003      	movs	r3, r0
 800570c:	617b      	str	r3, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <f_lseek+0x1ca>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	745a      	strb	r2, [r3, #17]
 800571a:	2302      	movs	r3, #2
 800571c:	e052      	b.n	80057c4 <f_lseek+0x270>
					nsect += (DWORD)(ofs / SS(fs));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	0a5b      	lsrs	r3, r3, #9
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	18d3      	adds	r3, r2, r3
 8005726:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	429a      	cmp	r2, r3
 8005732:	d90a      	bls.n	800574a <f_lseek+0x1f6>
			fp->obj.objsize = fp->fptr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7c1b      	ldrb	r3, [r3, #16]
 8005740:	2240      	movs	r2, #64	; 0x40
 8005742:	4313      	orrs	r3, r2
 8005744:	b2da      	uxtb	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	05db      	lsls	r3, r3, #23
 8005750:	0ddb      	lsrs	r3, r3, #23
 8005752:	d034      	beq.n	80057be <f_lseek+0x26a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	429a      	cmp	r2, r3
 800575c:	d02f      	beq.n	80057be <f_lseek+0x26a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7c1b      	ldrb	r3, [r3, #16]
 8005762:	b25b      	sxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	da17      	bge.n	8005798 <f_lseek+0x244>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	7858      	ldrb	r0, [r3, #1]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3328      	adds	r3, #40	; 0x28
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	2301      	movs	r3, #1
 8005778:	f7fc fe7c 	bl	8002474 <disk_write>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d004      	beq.n	800578a <f_lseek+0x236>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	745a      	strb	r2, [r3, #17]
 8005786:	2301      	movs	r3, #1
 8005788:	e01c      	b.n	80057c4 <f_lseek+0x270>
				fp->flag &= (BYTE)~FA_DIRTY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7c1b      	ldrb	r3, [r3, #16]
 800578e:	227f      	movs	r2, #127	; 0x7f
 8005790:	4013      	ands	r3, r2
 8005792:	b2da      	uxtb	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	7858      	ldrb	r0, [r3, #1]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3328      	adds	r3, #40	; 0x28
 80057a0:	0019      	movs	r1, r3
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	2301      	movs	r3, #1
 80057a6:	f7fc fdf9 	bl	800239c <disk_read>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d004      	beq.n	80057b8 <f_lseek+0x264>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	745a      	strb	r2, [r3, #17]
 80057b4:	2301      	movs	r3, #1
 80057b6:	e005      	b.n	80057c4 <f_lseek+0x270>
#endif
			fp->sect = nsect;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 80057be:	231f      	movs	r3, #31
 80057c0:	18fb      	adds	r3, r7, r3
 80057c2:	781b      	ldrb	r3, [r3, #0]
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b008      	add	sp, #32
 80057ca:	bdb0      	pop	{r4, r5, r7, pc}

080057cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	1dfb      	adds	r3, r7, #7
 80057d8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80057da:	2417      	movs	r4, #23
 80057dc:	193b      	adds	r3, r7, r4
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80057e2:	2016      	movs	r0, #22
 80057e4:	183b      	adds	r3, r7, r0
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 80057ea:	4b21      	ldr	r3, [pc, #132]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 80057ec:	7a5b      	ldrb	r3, [r3, #9]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d836      	bhi.n	8005862 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80057f4:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 80057f6:	7a5b      	ldrb	r3, [r3, #9]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	001a      	movs	r2, r3
 80057fc:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 80057fe:	2100      	movs	r1, #0
 8005800:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005802:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 8005804:	7a5b      	ldrb	r3, [r3, #9]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	18d3      	adds	r3, r2, r3
 800580e:	3304      	adds	r3, #4
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 8005816:	7a5b      	ldrb	r3, [r3, #9]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	001a      	movs	r2, r3
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 800581e:	189b      	adds	r3, r3, r2
 8005820:	1dfa      	adds	r2, r7, #7
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 8005828:	7a5b      	ldrb	r3, [r3, #9]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	b2d1      	uxtb	r1, r2
 8005830:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <FATFS_LinkDriverEx+0xa4>)
 8005832:	7251      	strb	r1, [r2, #9]
 8005834:	183a      	adds	r2, r7, r0
 8005836:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8005838:	183b      	adds	r3, r7, r0
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	3330      	adds	r3, #48	; 0x30
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	3301      	adds	r3, #1
 8005848:	223a      	movs	r2, #58	; 0x3a
 800584a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	3302      	adds	r3, #2
 8005850:	222f      	movs	r2, #47	; 0x2f
 8005852:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3303      	adds	r3, #3
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800585c:	193b      	adds	r3, r7, r4
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8005862:	2317      	movs	r3, #23
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	781b      	ldrb	r3, [r3, #0]
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	b007      	add	sp, #28
 800586e:	bd90      	pop	{r4, r7, pc}
 8005870:	20000138 	.word	0x20000138

08005874 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff ffa1 	bl	80057cc <FATFS_LinkDriverEx>
 800588a:	0003      	movs	r3, r0
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005898:	f3bf 8f4f 	dsb	sy
}
 800589c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800589e:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <__NVIC_SystemReset+0x1c>)
 80058a0:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <__NVIC_SystemReset+0x20>)
 80058a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80058a4:	f3bf 8f4f 	dsb	sy
}
 80058a8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	e7fd      	b.n	80058aa <__NVIC_SystemReset+0x16>
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	e000ed00 	.word	0xe000ed00
 80058b4:	05fa0004 	.word	0x05fa0004

080058b8 <ascii_hex_to_dec>:
static void MX_USART2_UART_Init(void);
static void MX_USART5_UART_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */
uint8_t ascii_hex_to_dec (uint8_t znak)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	0002      	movs	r2, r0
 80058c0:	1dfb      	adds	r3, r7, #7
 80058c2:	701a      	strb	r2, [r3, #0]
	if ((znak > 47) && (znak < 58))
 80058c4:	1dfb      	adds	r3, r7, #7
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b2f      	cmp	r3, #47	; 0x2f
 80058ca:	d908      	bls.n	80058de <ascii_hex_to_dec+0x26>
 80058cc:	1dfb      	adds	r3, r7, #7
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b39      	cmp	r3, #57	; 0x39
 80058d2:	d804      	bhi.n	80058de <ascii_hex_to_dec+0x26>
	{
		return (znak - 48);
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	3b30      	subs	r3, #48	; 0x30
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e00c      	b.n	80058f8 <ascii_hex_to_dec+0x40>
	}
	if ((znak > 64) && (znak < 71))
 80058de:	1dfb      	adds	r3, r7, #7
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d908      	bls.n	80058f8 <ascii_hex_to_dec+0x40>
 80058e6:	1dfb      	adds	r3, r7, #7
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b46      	cmp	r3, #70	; 0x46
 80058ec:	d804      	bhi.n	80058f8 <ascii_hex_to_dec+0x40>
	{
		return (znak - 55);
 80058ee:	1dfb      	adds	r3, r7, #7
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	3b37      	subs	r3, #55	; 0x37
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	e7ff      	b.n	80058f8 <ascii_hex_to_dec+0x40>
	}
}
 80058f8:	0018      	movs	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b002      	add	sp, #8
 80058fe:	bd80      	pop	{r7, pc}

08005900 <calc_sheep_id>:
void calc_sheep_id ()
{
 8005900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005902:	b089      	sub	sp, #36	; 0x24
 8005904:	af00      	add	r7, sp, #0
	uint8_t p;
	uint64_t ID = 0;
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	613a      	str	r2, [r7, #16]
 800590c:	617b      	str	r3, [r7, #20]
	uint32_t country = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
	if (HAL_GPIO_ReadPin(READER_TYPE_GPIO_Port, READER_TYPE_Pin) == GPIO_PIN_SET)
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4a8a      	ldr	r2, [pc, #552]	; (8005b40 <calc_sheep_id+0x240>)
 8005918:	0019      	movs	r1, r3
 800591a:	0010      	movs	r0, r2
 800591c:	f002 f9ac 	bl	8007c78 <HAL_GPIO_ReadPin>
 8005920:	0003      	movs	r3, r0
 8005922:	2b01      	cmp	r3, #1
 8005924:	d000      	beq.n	8005928 <calc_sheep_id+0x28>
 8005926:	e081      	b.n	8005a2c <calc_sheep_id+0x12c>
	{	//small antenna reader
		if ((RX_data[0] == 2) && (RX_data[17] == 3))
 8005928:	4b86      	ldr	r3, [pc, #536]	; (8005b44 <calc_sheep_id+0x244>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d000      	beq.n	8005932 <calc_sheep_id+0x32>
 8005930:	e101      	b.n	8005b36 <calc_sheep_id+0x236>
 8005932:	4b84      	ldr	r3, [pc, #528]	; (8005b44 <calc_sheep_id+0x244>)
 8005934:	7c5b      	ldrb	r3, [r3, #17]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d000      	beq.n	800593c <calc_sheep_id+0x3c>
 800593a:	e0fc      	b.n	8005b36 <calc_sheep_id+0x236>
		{
			for(p=0; p<10; p++)
 800593c:	2317      	movs	r3, #23
 800593e:	2208      	movs	r2, #8
 8005940:	4694      	mov	ip, r2
 8005942:	44bc      	add	ip, r7
 8005944:	4463      	add	r3, ip
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	e02d      	b.n	80059a8 <calc_sheep_id+0xa8>
			{
				ID = ID + ((ascii_hex_to_dec(RX_data[5+p]))*pow_const[9-p]);
 800594c:	2417      	movs	r4, #23
 800594e:	2508      	movs	r5, #8
 8005950:	197b      	adds	r3, r7, r5
 8005952:	191b      	adds	r3, r3, r4
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	3305      	adds	r3, #5
 8005958:	4a7a      	ldr	r2, [pc, #488]	; (8005b44 <calc_sheep_id+0x244>)
 800595a:	5cd3      	ldrb	r3, [r2, r3]
 800595c:	0018      	movs	r0, r3
 800595e:	f7ff ffab 	bl	80058b8 <ascii_hex_to_dec>
 8005962:	0003      	movs	r3, r0
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	197b      	adds	r3, r7, r5
 800596c:	191b      	adds	r3, r3, r4
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2209      	movs	r2, #9
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	4a74      	ldr	r2, [pc, #464]	; (8005b48 <calc_sheep_id+0x248>)
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	18d3      	adds	r3, r2, r3
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	6838      	ldr	r0, [r7, #0]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	f7fa fd67 	bl	8000454 <__aeabi_lmul>
 8005986:	0002      	movs	r2, r0
 8005988:	000b      	movs	r3, r1
 800598a:	0010      	movs	r0, r2
 800598c:	0019      	movs	r1, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	1812      	adds	r2, r2, r0
 8005994:	414b      	adcs	r3, r1
 8005996:	613a      	str	r2, [r7, #16]
 8005998:	617b      	str	r3, [r7, #20]
			for(p=0; p<10; p++)
 800599a:	197b      	adds	r3, r7, r5
 800599c:	191b      	adds	r3, r3, r4
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	197b      	adds	r3, r7, r5
 80059a2:	191b      	adds	r3, r3, r4
 80059a4:	3201      	adds	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	2017      	movs	r0, #23
 80059aa:	2408      	movs	r4, #8
 80059ac:	193b      	adds	r3, r7, r4
 80059ae:	181b      	adds	r3, r3, r0
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b09      	cmp	r3, #9
 80059b4:	d9ca      	bls.n	800594c <calc_sheep_id+0x4c>
			}
			sheep_ID = ID;
 80059b6:	4965      	ldr	r1, [pc, #404]	; (8005b4c <calc_sheep_id+0x24c>)
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	600a      	str	r2, [r1, #0]
 80059be:	604b      	str	r3, [r1, #4]
			//return number;
			for (p=0; p<4; p++)
 80059c0:	193b      	adds	r3, r7, r4
 80059c2:	181b      	adds	r3, r3, r0
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e024      	b.n	8005a14 <calc_sheep_id+0x114>
			{
				country = country + ((ascii_hex_to_dec(RX_data[1+p]))*pow_const[3-p]);
 80059ca:	2417      	movs	r4, #23
 80059cc:	2508      	movs	r5, #8
 80059ce:	197b      	adds	r3, r7, r5
 80059d0:	191b      	adds	r3, r3, r4
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a5b      	ldr	r2, [pc, #364]	; (8005b44 <calc_sheep_id+0x244>)
 80059d8:	5cd3      	ldrb	r3, [r2, r3]
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff ff6c 	bl	80058b8 <ascii_hex_to_dec>
 80059e0:	0003      	movs	r3, r0
 80059e2:	0019      	movs	r1, r3
 80059e4:	0020      	movs	r0, r4
 80059e6:	002c      	movs	r4, r5
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	181b      	adds	r3, r3, r0
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2203      	movs	r2, #3
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	4a55      	ldr	r2, [pc, #340]	; (8005b48 <calc_sheep_id+0x248>)
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	0013      	movs	r3, r2
 80059fe:	434b      	muls	r3, r1
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	18d3      	adds	r3, r2, r3
 8005a04:	60fb      	str	r3, [r7, #12]
			for (p=0; p<4; p++)
 8005a06:	193b      	adds	r3, r7, r4
 8005a08:	181b      	adds	r3, r3, r0
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	181b      	adds	r3, r3, r0
 8005a10:	3201      	adds	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	2317      	movs	r3, #23
 8005a16:	2208      	movs	r2, #8
 8005a18:	4694      	mov	ip, r2
 8005a1a:	44bc      	add	ip, r7
 8005a1c:	4463      	add	r3, ip
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d9d2      	bls.n	80059ca <calc_sheep_id+0xca>
			}
			country_ID = country;
 8005a24:	4b4a      	ldr	r3, [pc, #296]	; (8005b50 <calc_sheep_id+0x250>)
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]
			}
			country_ID = country;
		}
	}
	//return 0;
}
 8005a2a:	e084      	b.n	8005b36 <calc_sheep_id+0x236>
		if ((RX_data[0] == 2) && (RX_data[29] == 3))
 8005a2c:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <calc_sheep_id+0x244>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d000      	beq.n	8005a36 <calc_sheep_id+0x136>
 8005a34:	e07f      	b.n	8005b36 <calc_sheep_id+0x236>
 8005a36:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <calc_sheep_id+0x244>)
 8005a38:	7f5b      	ldrb	r3, [r3, #29]
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d000      	beq.n	8005a40 <calc_sheep_id+0x140>
 8005a3e:	e07a      	b.n	8005b36 <calc_sheep_id+0x236>
			for(p=0; p<10; p++)
 8005a40:	2317      	movs	r3, #23
 8005a42:	2208      	movs	r2, #8
 8005a44:	4694      	mov	ip, r2
 8005a46:	44bc      	add	ip, r7
 8005a48:	4463      	add	r3, ip
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e030      	b.n	8005ab2 <calc_sheep_id+0x1b2>
				ID = ID + ((ascii_hex_to_dec(RX_data[10-p]))*pow_const[9-p]);
 8005a50:	2617      	movs	r6, #23
 8005a52:	2108      	movs	r1, #8
 8005a54:	187b      	adds	r3, r7, r1
 8005a56:	199b      	adds	r3, r3, r6
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	4a39      	ldr	r2, [pc, #228]	; (8005b44 <calc_sheep_id+0x244>)
 8005a60:	5cd3      	ldrb	r3, [r2, r3]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff ff28 	bl	80058b8 <ascii_hex_to_dec>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	001c      	movs	r4, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	001d      	movs	r5, r3
 8005a70:	2108      	movs	r1, #8
 8005a72:	187b      	adds	r3, r7, r1
 8005a74:	199b      	adds	r3, r3, r6
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2209      	movs	r2, #9
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	4a32      	ldr	r2, [pc, #200]	; (8005b48 <calc_sheep_id+0x248>)
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	18d3      	adds	r3, r2, r3
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	0020      	movs	r0, r4
 8005a88:	0029      	movs	r1, r5
 8005a8a:	f7fa fce3 	bl	8000454 <__aeabi_lmul>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	000b      	movs	r3, r1
 8005a92:	0010      	movs	r0, r2
 8005a94:	0019      	movs	r1, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1812      	adds	r2, r2, r0
 8005a9c:	414b      	adcs	r3, r1
 8005a9e:	613a      	str	r2, [r7, #16]
 8005aa0:	617b      	str	r3, [r7, #20]
			for(p=0; p<10; p++)
 8005aa2:	2108      	movs	r1, #8
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	199b      	adds	r3, r3, r6
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	199b      	adds	r3, r3, r6
 8005aae:	3201      	adds	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	2017      	movs	r0, #23
 8005ab4:	2608      	movs	r6, #8
 8005ab6:	19bb      	adds	r3, r7, r6
 8005ab8:	181b      	adds	r3, r3, r0
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d9c7      	bls.n	8005a50 <calc_sheep_id+0x150>
			sheep_ID = ID;
 8005ac0:	4922      	ldr	r1, [pc, #136]	; (8005b4c <calc_sheep_id+0x24c>)
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	600a      	str	r2, [r1, #0]
 8005ac8:	604b      	str	r3, [r1, #4]
			for (p=0; p<4; p++)
 8005aca:	19bb      	adds	r3, r7, r6
 8005acc:	181b      	adds	r3, r3, r0
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	e025      	b.n	8005b20 <calc_sheep_id+0x220>
				country = country + ((ascii_hex_to_dec(RX_data[14-p]))*pow_const[3-p]);
 8005ad4:	2417      	movs	r4, #23
 8005ad6:	2508      	movs	r5, #8
 8005ad8:	197b      	adds	r3, r7, r5
 8005ada:	191b      	adds	r3, r3, r4
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	220e      	movs	r2, #14
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <calc_sheep_id+0x244>)
 8005ae4:	5cd3      	ldrb	r3, [r2, r3]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7ff fee6 	bl	80058b8 <ascii_hex_to_dec>
 8005aec:	0003      	movs	r3, r0
 8005aee:	0019      	movs	r1, r3
 8005af0:	0020      	movs	r0, r4
 8005af2:	002c      	movs	r4, r5
 8005af4:	193b      	adds	r3, r7, r4
 8005af6:	181b      	adds	r3, r3, r0
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2203      	movs	r2, #3
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <calc_sheep_id+0x248>)
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	18d3      	adds	r3, r2, r3
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	0013      	movs	r3, r2
 8005b0a:	434b      	muls	r3, r1
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	60fb      	str	r3, [r7, #12]
			for (p=0; p<4; p++)
 8005b12:	193b      	adds	r3, r7, r4
 8005b14:	181b      	adds	r3, r3, r0
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	181b      	adds	r3, r3, r0
 8005b1c:	3201      	adds	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	2317      	movs	r3, #23
 8005b22:	2208      	movs	r2, #8
 8005b24:	4694      	mov	ip, r2
 8005b26:	44bc      	add	ip, r7
 8005b28:	4463      	add	r3, ip
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d9d1      	bls.n	8005ad4 <calc_sheep_id+0x1d4>
			country_ID = country;
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <calc_sheep_id+0x250>)
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b009      	add	sp, #36	; 0x24
 8005b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	48000400 	.word	0x48000400
 8005b44:	200002d4 	.word	0x200002d4
 8005b48:	20000040 	.word	0x20000040
 8005b4c:	20005818 	.word	0x20005818
 8005b50:	20005820 	.word	0x20005820

08005b54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart2.Instance)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b49      	ldr	r3, [pc, #292]	; (8005c88 <HAL_UART_RxCpltCallback+0x134>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d119      	bne.n	8005b9c <HAL_UART_RxCpltCallback+0x48>
	{
		//HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
		rx_complete = 1;
 8005b68:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <HAL_UART_RxCpltCallback+0x138>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	701a      	strb	r2, [r3, #0]
	    if (HAL_GPIO_ReadPin(READER_TYPE_GPIO_Port, READER_TYPE_Pin) == GPIO_PIN_SET)
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4a47      	ldr	r2, [pc, #284]	; (8005c90 <HAL_UART_RxCpltCallback+0x13c>)
 8005b74:	0019      	movs	r1, r3
 8005b76:	0010      	movs	r0, r2
 8005b78:	f002 f87e 	bl	8007c78 <HAL_GPIO_ReadPin>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d106      	bne.n	8005b90 <HAL_UART_RxCpltCallback+0x3c>
	    	HAL_UART_Receive_IT(&huart2, RX_data, 18);					//small antenna reader
 8005b82:	4944      	ldr	r1, [pc, #272]	; (8005c94 <HAL_UART_RxCpltCallback+0x140>)
 8005b84:	4b40      	ldr	r3, [pc, #256]	; (8005c88 <HAL_UART_RxCpltCallback+0x134>)
 8005b86:	2212      	movs	r2, #18
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f004 fbd7 	bl	800a33c <HAL_UART_Receive_IT>
 8005b8e:	e005      	b.n	8005b9c <HAL_UART_RxCpltCallback+0x48>
	    else
	    	HAL_UART_Receive_IT(&huart2, RX_data, 30);					//big antenna reader
 8005b90:	4940      	ldr	r1, [pc, #256]	; (8005c94 <HAL_UART_RxCpltCallback+0x140>)
 8005b92:	4b3d      	ldr	r3, [pc, #244]	; (8005c88 <HAL_UART_RxCpltCallback+0x134>)
 8005b94:	221e      	movs	r2, #30
 8005b96:	0018      	movs	r0, r3
 8005b98:	f004 fbd0 	bl	800a33c <HAL_UART_Receive_IT>
	}
	if (UartHandle->Instance == huart5.Instance)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <HAL_UART_RxCpltCallback+0x144>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d16b      	bne.n	8005c80 <HAL_UART_RxCpltCallback+0x12c>
	{	//Thh:mm_dd.mm.yy
		if ((RX_Time[0] == 'T') && (RX_Time[3]==':') && (RX_Time[9]=='.'))
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b54      	cmp	r3, #84	; 0x54
 8005bae:	d10a      	bne.n	8005bc6 <HAL_UART_RxCpltCallback+0x72>
 8005bb0:	4b3a      	ldr	r3, [pc, #232]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	2b3a      	cmp	r3, #58	; 0x3a
 8005bb6:	d106      	bne.n	8005bc6 <HAL_UART_RxCpltCallback+0x72>
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005bba:	7a5b      	ldrb	r3, [r3, #9]
 8005bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bbe:	d102      	bne.n	8005bc6 <HAL_UART_RxCpltCallback+0x72>
		RealTime.seconds=0;
 8005bc0:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <HAL_UART_RxCpltCallback+0x14c>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
		RealTime.hours = ((RX_Time[1]-48)*10)+(RX_Time[2]-48);
 8005bc6:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	1c1a      	adds	r2, r3, #0
 8005bcc:	0092      	lsls	r2, r2, #2
 8005bce:	18d3      	adds	r3, r2, r3
 8005bd0:	18db      	adds	r3, r3, r3
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	4b31      	ldr	r3, [pc, #196]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005bd6:	789b      	ldrb	r3, [r3, #2]
 8005bd8:	18d3      	adds	r3, r2, r3
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	3b10      	subs	r3, #16
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <HAL_UART_RxCpltCallback+0x14c>)
 8005be2:	709a      	strb	r2, [r3, #2]
		RealTime.minutes = ((RX_Time[4]-48)*10)+(RX_Time[5]-48);
 8005be4:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005be6:	791b      	ldrb	r3, [r3, #4]
 8005be8:	1c1a      	adds	r2, r3, #0
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	18d3      	adds	r3, r2, r3
 8005bee:	18db      	adds	r3, r3, r3
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005bf4:	795b      	ldrb	r3, [r3, #5]
 8005bf6:	18d3      	adds	r3, r2, r3
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	3b10      	subs	r3, #16
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <HAL_UART_RxCpltCallback+0x14c>)
 8005c00:	705a      	strb	r2, [r3, #1]
		RealTime.date = ((RX_Time[7]-48)*10)+(RX_Time[8]-48);
 8005c02:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c04:	79db      	ldrb	r3, [r3, #7]
 8005c06:	1c1a      	adds	r2, r3, #0
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	18d3      	adds	r3, r2, r3
 8005c0c:	18db      	adds	r3, r3, r3
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c12:	7a1b      	ldrb	r3, [r3, #8]
 8005c14:	18d3      	adds	r3, r2, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	3b10      	subs	r3, #16
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <HAL_UART_RxCpltCallback+0x14c>)
 8005c1e:	70da      	strb	r2, [r3, #3]
		RealTime.month = ((RX_Time[10]-48)*10)+(RX_Time[11]-48);
 8005c20:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c22:	7a9b      	ldrb	r3, [r3, #10]
 8005c24:	1c1a      	adds	r2, r3, #0
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	18db      	adds	r3, r3, r3
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c30:	7adb      	ldrb	r3, [r3, #11]
 8005c32:	18d3      	adds	r3, r2, r3
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	3b10      	subs	r3, #16
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <HAL_UART_RxCpltCallback+0x14c>)
 8005c3c:	711a      	strb	r2, [r3, #4]
		RealTime.year = ((RX_Time[13]-48)*10)+(RX_Time[14]-48);
 8005c3e:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c40:	7b5b      	ldrb	r3, [r3, #13]
 8005c42:	1c1a      	adds	r2, r3, #0
 8005c44:	0092      	lsls	r2, r2, #2
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	18db      	adds	r3, r3, r3
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c4e:	7b9b      	ldrb	r3, [r3, #14]
 8005c50:	18d3      	adds	r3, r2, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	3b10      	subs	r3, #16
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_UART_RxCpltCallback+0x14c>)
 8005c5a:	715a      	strb	r2, [r3, #5]
		time_set(&hi2c1);
 8005c5c:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <HAL_UART_RxCpltCallback+0x150>)
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f7fa fe24 	bl	80008ac <time_set>
		time_alarm_reset(&hi2c1);
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <HAL_UART_RxCpltCallback+0x150>)
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7fa ff02 	bl	8000a70 <time_alarm_reset>
		time_oscilator_stop_flag_reset(&hi2c1);
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_UART_RxCpltCallback+0x150>)
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7fa ff3e 	bl	8000af0 <time_oscilator_stop_flag_reset>
		HAL_UART_Receive_IT(&huart5, RX_Time, 15);
 8005c74:	4909      	ldr	r1, [pc, #36]	; (8005c9c <HAL_UART_RxCpltCallback+0x148>)
 8005c76:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <HAL_UART_RxCpltCallback+0x144>)
 8005c78:	220f      	movs	r2, #15
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f004 fb5e 	bl	800a33c <HAL_UART_Receive_IT>
	}
}
 8005c80:	46c0      	nop			; (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2000578c 	.word	0x2000578c
 8005c8c:	20000144 	.word	0x20000144
 8005c90:	48000400 	.word	0x48000400
 8005c94:	200002d4 	.word	0x200002d4
 8005c98:	20000304 	.word	0x20000304
 8005c9c:	200002f4 	.word	0x200002f4
 8005ca0:	20000170 	.word	0x20000170
 8005ca4:	20000204 	.word	0x20000204

08005ca8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	0002      	movs	r2, r0
 8005cb0:	1dbb      	adds	r3, r7, #6
 8005cb2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BUTTON_Pin)
 8005cb4:	1dbb      	adds	r3, r7, #6
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d10b      	bne.n	8005cd4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		timestamp_button = HAL_GetTick();
 8005cbc:	f001 fbe0 	bl	8007480 <HAL_GetTick>
 8005cc0:	0002      	movs	r2, r0
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_GPIO_EXTI_Callback+0x68>)
 8005cc4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin);
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005ccc:	0019      	movs	r1, r3
 8005cce:	0010      	movs	r0, r2
 8005cd0:	f002 f80c 	bl	8007cec <HAL_GPIO_TogglePin>
	}
	if (GPIO_Pin == SD_CD_Pin)
 8005cd4:	1dbb      	adds	r3, r7, #6
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	015b      	lsls	r3, r3, #5
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d113      	bne.n	8005d08 <HAL_GPIO_EXTI_Callback+0x60>
	{
		disp_refresh = 1;
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <HAL_GPIO_EXTI_Callback+0x70>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin) == GPIO_PIN_SET)
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	015b      	lsls	r3, r3, #5
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005cec:	0019      	movs	r1, r3
 8005cee:	0010      	movs	r0, r2
 8005cf0:	f001 ffc2 	bl	8007c78 <HAL_GPIO_ReadPin>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d103      	bne.n	8005d02 <HAL_GPIO_EXTI_Callback+0x5a>
			SD_flag = 0;
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <HAL_GPIO_EXTI_Callback+0x74>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
		else
		{
			SD_flag = 1;
		}
	}
}
 8005d00:	e002      	b.n	8005d08 <HAL_GPIO_EXTI_Callback+0x60>
			SD_flag = 1;
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_GPIO_EXTI_Callback+0x74>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b002      	add	sp, #8
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2000014c 	.word	0x2000014c
 8005d14:	48000400 	.word	0x48000400
 8005d18:	20000090 	.word	0x20000090
 8005d1c:	20000146 	.word	0x20000146

08005d20 <number_to_string>:
uint8_t number_to_string(uint64_t ID, uint32_t country_ID, uint8_t* string)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60b8      	str	r0, [r7, #8]
 8005d28:	60f9      	str	r1, [r7, #12]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	uint8_t n, p, zero = 0;
 8005d2e:	231d      	movs	r3, #29
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
	uint64_t z = 100000000000;
 8005d36:	4a39      	ldr	r2, [pc, #228]	; (8005e1c <number_to_string+0xfc>)
 8005d38:	2317      	movs	r3, #23
 8005d3a:	613a      	str	r2, [r7, #16]
 8005d3c:	617b      	str	r3, [r7, #20]

	//n = sprintf(string,"%d-%d-%d;", 1, 1, 1);
	put_country_ID(country_ID, string);
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0011      	movs	r1, r2
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fa ff85 	bl	8000c54 <put_country_ID>
	n=2;
 8005d4a:	231f      	movs	r3, #31
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	2202      	movs	r2, #2
 8005d50:	701a      	strb	r2, [r3, #0]

	for(p=0; p<12 ;p++)
 8005d52:	231e      	movs	r3, #30
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	e04a      	b.n	8005df2 <number_to_string+0xd2>
	{
		string[n] = (ID/z)+48;
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	68b8      	ldr	r0, [r7, #8]
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f7fa fb56 	bl	8000414 <__aeabi_uldivmod>
 8005d68:	0002      	movs	r2, r0
 8005d6a:	000b      	movs	r3, r1
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	201f      	movs	r0, #31
 8005d70:	183b      	adds	r3, r7, r0
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	18cb      	adds	r3, r1, r3
 8005d78:	3230      	adds	r2, #48	; 0x30
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
		if ((string[n] != 48))
 8005d7e:	183b      	adds	r3, r7, r0
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	18d3      	adds	r3, r2, r3
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d003      	beq.n	8005d94 <number_to_string+0x74>
			zero = 1;
 8005d8c:	231d      	movs	r3, #29
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
		if (zero)
 8005d94:	231d      	movs	r3, #29
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <number_to_string+0x8a>
			n++;
 8005d9e:	211f      	movs	r1, #31
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	187b      	adds	r3, r7, r1
 8005da6:	3201      	adds	r2, #1
 8005da8:	701a      	strb	r2, [r3, #0]
		if (ID/z)
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d80f      	bhi.n	8005dd2 <number_to_string+0xb2>
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d103      	bne.n	8005dc2 <number_to_string+0xa2>
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d807      	bhi.n	8005dd2 <number_to_string+0xb2>
		{
			ID = ID%z;
 8005dc2:	68b8      	ldr	r0, [r7, #8]
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f7fa fb23 	bl	8000414 <__aeabi_uldivmod>
 8005dce:	60ba      	str	r2, [r7, #8]
 8005dd0:	60fb      	str	r3, [r7, #12]
		}

		z = z/10;
 8005dd2:	6938      	ldr	r0, [r7, #16]
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	220a      	movs	r2, #10
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f7fa fb1b 	bl	8000414 <__aeabi_uldivmod>
 8005dde:	0002      	movs	r2, r0
 8005de0:	000b      	movs	r3, r1
 8005de2:	613a      	str	r2, [r7, #16]
 8005de4:	617b      	str	r3, [r7, #20]
	for(p=0; p<12 ;p++)
 8005de6:	211e      	movs	r1, #30
 8005de8:	187b      	adds	r3, r7, r1
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	187b      	adds	r3, r7, r1
 8005dee:	3201      	adds	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	231e      	movs	r3, #30
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b0b      	cmp	r3, #11
 8005dfa:	d9af      	bls.n	8005d5c <number_to_string+0x3c>
	}
	string[n] = 0;
 8005dfc:	211f      	movs	r1, #31
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
	return n++; //pocet znakov
 8005e0a:	187b      	adds	r3, r7, r1
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	187a      	adds	r2, r7, r1
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	7011      	strb	r1, [r2, #0]
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b008      	add	sp, #32
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	4876e800 	.word	0x4876e800

08005e20 <Refresh_display>:
void Refresh_display()
{
 8005e20:	b5b0      	push	{r4, r5, r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af02      	add	r7, sp, #8
	char string[12];
	uint16_t v_bat = 0;
 8005e26:	240c      	movs	r4, #12
 8005e28:	193b      	adds	r3, r7, r4
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	801a      	strh	r2, [r3, #0]
	uint8_t h_pos = 0;
 8005e2e:	250f      	movs	r5, #15
 8005e30:	197b      	adds	r3, r7, r5
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
	//BAT0_Icon 31x15
	//BAT1_Icon  31x15
	//BAT2_Icon  31x15
	//BAT3_Icon 31x15

	timestamp_time = HAL_GetTick();
 8005e36:	f001 fb23 	bl	8007480 <HAL_GetTick>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	4bd0      	ldr	r3, [pc, #832]	; (8006180 <Refresh_display+0x360>)
 8005e3e:	601a      	str	r2, [r3, #0]
	v_bat = BQ25890_read_bat_voltage(&hi2c1);
 8005e40:	193c      	adds	r4, r7, r4
 8005e42:	4bd0      	ldr	r3, [pc, #832]	; (8006184 <Refresh_display+0x364>)
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7fa fed6 	bl	8000bf6 <BQ25890_read_bat_voltage>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	8023      	strh	r3, [r4, #0]
	time_read(&hi2c1);
 8005e4e:	4bcd      	ldr	r3, [pc, #820]	; (8006184 <Refresh_display+0x364>)
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7fa fc61 	bl	8000718 <time_read>

	Paint_Init(&paint, frame_buffer, epd.width, epd.height);
 8005e56:	4bcc      	ldr	r3, [pc, #816]	; (8006188 <Refresh_display+0x368>)
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	4bcb      	ldr	r3, [pc, #812]	; (8006188 <Refresh_display+0x368>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	49cb      	ldr	r1, [pc, #812]	; (800618c <Refresh_display+0x36c>)
 8005e60:	48cb      	ldr	r0, [pc, #812]	; (8006190 <Refresh_display+0x370>)
 8005e62:	f7fd f815 	bl	8002e90 <Paint_Init>
	Paint_Clear(&paint, UNCOLORED);
 8005e66:	4bca      	ldr	r3, [pc, #808]	; (8006190 <Refresh_display+0x370>)
 8005e68:	2101      	movs	r1, #1
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7fd f83c 	bl	8002ee8 <Paint_Clear>
	Paint_DrawHorizontalLine(&paint, 0, 16, 200, COLORED);	//prva z hora horizontalna
 8005e70:	48c7      	ldr	r0, [pc, #796]	; (8006190 <Refresh_display+0x370>)
 8005e72:	2300      	movs	r3, #0
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	23c8      	movs	r3, #200	; 0xc8
 8005e78:	2210      	movs	r2, #16
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f7fd fabb 	bl	80033f6 <Paint_DrawHorizontalLine>
	Paint_DrawHorizontalLine(&paint, 0, 182, 200, COLORED); //prva z dola horizontalna
 8005e80:	48c3      	ldr	r0, [pc, #780]	; (8006190 <Refresh_display+0x370>)
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	23c8      	movs	r3, #200	; 0xc8
 8005e88:	22b6      	movs	r2, #182	; 0xb6
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f7fd fab3 	bl	80033f6 <Paint_DrawHorizontalLine>

	sprintf(string, "%d:%02d", RealTime.hours, RealTime.minutes);
 8005e90:	4bc0      	ldr	r3, [pc, #768]	; (8006194 <Refresh_display+0x374>)
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	001a      	movs	r2, r3
 8005e96:	4bbf      	ldr	r3, [pc, #764]	; (8006194 <Refresh_display+0x374>)
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	49bf      	ldr	r1, [pc, #764]	; (8006198 <Refresh_display+0x378>)
 8005e9c:	0038      	movs	r0, r7
 8005e9e:	f005 fc19 	bl	800b6d4 <siprintf>
	if (RealTime.hours < 10)
 8005ea2:	4bbc      	ldr	r3, [pc, #752]	; (8006194 <Refresh_display+0x374>)
 8005ea4:	789b      	ldrb	r3, [r3, #2]
 8005ea6:	2b09      	cmp	r3, #9
 8005ea8:	d804      	bhi.n	8005eb4 <Refresh_display+0x94>
		h_pos = h_pos +11;
 8005eaa:	197b      	adds	r3, r7, r5
 8005eac:	197a      	adds	r2, r7, r5
 8005eae:	7812      	ldrb	r2, [r2, #0]
 8005eb0:	320b      	adds	r2, #11
 8005eb2:	701a      	strb	r2, [r3, #0]
	Paint_DrawStringAt(&paint, 142+h_pos, 2, string, &Font16, COLORED);
 8005eb4:	250f      	movs	r5, #15
 8005eb6:	197b      	adds	r3, r7, r5
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	338e      	adds	r3, #142	; 0x8e
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	003a      	movs	r2, r7
 8005ec0:	48b3      	ldr	r0, [pc, #716]	; (8006190 <Refresh_display+0x370>)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	4bb5      	ldr	r3, [pc, #724]	; (800619c <Refresh_display+0x37c>)
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	0013      	movs	r3, r2
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f7fd fa63 	bl	8003398 <Paint_DrawStringAt>
	Paint_DrawStringAt(&paint, 6, 186, "V1.0", &Font12, COLORED);
 8005ed2:	4ab3      	ldr	r2, [pc, #716]	; (80061a0 <Refresh_display+0x380>)
 8005ed4:	48ae      	ldr	r0, [pc, #696]	; (8006190 <Refresh_display+0x370>)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	4bb2      	ldr	r3, [pc, #712]	; (80061a4 <Refresh_display+0x384>)
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	0013      	movs	r3, r2
 8005ee0:	22ba      	movs	r2, #186	; 0xba
 8005ee2:	2106      	movs	r1, #6
 8005ee4:	f7fd fa58 	bl	8003398 <Paint_DrawStringAt>
	sprintf(string, "%d.%d.20%d", RealTime.date, RealTime.month, RealTime.year);
 8005ee8:	4baa      	ldr	r3, [pc, #680]	; (8006194 <Refresh_display+0x374>)
 8005eea:	78db      	ldrb	r3, [r3, #3]
 8005eec:	001a      	movs	r2, r3
 8005eee:	4ba9      	ldr	r3, [pc, #676]	; (8006194 <Refresh_display+0x374>)
 8005ef0:	791b      	ldrb	r3, [r3, #4]
 8005ef2:	001c      	movs	r4, r3
 8005ef4:	4ba7      	ldr	r3, [pc, #668]	; (8006194 <Refresh_display+0x374>)
 8005ef6:	795b      	ldrb	r3, [r3, #5]
 8005ef8:	49ab      	ldr	r1, [pc, #684]	; (80061a8 <Refresh_display+0x388>)
 8005efa:	0038      	movs	r0, r7
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	0023      	movs	r3, r4
 8005f00:	f005 fbe8 	bl	800b6d4 <siprintf>
	h_pos = 0;
 8005f04:	197b      	adds	r3, r7, r5
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
	if (RealTime.date < 10)
 8005f0a:	4ba2      	ldr	r3, [pc, #648]	; (8006194 <Refresh_display+0x374>)
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	d804      	bhi.n	8005f1c <Refresh_display+0xfc>
		h_pos = h_pos +11;
 8005f12:	197b      	adds	r3, r7, r5
 8005f14:	197a      	adds	r2, r7, r5
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	320b      	adds	r2, #11
 8005f1a:	701a      	strb	r2, [r3, #0]
	if (RealTime.month < 10)
 8005f1c:	4b9d      	ldr	r3, [pc, #628]	; (8006194 <Refresh_display+0x374>)
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d805      	bhi.n	8005f30 <Refresh_display+0x110>
		h_pos = h_pos +11;
 8005f24:	220f      	movs	r2, #15
 8005f26:	18bb      	adds	r3, r7, r2
 8005f28:	18ba      	adds	r2, r7, r2
 8005f2a:	7812      	ldrb	r2, [r2, #0]
 8005f2c:	320b      	adds	r2, #11
 8005f2e:	701a      	strb	r2, [r3, #0]
	Paint_DrawStringAt(&paint, 90+h_pos, 185, string, &Font16, COLORED);
 8005f30:	230f      	movs	r3, #15
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	335a      	adds	r3, #90	; 0x5a
 8005f38:	0019      	movs	r1, r3
 8005f3a:	003a      	movs	r2, r7
 8005f3c:	4894      	ldr	r0, [pc, #592]	; (8006190 <Refresh_display+0x370>)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	4b96      	ldr	r3, [pc, #600]	; (800619c <Refresh_display+0x37c>)
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	0013      	movs	r3, r2
 8005f48:	22b9      	movs	r2, #185	; 0xb9
 8005f4a:	f7fd fa25 	bl	8003398 <Paint_DrawStringAt>

	if (v_bat >= U_TRESHOLD_1)
 8005f4e:	230c      	movs	r3, #12
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	4a95      	ldr	r2, [pc, #596]	; (80061ac <Refresh_display+0x38c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d909      	bls.n	8005f6e <Refresh_display+0x14e>
		Paint_ImageFromMemory(&paint, BAT3_Icon, 3, 0, 31, 15);
 8005f5a:	4995      	ldr	r1, [pc, #596]	; (80061b0 <Refresh_display+0x390>)
 8005f5c:	488c      	ldr	r0, [pc, #560]	; (8006190 <Refresh_display+0x370>)
 8005f5e:	230f      	movs	r3, #15
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	231f      	movs	r3, #31
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	2300      	movs	r3, #0
 8005f68:	2203      	movs	r2, #3
 8005f6a:	f7fd fa62 	bl	8003432 <Paint_ImageFromMemory>
	if ((v_bat >= U_TRESHOLD_2) && ((v_bat < U_TRESHOLD_1)))
 8005f6e:	210c      	movs	r1, #12
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	4a8f      	ldr	r2, [pc, #572]	; (80061b4 <Refresh_display+0x394>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d90e      	bls.n	8005f98 <Refresh_display+0x178>
 8005f7a:	187b      	adds	r3, r7, r1
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	4a8b      	ldr	r2, [pc, #556]	; (80061ac <Refresh_display+0x38c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d809      	bhi.n	8005f98 <Refresh_display+0x178>
		Paint_ImageFromMemory(&paint, BAT2_Icon, 3, 0, 31, 15);
 8005f84:	498c      	ldr	r1, [pc, #560]	; (80061b8 <Refresh_display+0x398>)
 8005f86:	4882      	ldr	r0, [pc, #520]	; (8006190 <Refresh_display+0x370>)
 8005f88:	230f      	movs	r3, #15
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	231f      	movs	r3, #31
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2300      	movs	r3, #0
 8005f92:	2203      	movs	r2, #3
 8005f94:	f7fd fa4d 	bl	8003432 <Paint_ImageFromMemory>
	if ((v_bat >= U_TRESHOLD_3) && ((v_bat < U_TRESHOLD_2)))
 8005f98:	210c      	movs	r1, #12
 8005f9a:	187b      	adds	r3, r7, r1
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	4a87      	ldr	r2, [pc, #540]	; (80061bc <Refresh_display+0x39c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d90e      	bls.n	8005fc2 <Refresh_display+0x1a2>
 8005fa4:	187b      	adds	r3, r7, r1
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	4a82      	ldr	r2, [pc, #520]	; (80061b4 <Refresh_display+0x394>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d809      	bhi.n	8005fc2 <Refresh_display+0x1a2>
		Paint_ImageFromMemory(&paint, BAT1_Icon, 3, 0, 31, 15);
 8005fae:	4984      	ldr	r1, [pc, #528]	; (80061c0 <Refresh_display+0x3a0>)
 8005fb0:	4877      	ldr	r0, [pc, #476]	; (8006190 <Refresh_display+0x370>)
 8005fb2:	230f      	movs	r3, #15
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	231f      	movs	r3, #31
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	f7fd fa38 	bl	8003432 <Paint_ImageFromMemory>
	if (v_bat < U_TRESHOLD_3)
 8005fc2:	230c      	movs	r3, #12
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	4a7c      	ldr	r2, [pc, #496]	; (80061bc <Refresh_display+0x39c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d809      	bhi.n	8005fe2 <Refresh_display+0x1c2>
		Paint_ImageFromMemory(&paint, BAT0_Icon, 3, 0, 31, 15);
 8005fce:	497d      	ldr	r1, [pc, #500]	; (80061c4 <Refresh_display+0x3a4>)
 8005fd0:	486f      	ldr	r0, [pc, #444]	; (8006190 <Refresh_display+0x370>)
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	231f      	movs	r3, #31
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2203      	movs	r2, #3
 8005fde:	f7fd fa28 	bl	8003432 <Paint_ImageFromMemory>
	if (BT_flag)
 8005fe2:	4b79      	ldr	r3, [pc, #484]	; (80061c8 <Refresh_display+0x3a8>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <Refresh_display+0x1de>
		Paint_ImageFromMemory(&paint, BT_Icon, 43, 0, 9, 14);
 8005fea:	4978      	ldr	r1, [pc, #480]	; (80061cc <Refresh_display+0x3ac>)
 8005fec:	4868      	ldr	r0, [pc, #416]	; (8006190 <Refresh_display+0x370>)
 8005fee:	230e      	movs	r3, #14
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2309      	movs	r3, #9
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	222b      	movs	r2, #43	; 0x2b
 8005ffa:	f7fd fa1a 	bl	8003432 <Paint_ImageFromMemory>
	if (SD_flag)
 8005ffe:	4b74      	ldr	r3, [pc, #464]	; (80061d0 <Refresh_display+0x3b0>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <Refresh_display+0x1fa>
		Paint_ImageFromMemory(&paint, SD_Icon, 60, 0, 12, 15);
 8006006:	4973      	ldr	r1, [pc, #460]	; (80061d4 <Refresh_display+0x3b4>)
 8006008:	4861      	ldr	r0, [pc, #388]	; (8006190 <Refresh_display+0x370>)
 800600a:	230f      	movs	r3, #15
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	230c      	movs	r3, #12
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	2300      	movs	r3, #0
 8006014:	223c      	movs	r2, #60	; 0x3c
 8006016:	f7fd fa0c 	bl	8003432 <Paint_ImageFromMemory>
	if (SD_error_flag)
 800601a:	4b6f      	ldr	r3, [pc, #444]	; (80061d8 <Refresh_display+0x3b8>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <Refresh_display+0x216>
		Paint_DrawCharAt(&paint, 70, 0, '!', &Font20, COLORED);
 8006022:	485b      	ldr	r0, [pc, #364]	; (8006190 <Refresh_display+0x370>)
 8006024:	2300      	movs	r3, #0
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	4b6c      	ldr	r3, [pc, #432]	; (80061dc <Refresh_display+0x3bc>)
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2321      	movs	r3, #33	; 0x21
 800602e:	2200      	movs	r2, #0
 8006030:	2146      	movs	r1, #70	; 0x46
 8006032:	f7fd f923 	bl	800327c <Paint_DrawCharAt>

	Paint_DrawStringAt(&paint, 0, 26, TAG_ID[TAG_pointer], &Font20, COLORED);
 8006036:	4b6a      	ldr	r3, [pc, #424]	; (80061e0 <Refresh_display+0x3c0>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	001a      	movs	r2, r3
 800603c:	0013      	movs	r3, r2
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	4a68      	ldr	r2, [pc, #416]	; (80061e4 <Refresh_display+0x3c4>)
 8006044:	189a      	adds	r2, r3, r2
 8006046:	4852      	ldr	r0, [pc, #328]	; (8006190 <Refresh_display+0x370>)
 8006048:	2300      	movs	r3, #0
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	4b63      	ldr	r3, [pc, #396]	; (80061dc <Refresh_display+0x3bc>)
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	0013      	movs	r3, r2
 8006052:	221a      	movs	r2, #26
 8006054:	2100      	movs	r1, #0
 8006056:	f7fd f99f 	bl	8003398 <Paint_DrawStringAt>
	Paint_DrawStringAt(&paint, 0, 52, TAG_ID[(TAG_pointer+5)%6], &Font20, COLORED);
 800605a:	4b61      	ldr	r3, [pc, #388]	; (80061e0 <Refresh_display+0x3c0>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	3305      	adds	r3, #5
 8006060:	2106      	movs	r1, #6
 8006062:	0018      	movs	r0, r3
 8006064:	f7fa f9d0 	bl	8000408 <__aeabi_idivmod>
 8006068:	000b      	movs	r3, r1
 800606a:	001a      	movs	r2, r3
 800606c:	0013      	movs	r3, r2
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	4a5c      	ldr	r2, [pc, #368]	; (80061e4 <Refresh_display+0x3c4>)
 8006074:	189a      	adds	r2, r3, r2
 8006076:	4846      	ldr	r0, [pc, #280]	; (8006190 <Refresh_display+0x370>)
 8006078:	2300      	movs	r3, #0
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	4b57      	ldr	r3, [pc, #348]	; (80061dc <Refresh_display+0x3bc>)
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	0013      	movs	r3, r2
 8006082:	2234      	movs	r2, #52	; 0x34
 8006084:	2100      	movs	r1, #0
 8006086:	f7fd f987 	bl	8003398 <Paint_DrawStringAt>
	Paint_DrawStringAt(&paint, 0, 78, TAG_ID[(TAG_pointer+4)%6], &Font20, COLORED);
 800608a:	4b55      	ldr	r3, [pc, #340]	; (80061e0 <Refresh_display+0x3c0>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	3304      	adds	r3, #4
 8006090:	2106      	movs	r1, #6
 8006092:	0018      	movs	r0, r3
 8006094:	f7fa f9b8 	bl	8000408 <__aeabi_idivmod>
 8006098:	000b      	movs	r3, r1
 800609a:	001a      	movs	r2, r3
 800609c:	0013      	movs	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	4a50      	ldr	r2, [pc, #320]	; (80061e4 <Refresh_display+0x3c4>)
 80060a4:	189a      	adds	r2, r3, r2
 80060a6:	483a      	ldr	r0, [pc, #232]	; (8006190 <Refresh_display+0x370>)
 80060a8:	2300      	movs	r3, #0
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	4b4b      	ldr	r3, [pc, #300]	; (80061dc <Refresh_display+0x3bc>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	0013      	movs	r3, r2
 80060b2:	224e      	movs	r2, #78	; 0x4e
 80060b4:	2100      	movs	r1, #0
 80060b6:	f7fd f96f 	bl	8003398 <Paint_DrawStringAt>
	Paint_DrawStringAt(&paint, 0, 104, TAG_ID[(TAG_pointer+3)%6], &Font20, COLORED);
 80060ba:	4b49      	ldr	r3, [pc, #292]	; (80061e0 <Refresh_display+0x3c0>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	3303      	adds	r3, #3
 80060c0:	2106      	movs	r1, #6
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7fa f9a0 	bl	8000408 <__aeabi_idivmod>
 80060c8:	000b      	movs	r3, r1
 80060ca:	001a      	movs	r2, r3
 80060cc:	0013      	movs	r3, r2
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	4a44      	ldr	r2, [pc, #272]	; (80061e4 <Refresh_display+0x3c4>)
 80060d4:	189a      	adds	r2, r3, r2
 80060d6:	482e      	ldr	r0, [pc, #184]	; (8006190 <Refresh_display+0x370>)
 80060d8:	2300      	movs	r3, #0
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <Refresh_display+0x3bc>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	0013      	movs	r3, r2
 80060e2:	2268      	movs	r2, #104	; 0x68
 80060e4:	2100      	movs	r1, #0
 80060e6:	f7fd f957 	bl	8003398 <Paint_DrawStringAt>
	Paint_DrawStringAt(&paint, 0, 130, TAG_ID[(TAG_pointer+2)%6], &Font20, COLORED);
 80060ea:	4b3d      	ldr	r3, [pc, #244]	; (80061e0 <Refresh_display+0x3c0>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	3302      	adds	r3, #2
 80060f0:	2106      	movs	r1, #6
 80060f2:	0018      	movs	r0, r3
 80060f4:	f7fa f988 	bl	8000408 <__aeabi_idivmod>
 80060f8:	000b      	movs	r3, r1
 80060fa:	001a      	movs	r2, r3
 80060fc:	0013      	movs	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	4a38      	ldr	r2, [pc, #224]	; (80061e4 <Refresh_display+0x3c4>)
 8006104:	189a      	adds	r2, r3, r2
 8006106:	4822      	ldr	r0, [pc, #136]	; (8006190 <Refresh_display+0x370>)
 8006108:	2300      	movs	r3, #0
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	4b33      	ldr	r3, [pc, #204]	; (80061dc <Refresh_display+0x3bc>)
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	0013      	movs	r3, r2
 8006112:	2282      	movs	r2, #130	; 0x82
 8006114:	2100      	movs	r1, #0
 8006116:	f7fd f93f 	bl	8003398 <Paint_DrawStringAt>
	Paint_DrawStringAt(&paint, 0, 156, TAG_ID[(TAG_pointer+1)%6], &Font20, COLORED);
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <Refresh_display+0x3c0>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	2106      	movs	r1, #6
 8006122:	0018      	movs	r0, r3
 8006124:	f7fa f970 	bl	8000408 <__aeabi_idivmod>
 8006128:	000b      	movs	r3, r1
 800612a:	001a      	movs	r2, r3
 800612c:	0013      	movs	r3, r2
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	4a2c      	ldr	r2, [pc, #176]	; (80061e4 <Refresh_display+0x3c4>)
 8006134:	189a      	adds	r2, r3, r2
 8006136:	4816      	ldr	r0, [pc, #88]	; (8006190 <Refresh_display+0x370>)
 8006138:	2300      	movs	r3, #0
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <Refresh_display+0x3bc>)
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	0013      	movs	r3, r2
 8006142:	229c      	movs	r2, #156	; 0x9c
 8006144:	2100      	movs	r1, #0
 8006146:	f7fd f927 	bl	8003398 <Paint_DrawStringAt>

	EPD_SetFrameMemory(&epd, frame_buffer, 0, 0, Paint_GetWidth(&paint), Paint_GetHeight(&paint));
 800614a:	4b11      	ldr	r3, [pc, #68]	; (8006190 <Refresh_display+0x370>)
 800614c:	0018      	movs	r0, r3
 800614e:	f7fc ff8d 	bl	800306c <Paint_GetWidth>
 8006152:	0004      	movs	r4, r0
 8006154:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <Refresh_display+0x370>)
 8006156:	0018      	movs	r0, r3
 8006158:	f7fc ff92 	bl	8003080 <Paint_GetHeight>
 800615c:	0003      	movs	r3, r0
 800615e:	490b      	ldr	r1, [pc, #44]	; (800618c <Refresh_display+0x36c>)
 8006160:	4809      	ldr	r0, [pc, #36]	; (8006188 <Refresh_display+0x368>)
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	9400      	str	r4, [sp, #0]
 8006166:	2300      	movs	r3, #0
 8006168:	2200      	movs	r2, #0
 800616a:	f7fc fcaa 	bl	8002ac2 <EPD_SetFrameMemory>
	EPD_DisplayFrame(&epd);
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <Refresh_display+0x368>)
 8006170:	0018      	movs	r0, r3
 8006172:	f7fc fd35 	bl	8002be0 <EPD_DisplayFrame>

}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	46bd      	mov	sp, r7
 800617a:	b004      	add	sp, #16
 800617c:	bdb0      	pop	{r4, r5, r7, pc}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	20000150 	.word	0x20000150
 8006184:	20000204 	.word	0x20000204
 8006188:	2000038c 	.word	0x2000038c
 800618c:	2000094c 	.word	0x2000094c
 8006190:	20000258 	.word	0x20000258
 8006194:	20000170 	.word	0x20000170
 8006198:	0800bf48 	.word	0x0800bf48
 800619c:	2000002c 	.word	0x2000002c
 80061a0:	0800bf50 	.word	0x0800bf50
 80061a4:	20000024 	.word	0x20000024
 80061a8:	0800bf58 	.word	0x0800bf58
 80061ac:	00000f59 	.word	0x00000f59
 80061b0:	0800edb0 	.word	0x0800edb0
 80061b4:	00000e87 	.word	0x00000e87
 80061b8:	0800ed74 	.word	0x0800ed74
 80061bc:	00000ddd 	.word	0x00000ddd
 80061c0:	0800ed38 	.word	0x0800ed38
 80061c4:	0800ecfc 	.word	0x0800ecfc
 80061c8:	20000145 	.word	0x20000145
 80061cc:	0800ecc0 	.word	0x0800ecc0
 80061d0:	20000146 	.word	0x20000146
 80061d4:	0800ecdc 	.word	0x0800ecdc
 80061d8:	20000149 	.word	0x20000149
 80061dc:	20000034 	.word	0x20000034
 80061e0:	20000147 	.word	0x20000147
 80061e4:	200003a8 	.word	0x200003a8

080061e8 <Set_Turn_Off_display>:
void Set_Turn_Off_display()
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af02      	add	r7, sp, #8
		//sheep 200x152
		Paint_Init(&paint, frame_buffer, epd.width, epd.height);
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <Set_Turn_Off_display+0x70>)
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	4b19      	ldr	r3, [pc, #100]	; (8006258 <Set_Turn_Off_display+0x70>)
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	4919      	ldr	r1, [pc, #100]	; (800625c <Set_Turn_Off_display+0x74>)
 80061f8:	4819      	ldr	r0, [pc, #100]	; (8006260 <Set_Turn_Off_display+0x78>)
 80061fa:	f7fc fe49 	bl	8002e90 <Paint_Init>
		Paint_Clear(&paint, UNCOLORED);
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <Set_Turn_Off_display+0x78>)
 8006200:	2101      	movs	r1, #1
 8006202:	0018      	movs	r0, r3
 8006204:	f7fc fe70 	bl	8002ee8 <Paint_Clear>

		Paint_ImageFromMemory(&paint, Sheep, 0, 24, 200, 152);
 8006208:	4916      	ldr	r1, [pc, #88]	; (8006264 <Set_Turn_Off_display+0x7c>)
 800620a:	4815      	ldr	r0, [pc, #84]	; (8006260 <Set_Turn_Off_display+0x78>)
 800620c:	2398      	movs	r3, #152	; 0x98
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	23c8      	movs	r3, #200	; 0xc8
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2318      	movs	r3, #24
 8006216:	2200      	movs	r2, #0
 8006218:	f7fd f90b 	bl	8003432 <Paint_ImageFromMemory>

		EPD_SetFrameMemory(&epd, frame_buffer, 0, 0, Paint_GetWidth(&paint), Paint_GetHeight(&paint));
 800621c:	4b10      	ldr	r3, [pc, #64]	; (8006260 <Set_Turn_Off_display+0x78>)
 800621e:	0018      	movs	r0, r3
 8006220:	f7fc ff24 	bl	800306c <Paint_GetWidth>
 8006224:	0004      	movs	r4, r0
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <Set_Turn_Off_display+0x78>)
 8006228:	0018      	movs	r0, r3
 800622a:	f7fc ff29 	bl	8003080 <Paint_GetHeight>
 800622e:	0003      	movs	r3, r0
 8006230:	490a      	ldr	r1, [pc, #40]	; (800625c <Set_Turn_Off_display+0x74>)
 8006232:	4809      	ldr	r0, [pc, #36]	; (8006258 <Set_Turn_Off_display+0x70>)
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	9400      	str	r4, [sp, #0]
 8006238:	2300      	movs	r3, #0
 800623a:	2200      	movs	r2, #0
 800623c:	f7fc fc41 	bl	8002ac2 <EPD_SetFrameMemory>
		EPD_DisplayFrame(&epd);
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <Set_Turn_Off_display+0x70>)
 8006242:	0018      	movs	r0, r3
 8006244:	f7fc fccc 	bl	8002be0 <EPD_DisplayFrame>
		EPD_WaitUntilIdle(&epd);
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <Set_Turn_Off_display+0x70>)
 800624a:	0018      	movs	r0, r3
 800624c:	f7fc fc00 	bl	8002a50 <EPD_WaitUntilIdle>
}
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b001      	add	sp, #4
 8006256:	bd90      	pop	{r4, r7, pc}
 8006258:	2000038c 	.word	0x2000038c
 800625c:	2000094c 	.word	0x2000094c
 8006260:	20000258 	.word	0x20000258
 8006264:	0800edec 	.word	0x0800edec

08006268 <Turn_off_device>:
void Turn_off_device()
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HOLD_EN_GPIO_Port, HOLD_EN_Pin, GPIO_PIN_RESET);	//hold power on
 800626c:	2390      	movs	r3, #144	; 0x90
 800626e:	05db      	lsls	r3, r3, #23
 8006270:	2200      	movs	r2, #0
 8006272:	2101      	movs	r1, #1
 8006274:	0018      	movs	r0, r3
 8006276:	f001 fd1c 	bl	8007cb2 <HAL_GPIO_WritePin>
	HAL_Delay(500);														//wait for flip flop goes down
 800627a:	23fa      	movs	r3, #250	; 0xfa
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	0018      	movs	r0, r3
 8006280:	f001 f908 	bl	8007494 <HAL_Delay>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);		//turn off power RED LED
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	4809      	ldr	r0, [pc, #36]	; (80062b0 <Turn_off_device+0x48>)
 800628a:	2200      	movs	r2, #0
 800628c:	0019      	movs	r1, r3
 800628e:	f001 fd10 	bl	8007cb2 <HAL_GPIO_WritePin>
	Set_Turn_Off_display();												//show power off display
 8006292:	f7ff ffa9 	bl	80061e8 <Set_Turn_Off_display>
	HAL_GPIO_WritePin(HOLD_EN_GPIO_Port, HOLD_EN_Pin, GPIO_PIN_SET);		//turn off step up
 8006296:	2390      	movs	r3, #144	; 0x90
 8006298:	05db      	lsls	r3, r3, #23
 800629a:	2201      	movs	r2, #1
 800629c:	2101      	movs	r1, #1
 800629e:	0018      	movs	r0, r3
 80062a0:	f001 fd07 	bl	8007cb2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80062a4:	2064      	movs	r0, #100	; 0x64
 80062a6:	f001 f8f5 	bl	8007494 <HAL_Delay>
	NVIC_SystemReset();													//in case does not switch off, reset MCU
 80062aa:	f7ff faf3 	bl	8005894 <__NVIC_SystemReset>
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	48000400 	.word	0x48000400

080062b4 <SD_Write>:
}
void SD_Write()
{
 80062b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b6:	b093      	sub	sp, #76	; 0x4c
 80062b8:	af02      	add	r7, sp, #8
	FRESULT res;
	uint8_t write[27];//={"data, data\r\n"};//12:45:10;SK1234589ABC\r\n
	uint8_t write_end[]={"\r\n"};
 80062ba:	2318      	movs	r3, #24
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	4a4e      	ldr	r2, [pc, #312]	; (80063f8 <SD_Write+0x144>)
 80062c0:	8811      	ldrh	r1, [r2, #0]
 80062c2:	8019      	strh	r1, [r3, #0]
 80062c4:	7892      	ldrb	r2, [r2, #2]
 80062c6:	709a      	strb	r2, [r3, #2]
	uint8_t x;
	char file_name[13];
	DWORD FileSize;
	uint32_t byteswritten;
	res = FATFS_LinkDriver(&SD_Driver, SDPath);			//Links a diskio driver and increments the number of active linked drivers
 80062c8:	253f      	movs	r5, #63	; 0x3f
 80062ca:	197c      	adds	r4, r7, r5
 80062cc:	4a4b      	ldr	r2, [pc, #300]	; (80063fc <SD_Write+0x148>)
 80062ce:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <SD_Write+0x14c>)
 80062d0:	0011      	movs	r1, r2
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7ff face 	bl	8005874 <FATFS_LinkDriver>
 80062d8:	0003      	movs	r3, r0
 80062da:	7023      	strb	r3, [r4, #0]
	res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 1);
 80062dc:	197c      	adds	r4, r7, r5
 80062de:	4947      	ldr	r1, [pc, #284]	; (80063fc <SD_Write+0x148>)
 80062e0:	4b48      	ldr	r3, [pc, #288]	; (8006404 <SD_Write+0x150>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7fe fd11 	bl	8004d0c <f_mount>
 80062ea:	0003      	movs	r3, r0
 80062ec:	7023      	strb	r3, [r4, #0]

	time_read(&hi2c1);
 80062ee:	4b46      	ldr	r3, [pc, #280]	; (8006408 <SD_Write+0x154>)
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7fa fa11 	bl	8000718 <time_read>
	sprintf(file_name, "%d-%d-%d.csv", RealTime.date, RealTime.month, RealTime.year);
 80062f6:	4b45      	ldr	r3, [pc, #276]	; (800640c <SD_Write+0x158>)
 80062f8:	78db      	ldrb	r3, [r3, #3]
 80062fa:	001a      	movs	r2, r3
 80062fc:	4b43      	ldr	r3, [pc, #268]	; (800640c <SD_Write+0x158>)
 80062fe:	791b      	ldrb	r3, [r3, #4]
 8006300:	001c      	movs	r4, r3
 8006302:	4b42      	ldr	r3, [pc, #264]	; (800640c <SD_Write+0x158>)
 8006304:	795b      	ldrb	r3, [r3, #5]
 8006306:	4942      	ldr	r1, [pc, #264]	; (8006410 <SD_Write+0x15c>)
 8006308:	2008      	movs	r0, #8
 800630a:	1838      	adds	r0, r7, r0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	0023      	movs	r3, r4
 8006310:	f005 f9e0 	bl	800b6d4 <siprintf>
	x = sprintf(write, "%d:%d:%d;", RealTime.hours, RealTime.minutes, RealTime.seconds);
 8006314:	4b3d      	ldr	r3, [pc, #244]	; (800640c <SD_Write+0x158>)
 8006316:	789b      	ldrb	r3, [r3, #2]
 8006318:	001a      	movs	r2, r3
 800631a:	4b3c      	ldr	r3, [pc, #240]	; (800640c <SD_Write+0x158>)
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	001c      	movs	r4, r3
 8006320:	4b3a      	ldr	r3, [pc, #232]	; (800640c <SD_Write+0x158>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	493b      	ldr	r1, [pc, #236]	; (8006414 <SD_Write+0x160>)
 8006326:	261c      	movs	r6, #28
 8006328:	19b8      	adds	r0, r7, r6
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	0023      	movs	r3, r4
 800632e:	f005 f9d1 	bl	800b6d4 <siprintf>
 8006332:	0002      	movs	r2, r0
 8006334:	243e      	movs	r4, #62	; 0x3e
 8006336:	193b      	adds	r3, r7, r4
 8006338:	701a      	strb	r2, [r3, #0]

	res = f_open(&MyFile, file_name, FA_WRITE | FA_OPEN_ALWAYS);
 800633a:	002e      	movs	r6, r5
 800633c:	19bc      	adds	r4, r7, r6
 800633e:	2008      	movs	r0, #8
 8006340:	1839      	adds	r1, r7, r0
 8006342:	4b35      	ldr	r3, [pc, #212]	; (8006418 <SD_Write+0x164>)
 8006344:	2212      	movs	r2, #18
 8006346:	0018      	movs	r0, r3
 8006348:	f7fe fd28 	bl	8004d9c <f_open>
 800634c:	0003      	movs	r3, r0
 800634e:	7023      	strb	r3, [r4, #0]
	res = f_sync(&MyFile);
 8006350:	19bc      	adds	r4, r7, r6
 8006352:	4b31      	ldr	r3, [pc, #196]	; (8006418 <SD_Write+0x164>)
 8006354:	0018      	movs	r0, r3
 8006356:	f7ff f84b 	bl	80053f0 <f_sync>
 800635a:	0003      	movs	r3, r0
 800635c:	7023      	strb	r3, [r4, #0]
	FileSize = f_size(&MyFile);
 800635e:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <SD_Write+0x164>)
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
	res = f_lseek(&MyFile,FileSize);
 8006364:	19bc      	adds	r4, r7, r6
 8006366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006368:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <SD_Write+0x164>)
 800636a:	0011      	movs	r1, r2
 800636c:	0018      	movs	r0, r3
 800636e:	f7ff f8f1 	bl	8005554 <f_lseek>
 8006372:	0003      	movs	r3, r0
 8006374:	7023      	strb	r3, [r4, #0]
	res = f_write(&MyFile, write, x, (void *)&byteswritten);
 8006376:	243e      	movs	r4, #62	; 0x3e
 8006378:	193b      	adds	r3, r7, r4
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	19bc      	adds	r4, r7, r6
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	211c      	movs	r1, #28
 8006382:	1879      	adds	r1, r7, r1
 8006384:	4824      	ldr	r0, [pc, #144]	; (8006418 <SD_Write+0x164>)
 8006386:	f7fe fec7 	bl	8005118 <f_write>
 800638a:	0003      	movs	r3, r0
 800638c:	7023      	strb	r3, [r4, #0]
	res = f_write(&MyFile, TAG_ID[TAG_pointer], strlen(TAG_ID[TAG_pointer]), (void *)&byteswritten);
 800638e:	4b23      	ldr	r3, [pc, #140]	; (800641c <SD_Write+0x168>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	001a      	movs	r2, r3
 8006394:	0013      	movs	r3, r2
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	4a21      	ldr	r2, [pc, #132]	; (8006420 <SD_Write+0x16c>)
 800639c:	189d      	adds	r5, r3, r2
 800639e:	4b1f      	ldr	r3, [pc, #124]	; (800641c <SD_Write+0x168>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	001a      	movs	r2, r3
 80063a4:	0013      	movs	r3, r2
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <SD_Write+0x16c>)
 80063ac:	189b      	adds	r3, r3, r2
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7f9 fea8 	bl	8000104 <strlen>
 80063b4:	0002      	movs	r2, r0
 80063b6:	19bc      	adds	r4, r7, r6
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	4817      	ldr	r0, [pc, #92]	; (8006418 <SD_Write+0x164>)
 80063bc:	0029      	movs	r1, r5
 80063be:	f7fe feab 	bl	8005118 <f_write>
 80063c2:	0003      	movs	r3, r0
 80063c4:	7023      	strb	r3, [r4, #0]
	res = f_write(&MyFile, write_end, 2, (void *)&byteswritten);
 80063c6:	19bc      	adds	r4, r7, r6
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	2218      	movs	r2, #24
 80063cc:	18b9      	adds	r1, r7, r2
 80063ce:	4812      	ldr	r0, [pc, #72]	; (8006418 <SD_Write+0x164>)
 80063d0:	2202      	movs	r2, #2
 80063d2:	f7fe fea1 	bl	8005118 <f_write>
 80063d6:	0003      	movs	r3, r0
 80063d8:	7023      	strb	r3, [r4, #0]
	f_close(&MyFile);
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <SD_Write+0x164>)
 80063dc:	0018      	movs	r0, r3
 80063de:	f7ff f891 	bl	8005504 <f_close>
	//res = f_mount(0, "", 0);
	if (res != FR_OK)
 80063e2:	19bb      	adds	r3, r7, r6
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <SD_Write+0x13c>
		SD_error_flag = 1;
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <SD_Write+0x170>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
}
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b011      	add	sp, #68	; 0x44
 80063f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f8:	0800bf80 	.word	0x0800bf80
 80063fc:	2000048c 	.word	0x2000048c
 8006400:	20000278 	.word	0x20000278
 8006404:	20000490 	.word	0x20000490
 8006408:	20000204 	.word	0x20000204
 800640c:	20000170 	.word	0x20000170
 8006410:	0800bf64 	.word	0x0800bf64
 8006414:	0800bf74 	.word	0x0800bf74
 8006418:	200006c0 	.word	0x200006c0
 800641c:	20000147 	.word	0x20000147
 8006420:	200003a8 	.word	0x200003a8
 8006424:	20000149 	.word	0x20000149

08006428 <Turn_on_LED_buzzer>:
void Turn_on_LED_buzzer()
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	LED_flag = 1;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <Turn_on_LED_buzzer+0x38>)
 800642e:	2201      	movs	r2, #1
 8006430:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8006432:	2390      	movs	r3, #144	; 0x90
 8006434:	05db      	lsls	r3, r3, #23
 8006436:	2201      	movs	r2, #1
 8006438:	2110      	movs	r1, #16
 800643a:	0018      	movs	r0, r3
 800643c:	f001 fc39 	bl	8007cb2 <HAL_GPIO_WritePin>
	timestamp_LED = HAL_GetTick();
 8006440:	f001 f81e 	bl	8007480 <HAL_GetTick>
 8006444:	0002      	movs	r2, r0
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <Turn_on_LED_buzzer+0x3c>)
 8006448:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800644a:	2380      	movs	r3, #128	; 0x80
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4806      	ldr	r0, [pc, #24]	; (8006468 <Turn_on_LED_buzzer+0x40>)
 8006450:	2201      	movs	r2, #1
 8006452:	0019      	movs	r1, r3
 8006454:	f001 fc2d 	bl	8007cb2 <HAL_GPIO_WritePin>
	//PWM start
}
 8006458:	46c0      	nop			; (mov r8, r8)
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	20000148 	.word	0x20000148
 8006464:	20000160 	.word	0x20000160
 8006468:	48000400 	.word	0x48000400

0800646c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int8_t BT_flag_old=0;
 8006472:	1dfb      	adds	r3, r7, #7
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006478:	f000 ffa8 	bl	80073cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800647c:	f000 f9ae 	bl	80067dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006480:	f000 fba8 	bl	8006bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006484:	f000 fa12 	bl	80068ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8006488:	f000 fa70 	bl	800696c <MX_SPI1_Init>
  MX_SPI2_Init();
 800648c:	f000 faac 	bl	80069e8 <MX_SPI2_Init>
  MX_TIM17_Init();
 8006490:	f000 fae8 	bl	8006a64 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8006494:	f000 fb0e 	bl	8006ab4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006498:	f000 fb3c 	bl	8006b14 <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 800649c:	f000 fb6a 	bl	8006b74 <MX_USART5_UART_Init>
  MX_IWDG_Init();
 80064a0:	f000 fa44 	bl	800692c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_IWDG();
 80064a4:	4bb1      	ldr	r3, [pc, #708]	; (800676c <main+0x300>)
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	4bb0      	ldr	r3, [pc, #704]	; (800676c <main+0x300>)
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	0149      	lsls	r1, r1, #5
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  TAG_ID[0][0] = 0;			//set zero for clear screen
 80064b2:	4baf      	ldr	r3, [pc, #700]	; (8006770 <main+0x304>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
    TAG_ID[1][0] = 0;
 80064b8:	4bad      	ldr	r3, [pc, #692]	; (8006770 <main+0x304>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	73da      	strb	r2, [r3, #15]
    TAG_ID[2][0] = 0;
 80064be:	4bac      	ldr	r3, [pc, #688]	; (8006770 <main+0x304>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	779a      	strb	r2, [r3, #30]
    TAG_ID[3][0] = 0;
 80064c4:	4baa      	ldr	r3, [pc, #680]	; (8006770 <main+0x304>)
 80064c6:	222d      	movs	r2, #45	; 0x2d
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]
    TAG_ID[4][0] = 0;
 80064cc:	4ba8      	ldr	r3, [pc, #672]	; (8006770 <main+0x304>)
 80064ce:	223c      	movs	r2, #60	; 0x3c
 80064d0:	2100      	movs	r1, #0
 80064d2:	5499      	strb	r1, [r3, r2]
    TAG_ID[5][0] = 0;
 80064d4:	4ba6      	ldr	r3, [pc, #664]	; (8006770 <main+0x304>)
 80064d6:	224b      	movs	r2, #75	; 0x4b
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]
    HAL_GPIO_WritePin(HOLD_EN_GPIO_Port, HOLD_EN_Pin, GPIO_PIN_SET);	//hold power off
 80064dc:	2390      	movs	r3, #144	; 0x90
 80064de:	05db      	lsls	r3, r3, #23
 80064e0:	2201      	movs	r2, #1
 80064e2:	2101      	movs	r1, #1
 80064e4:	0018      	movs	r0, r3
 80064e6:	f001 fbe4 	bl	8007cb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_SET);	//set BT to comunication mode
 80064ea:	4ba2      	ldr	r3, [pc, #648]	; (8006774 <main+0x308>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	2140      	movs	r1, #64	; 0x40
 80064f0:	0018      	movs	r0, r3
 80064f2:	f001 fbde 	bl	8007cb2 <HAL_GPIO_WritePin>
    BQ25890_start_ADC(&hi2c1);										//start ADC bat voltage
 80064f6:	4ba0      	ldr	r3, [pc, #640]	; (8006778 <main+0x30c>)
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7fa fb5c 	bl	8000bb6 <BQ25890_start_ADC>
    HAL_Delay(100);													//wait for conversion stop
 80064fe:	2064      	movs	r0, #100	; 0x64
 8006500:	f000 ffc8 	bl	8007494 <HAL_Delay>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);		//turn on power RED LED
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	489a      	ldr	r0, [pc, #616]	; (8006774 <main+0x308>)
 800650a:	2201      	movs	r2, #1
 800650c:	0019      	movs	r1, r3
 800650e:	f001 fbd0 	bl	8007cb2 <HAL_GPIO_WritePin>
    EPD_Init(&epd, lut_full_update);									//init disp
 8006512:	4a9a      	ldr	r2, [pc, #616]	; (800677c <main+0x310>)
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <main+0x314>)
 8006516:	0011      	movs	r1, r2
 8006518:	0018      	movs	r0, r3
 800651a:	f7fc f9bf 	bl	800289c <EPD_Init>
    HAL_UART_DeInit(&huart2);										//deinit uart2
 800651e:	4b99      	ldr	r3, [pc, #612]	; (8006784 <main+0x318>)
 8006520:	0018      	movs	r0, r3
 8006522:	f003 fe2d 	bl	800a180 <HAL_UART_DeInit>
    MX_USART2_UART_Init();										//init uart2   nejaky impicment, bez toho to nejde
 8006526:	f000 faf5 	bl	8006b14 <MX_USART2_UART_Init>
    if (HAL_GPIO_ReadPin(READER_TYPE_GPIO_Port, READER_TYPE_Pin) == GPIO_PIN_SET)
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4a91      	ldr	r2, [pc, #580]	; (8006774 <main+0x308>)
 8006530:	0019      	movs	r1, r3
 8006532:	0010      	movs	r0, r2
 8006534:	f001 fba0 	bl	8007c78 <HAL_GPIO_ReadPin>
 8006538:	0003      	movs	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d106      	bne.n	800654c <main+0xe0>
    	HAL_UART_Receive_IT(&huart2, RX_data, 18);					//receive data from RFID reader over IT (small antenna reader)
 800653e:	4992      	ldr	r1, [pc, #584]	; (8006788 <main+0x31c>)
 8006540:	4b90      	ldr	r3, [pc, #576]	; (8006784 <main+0x318>)
 8006542:	2212      	movs	r2, #18
 8006544:	0018      	movs	r0, r3
 8006546:	f003 fef9 	bl	800a33c <HAL_UART_Receive_IT>
 800654a:	e005      	b.n	8006558 <main+0xec>
    else
    	HAL_UART_Receive_IT(&huart2, RX_data, 30);					//big antenna reader
 800654c:	498e      	ldr	r1, [pc, #568]	; (8006788 <main+0x31c>)
 800654e:	4b8d      	ldr	r3, [pc, #564]	; (8006784 <main+0x318>)
 8006550:	221e      	movs	r2, #30
 8006552:	0018      	movs	r0, r3
 8006554:	f003 fef2 	bl	800a33c <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart5, RX_Time, 15);					//receive data from BT over IT - time settings  //Thh:mm_dd.mm.yy
 8006558:	498c      	ldr	r1, [pc, #560]	; (800678c <main+0x320>)
 800655a:	4b8d      	ldr	r3, [pc, #564]	; (8006790 <main+0x324>)
 800655c:	220f      	movs	r2, #15
 800655e:	0018      	movs	r0, r3
 8006560:	f003 feec 	bl	800a33c <HAL_UART_Receive_IT>
    if (HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin) == GPIO_PIN_RESET)	//is the SD card inserted?
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	015b      	lsls	r3, r3, #5
 8006568:	4a82      	ldr	r2, [pc, #520]	; (8006774 <main+0x308>)
 800656a:	0019      	movs	r1, r3
 800656c:	0010      	movs	r0, r2
 800656e:	f001 fb83 	bl	8007c78 <HAL_GPIO_ReadPin>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d102      	bne.n	800657c <main+0x110>
  	  SD_flag = 1;
 8006576:	4b87      	ldr	r3, [pc, #540]	; (8006794 <main+0x328>)
 8006578:	2201      	movs	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
     {
    	  HAL_IWDG_Refresh(&hiwdg);								//reset IWDG
 800657c:	4b86      	ldr	r3, [pc, #536]	; (8006798 <main+0x32c>)
 800657e:	0018      	movs	r0, r3
 8006580:	f002 fa32 	bl	80089e8 <HAL_IWDG_Refresh>
		  if ((HAL_GetTick() - timestamp_bt_led)>3000)									//every 2s check BT LED // old 50ms
 8006584:	f000 ff7c 	bl	8007480 <HAL_GetTick>
 8006588:	0002      	movs	r2, r0
 800658a:	4b84      	ldr	r3, [pc, #528]	; (800679c <main+0x330>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	4a83      	ldr	r2, [pc, #524]	; (80067a0 <main+0x334>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d920      	bls.n	80065d8 <main+0x16c>
		  {
			  timestamp_bt_led = HAL_GetTick();
 8006596:	f000 ff73 	bl	8007480 <HAL_GetTick>
 800659a:	0002      	movs	r2, r0
 800659c:	4b7f      	ldr	r3, [pc, #508]	; (800679c <main+0x330>)
 800659e:	601a      	str	r2, [r3, #0]
			  if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin)==GPIO_PIN_RESET)	// if turn off, set BT flag to 0
 80065a0:	4b74      	ldr	r3, [pc, #464]	; (8006774 <main+0x308>)
 80065a2:	2120      	movs	r1, #32
 80065a4:	0018      	movs	r0, r3
 80065a6:	f001 fb67 	bl	8007c78 <HAL_GPIO_ReadPin>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d107      	bne.n	80065be <main+0x152>
			  {
				  BT_flag = 0;
 80065ae:	4b7d      	ldr	r3, [pc, #500]	; (80067a4 <main+0x338>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
				  timestamp_bt_state = HAL_GetTick();
 80065b4:	f000 ff64 	bl	8007480 <HAL_GetTick>
 80065b8:	0002      	movs	r2, r0
 80065ba:	4b7b      	ldr	r3, [pc, #492]	; (80067a8 <main+0x33c>)
 80065bc:	601a      	str	r2, [r3, #0]
			  }
			  if ((HAL_GetTick() - timestamp_bt_state)>500)								//if 100s is on
 80065be:	f000 ff5f 	bl	8007480 <HAL_GetTick>
 80065c2:	0002      	movs	r2, r0
 80065c4:	4b78      	ldr	r3, [pc, #480]	; (80067a8 <main+0x33c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	23fa      	movs	r3, #250	; 0xfa
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d902      	bls.n	80065d8 <main+0x16c>
				  BT_flag = 1;															//set BT flag to 1
 80065d2:	4b74      	ldr	r3, [pc, #464]	; (80067a4 <main+0x338>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
		  }
		  if (BT_flag != BT_flag_old)													//in case of BT flag change, refresh display
 80065d8:	4b72      	ldr	r3, [pc, #456]	; (80067a4 <main+0x338>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	001a      	movs	r2, r3
 80065de:	1dfb      	adds	r3, r7, #7
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d006      	beq.n	80065f6 <main+0x18a>
		  {
			  disp_refresh = 1;
 80065e8:	4b70      	ldr	r3, [pc, #448]	; (80067ac <main+0x340>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
			  BT_flag_old = BT_flag;
 80065ee:	4b6d      	ldr	r3, [pc, #436]	; (80067a4 <main+0x338>)
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	1dfb      	adds	r3, r7, #7
 80065f4:	701a      	strb	r2, [r3, #0]
		  }
		  if (rx_complete)							//rx complete
 80065f6:	4b6e      	ldr	r3, [pc, #440]	; (80067b0 <main+0x344>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04a      	beq.n	8006694 <main+0x228>
		  {
			  Turn_on_LED_buzzer();							//turn on signal LED and buzzer
 80065fe:	f7ff ff13 	bl	8006428 <Turn_on_LED_buzzer>
			  rx_complete = 0;								//reset flag
 8006602:	4b6b      	ldr	r3, [pc, #428]	; (80067b0 <main+0x344>)
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
			  TAG_pointer = (TAG_pointer+1)%6;				//shift circular buffer
 8006608:	4b6a      	ldr	r3, [pc, #424]	; (80067b4 <main+0x348>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	2106      	movs	r1, #6
 8006610:	0018      	movs	r0, r3
 8006612:	f7f9 fef9 	bl	8000408 <__aeabi_idivmod>
 8006616:	000b      	movs	r3, r1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b66      	ldr	r3, [pc, #408]	; (80067b4 <main+0x348>)
 800661c:	701a      	strb	r2, [r3, #0]
			  calc_sheep_id();													//convert input data to int
 800661e:	f7ff f96f 	bl	8005900 <calc_sheep_id>
			  number_to_string(sheep_ID, country_ID, TAG_ID[TAG_pointer]);	// convert int to string
 8006622:	4b65      	ldr	r3, [pc, #404]	; (80067b8 <main+0x34c>)
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	6859      	ldr	r1, [r3, #4]
 8006628:	4b64      	ldr	r3, [pc, #400]	; (80067bc <main+0x350>)
 800662a:	681c      	ldr	r4, [r3, #0]
 800662c:	4b61      	ldr	r3, [pc, #388]	; (80067b4 <main+0x348>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	001a      	movs	r2, r3
 8006632:	0013      	movs	r3, r2
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	1a9b      	subs	r3, r3, r2
 8006638:	4a4d      	ldr	r2, [pc, #308]	; (8006770 <main+0x304>)
 800663a:	189b      	adds	r3, r3, r2
 800663c:	0022      	movs	r2, r4
 800663e:	f7ff fb6f 	bl	8005d20 <number_to_string>
			  HAL_UART_Transmit(&huart5, TAG_ID[TAG_pointer], strlen(TAG_ID[TAG_pointer]), 50);			//send TAG ID on BT
 8006642:	4b5c      	ldr	r3, [pc, #368]	; (80067b4 <main+0x348>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	001a      	movs	r2, r3
 8006648:	0013      	movs	r3, r2
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	4a48      	ldr	r2, [pc, #288]	; (8006770 <main+0x304>)
 8006650:	189c      	adds	r4, r3, r2
 8006652:	4b58      	ldr	r3, [pc, #352]	; (80067b4 <main+0x348>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	001a      	movs	r2, r3
 8006658:	0013      	movs	r3, r2
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	1a9b      	subs	r3, r3, r2
 800665e:	4a44      	ldr	r2, [pc, #272]	; (8006770 <main+0x304>)
 8006660:	189b      	adds	r3, r3, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f7f9 fd4e 	bl	8000104 <strlen>
 8006668:	0003      	movs	r3, r0
 800666a:	b29a      	uxth	r2, r3
 800666c:	4848      	ldr	r0, [pc, #288]	; (8006790 <main+0x324>)
 800666e:	2332      	movs	r3, #50	; 0x32
 8006670:	0021      	movs	r1, r4
 8006672:	f003 fdc3 	bl	800a1fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart5, "\n", 1, 50);													//send termination \n to BT
 8006676:	4952      	ldr	r1, [pc, #328]	; (80067c0 <main+0x354>)
 8006678:	4845      	ldr	r0, [pc, #276]	; (8006790 <main+0x324>)
 800667a:	2332      	movs	r3, #50	; 0x32
 800667c:	2201      	movs	r2, #1
 800667e:	f003 fdbd 	bl	800a1fc <HAL_UART_Transmit>
			  disp_refresh = 1;											//refresh display
 8006682:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <main+0x340>)
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
			  if(SD_flag)												//if SD is inserted
 8006688:	4b42      	ldr	r3, [pc, #264]	; (8006794 <main+0x328>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <main+0x228>
				  SD_Write();											//sd write
 8006690:	f7ff fe10 	bl	80062b4 <SD_Write>
		  }

		  if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)==GPIO_PIN_SET)
 8006694:	2390      	movs	r3, #144	; 0x90
 8006696:	05db      	lsls	r3, r3, #23
 8006698:	2102      	movs	r1, #2
 800669a:	0018      	movs	r0, r3
 800669c:	f001 faec 	bl	8007c78 <HAL_GPIO_ReadPin>
 80066a0:	0003      	movs	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d10b      	bne.n	80066be <main+0x252>
		  {
			  if ((HAL_GetTick() - timestamp_button)>2000)								//if power button is hold for 2 seconds
 80066a6:	f000 feeb 	bl	8007480 <HAL_GetTick>
 80066aa:	0002      	movs	r2, r0
 80066ac:	4b45      	ldr	r3, [pc, #276]	; (80067c4 <main+0x358>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	1ad2      	subs	r2, r2, r3
 80066b2:	23fa      	movs	r3, #250	; 0xfa
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d901      	bls.n	80066be <main+0x252>
			  {
				  //HAL_IWDG_Refresh(&hiwdg);												//reset IWDG
				  Turn_off_device();													//turn off device
 80066ba:	f7ff fdd5 	bl	8006268 <Turn_off_device>
			  }
		  }
		  if ((HAL_GetTick() - timestamp_time)>300000)									//in case of 5 min of display inactivity
 80066be:	f000 fedf 	bl	8007480 <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <main+0x35c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	4a40      	ldr	r2, [pc, #256]	; (80067cc <main+0x360>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d907      	bls.n	80066e0 <main+0x274>
		  {
			  disp_refresh = 1;															//refresh display
 80066d0:	4b36      	ldr	r3, [pc, #216]	; (80067ac <main+0x340>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
			  timestamp_time = HAL_GetTick();
 80066d6:	f000 fed3 	bl	8007480 <HAL_GetTick>
 80066da:	0002      	movs	r2, r0
 80066dc:	4b3a      	ldr	r3, [pc, #232]	; (80067c8 <main+0x35c>)
 80066de:	601a      	str	r2, [r3, #0]
		  }

		  if ((HAL_GetTick() - timestamp_adc)>1000)										//start bat voltage ADC every 1 second
 80066e0:	f000 fece 	bl	8007480 <HAL_GetTick>
 80066e4:	0002      	movs	r2, r0
 80066e6:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <main+0x364>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	23fa      	movs	r3, #250	; 0xfa
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d908      	bls.n	8006706 <main+0x29a>
		  {
			  BQ25890_start_ADC(&hi2c1);
 80066f4:	4b20      	ldr	r3, [pc, #128]	; (8006778 <main+0x30c>)
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7fa fa5d 	bl	8000bb6 <BQ25890_start_ADC>
			  timestamp_adc = HAL_GetTick();
 80066fc:	f000 fec0 	bl	8007480 <HAL_GetTick>
 8006700:	0002      	movs	r2, r0
 8006702:	4b33      	ldr	r3, [pc, #204]	; (80067d0 <main+0x364>)
 8006704:	601a      	str	r2, [r3, #0]
		  }
		  if (disp_refresh)
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <main+0x340>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <main+0x2ba>
		  {
			  if (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)==GPIO_PIN_RESET)			//do not refresh display until busy
 800670e:	4b19      	ldr	r3, [pc, #100]	; (8006774 <main+0x308>)
 8006710:	2102      	movs	r1, #2
 8006712:	0018      	movs	r0, r3
 8006714:	f001 fab0 	bl	8007c78 <HAL_GPIO_ReadPin>
 8006718:	1e03      	subs	r3, r0, #0
 800671a:	d104      	bne.n	8006726 <main+0x2ba>
			  {
				  disp_refresh = 0;
 800671c:	4b23      	ldr	r3, [pc, #140]	; (80067ac <main+0x340>)
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]
				  Refresh_display();
 8006722:	f7ff fb7d 	bl	8005e20 <Refresh_display>
			  }
		  }
		  if (LED_flag && ((HAL_GetTick() - timestamp_LED)>300))						//after 300ms turn off signal LED and buzzer
 8006726:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <main+0x368>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d100      	bne.n	8006730 <main+0x2c4>
 800672e:	e725      	b.n	800657c <main+0x110>
 8006730:	f000 fea6 	bl	8007480 <HAL_GetTick>
 8006734:	0002      	movs	r2, r0
 8006736:	4b28      	ldr	r3, [pc, #160]	; (80067d8 <main+0x36c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	2396      	movs	r3, #150	; 0x96
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	429a      	cmp	r2, r3
 8006742:	d800      	bhi.n	8006746 <main+0x2da>
 8006744:	e71a      	b.n	800657c <main+0x110>
		  {
			  LED_flag = 0;
 8006746:	4b23      	ldr	r3, [pc, #140]	; (80067d4 <main+0x368>)
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800674c:	2390      	movs	r3, #144	; 0x90
 800674e:	05db      	lsls	r3, r3, #23
 8006750:	2200      	movs	r2, #0
 8006752:	2110      	movs	r1, #16
 8006754:	0018      	movs	r0, r3
 8006756:	f001 faac 	bl	8007cb2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4805      	ldr	r0, [pc, #20]	; (8006774 <main+0x308>)
 8006760:	2200      	movs	r2, #0
 8006762:	0019      	movs	r1, r3
 8006764:	f001 faa5 	bl	8007cb2 <HAL_GPIO_WritePin>
    	  HAL_IWDG_Refresh(&hiwdg);								//reset IWDG
 8006768:	e708      	b.n	800657c <main+0x110>
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	40015800 	.word	0x40015800
 8006770:	200003a8 	.word	0x200003a8
 8006774:	48000400 	.word	0x48000400
 8006778:	20000204 	.word	0x20000204
 800677c:	0800cd74 	.word	0x0800cd74
 8006780:	2000038c 	.word	0x2000038c
 8006784:	2000578c 	.word	0x2000578c
 8006788:	200002d4 	.word	0x200002d4
 800678c:	200002f4 	.word	0x200002f4
 8006790:	20000304 	.word	0x20000304
 8006794:	20000146 	.word	0x20000146
 8006798:	20000268 	.word	0x20000268
 800679c:	20000158 	.word	0x20000158
 80067a0:	00000bb8 	.word	0x00000bb8
 80067a4:	20000145 	.word	0x20000145
 80067a8:	2000015c 	.word	0x2000015c
 80067ac:	20000090 	.word	0x20000090
 80067b0:	20000144 	.word	0x20000144
 80067b4:	20000147 	.word	0x20000147
 80067b8:	20005818 	.word	0x20005818
 80067bc:	20005820 	.word	0x20005820
 80067c0:	0800bf84 	.word	0x0800bf84
 80067c4:	2000014c 	.word	0x2000014c
 80067c8:	20000150 	.word	0x20000150
 80067cc:	000493e0 	.word	0x000493e0
 80067d0:	20000154 	.word	0x20000154
 80067d4:	20000148 	.word	0x20000148
 80067d8:	20000160 	.word	0x20000160

080067dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b095      	sub	sp, #84	; 0x54
 80067e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067e2:	2420      	movs	r4, #32
 80067e4:	193b      	adds	r3, r7, r4
 80067e6:	0018      	movs	r0, r3
 80067e8:	2330      	movs	r3, #48	; 0x30
 80067ea:	001a      	movs	r2, r3
 80067ec:	2100      	movs	r1, #0
 80067ee:	f004 ff69 	bl	800b6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067f2:	2310      	movs	r3, #16
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	0018      	movs	r0, r3
 80067f8:	2310      	movs	r3, #16
 80067fa:	001a      	movs	r2, r3
 80067fc:	2100      	movs	r1, #0
 80067fe:	f004 ff61 	bl	800b6c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006802:	003b      	movs	r3, r7
 8006804:	0018      	movs	r0, r3
 8006806:	2310      	movs	r3, #16
 8006808:	001a      	movs	r2, r3
 800680a:	2100      	movs	r1, #0
 800680c:	f004 ff5a 	bl	800b6c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006810:	0021      	movs	r1, r4
 8006812:	187b      	adds	r3, r7, r1
 8006814:	220a      	movs	r2, #10
 8006816:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006818:	187b      	adds	r3, r7, r1
 800681a:	2201      	movs	r2, #1
 800681c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800681e:	187b      	adds	r3, r7, r1
 8006820:	2210      	movs	r2, #16
 8006822:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006824:	187b      	adds	r3, r7, r1
 8006826:	2201      	movs	r2, #1
 8006828:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800682a:	187b      	adds	r3, r7, r1
 800682c:	2202      	movs	r2, #2
 800682e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006830:	187b      	adds	r3, r7, r1
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	0212      	lsls	r2, r2, #8
 8006836:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006838:	187b      	adds	r3, r7, r1
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	0352      	lsls	r2, r2, #13
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8006840:	187b      	adds	r3, r7, r1
 8006842:	2200      	movs	r2, #0
 8006844:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006846:	187b      	adds	r3, r7, r1
 8006848:	0018      	movs	r0, r3
 800684a:	f002 f8dd 	bl	8008a08 <HAL_RCC_OscConfig>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d001      	beq.n	8006856 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8006852:	f000 fab1 	bl	8006db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006856:	2110      	movs	r1, #16
 8006858:	187b      	adds	r3, r7, r1
 800685a:	2207      	movs	r2, #7
 800685c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800685e:	187b      	adds	r3, r7, r1
 8006860:	2202      	movs	r2, #2
 8006862:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006864:	187b      	adds	r3, r7, r1
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800686a:	187b      	adds	r3, r7, r1
 800686c:	2200      	movs	r2, #0
 800686e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006870:	187b      	adds	r3, r7, r1
 8006872:	2101      	movs	r1, #1
 8006874:	0018      	movs	r0, r3
 8006876:	f002 fbe5 	bl	8009044 <HAL_RCC_ClockConfig>
 800687a:	1e03      	subs	r3, r0, #0
 800687c:	d001      	beq.n	8006882 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800687e:	f000 fa9b 	bl	8006db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8006882:	003b      	movs	r3, r7
 8006884:	2221      	movs	r2, #33	; 0x21
 8006886:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006888:	003b      	movs	r3, r7
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800688e:	003b      	movs	r3, r7
 8006890:	2200      	movs	r2, #0
 8006892:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006894:	003b      	movs	r3, r7
 8006896:	0018      	movs	r0, r3
 8006898:	f002 fd1a 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d001      	beq.n	80068a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80068a0:	f000 fa8a 	bl	8006db8 <Error_Handler>
  }
}
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b015      	add	sp, #84	; 0x54
 80068aa:	bd90      	pop	{r4, r7, pc}

080068ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <MX_I2C1_Init+0x74>)
 80068b2:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <MX_I2C1_Init+0x78>)
 80068b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80068b6:	4b1a      	ldr	r3, [pc, #104]	; (8006920 <MX_I2C1_Init+0x74>)
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <MX_I2C1_Init+0x7c>)
 80068ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80068bc:	4b18      	ldr	r3, [pc, #96]	; (8006920 <MX_I2C1_Init+0x74>)
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80068c2:	4b17      	ldr	r3, [pc, #92]	; (8006920 <MX_I2C1_Init+0x74>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <MX_I2C1_Init+0x74>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <MX_I2C1_Init+0x74>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80068d4:	4b12      	ldr	r3, [pc, #72]	; (8006920 <MX_I2C1_Init+0x74>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <MX_I2C1_Init+0x74>)
 80068dc:	2200      	movs	r2, #0
 80068de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <MX_I2C1_Init+0x74>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80068e6:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <MX_I2C1_Init+0x74>)
 80068e8:	0018      	movs	r0, r3
 80068ea:	f001 fa37 	bl	8007d5c <HAL_I2C_Init>
 80068ee:	1e03      	subs	r3, r0, #0
 80068f0:	d001      	beq.n	80068f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80068f2:	f000 fa61 	bl	8006db8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <MX_I2C1_Init+0x74>)
 80068f8:	2100      	movs	r1, #0
 80068fa:	0018      	movs	r0, r3
 80068fc:	f001 ff8a 	bl	8008814 <HAL_I2CEx_ConfigAnalogFilter>
 8006900:	1e03      	subs	r3, r0, #0
 8006902:	d001      	beq.n	8006908 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006904:	f000 fa58 	bl	8006db8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <MX_I2C1_Init+0x74>)
 800690a:	2100      	movs	r1, #0
 800690c:	0018      	movs	r0, r3
 800690e:	f001 ffcd 	bl	80088ac <HAL_I2CEx_ConfigDigitalFilter>
 8006912:	1e03      	subs	r3, r0, #0
 8006914:	d001      	beq.n	800691a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006916:	f000 fa4f 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000204 	.word	0x20000204
 8006924:	40005400 	.word	0x40005400
 8006928:	2000090e 	.word	0x2000090e

0800692c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <MX_IWDG_Init+0x34>)
 8006932:	4a0c      	ldr	r2, [pc, #48]	; (8006964 <MX_IWDG_Init+0x38>)
 8006934:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <MX_IWDG_Init+0x34>)
 8006938:	2203      	movs	r2, #3
 800693a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 3124;
 800693c:	4b08      	ldr	r3, [pc, #32]	; (8006960 <MX_IWDG_Init+0x34>)
 800693e:	4a0a      	ldr	r2, [pc, #40]	; (8006968 <MX_IWDG_Init+0x3c>)
 8006940:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3124;
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <MX_IWDG_Init+0x34>)
 8006944:	4a08      	ldr	r2, [pc, #32]	; (8006968 <MX_IWDG_Init+0x3c>)
 8006946:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8006948:	4b05      	ldr	r3, [pc, #20]	; (8006960 <MX_IWDG_Init+0x34>)
 800694a:	0018      	movs	r0, r3
 800694c:	f001 fffa 	bl	8008944 <HAL_IWDG_Init>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d001      	beq.n	8006958 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8006954:	f000 fa30 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	20000268 	.word	0x20000268
 8006964:	40003000 	.word	0x40003000
 8006968:	00000c34 	.word	0x00000c34

0800696c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <MX_SPI1_Init+0x74>)
 8006972:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <MX_SPI1_Init+0x78>)
 8006974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <MX_SPI1_Init+0x74>)
 8006978:	2282      	movs	r2, #130	; 0x82
 800697a:	0052      	lsls	r2, r2, #1
 800697c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800697e:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <MX_SPI1_Init+0x74>)
 8006980:	2200      	movs	r2, #0
 8006982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006984:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <MX_SPI1_Init+0x74>)
 8006986:	22e0      	movs	r2, #224	; 0xe0
 8006988:	00d2      	lsls	r2, r2, #3
 800698a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800698c:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <MX_SPI1_Init+0x74>)
 800698e:	2200      	movs	r2, #0
 8006990:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <MX_SPI1_Init+0x74>)
 8006994:	2200      	movs	r2, #0
 8006996:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <MX_SPI1_Init+0x74>)
 800699a:	2280      	movs	r2, #128	; 0x80
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069a2:	2220      	movs	r2, #32
 80069a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069ba:	2207      	movs	r2, #7
 80069bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069c6:	2208      	movs	r2, #8
 80069c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <MX_SPI1_Init+0x74>)
 80069cc:	0018      	movs	r0, r3
 80069ce:	f002 fd4d 	bl	800946c <HAL_SPI_Init>
 80069d2:	1e03      	subs	r3, r0, #0
 80069d4:	d001      	beq.n	80069da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80069d6:	f000 f9ef 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	200008e8 	.word	0x200008e8
 80069e4:	40013000 	.word	0x40013000

080069e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80069ec:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <MX_SPI2_Init+0x74>)
 80069ee:	4a1c      	ldr	r2, [pc, #112]	; (8006a60 <MX_SPI2_Init+0x78>)
 80069f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80069f2:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <MX_SPI2_Init+0x74>)
 80069f4:	2282      	movs	r2, #130	; 0x82
 80069f6:	0052      	lsls	r2, r2, #1
 80069f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80069fa:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <MX_SPI2_Init+0x74>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006a00:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a02:	22e0      	movs	r2, #224	; 0xe0
 8006a04:	00d2      	lsls	r2, r2, #3
 8006a06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a08:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006a14:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	0092      	lsls	r2, r2, #2
 8006a1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a1e:	2230      	movs	r2, #48	; 0x30
 8006a20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a22:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a36:	2207      	movs	r2, #7
 8006a38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a42:	2208      	movs	r2, #8
 8006a44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <MX_SPI2_Init+0x74>)
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f002 fd0f 	bl	800946c <HAL_SPI_Init>
 8006a4e:	1e03      	subs	r3, r0, #0
 8006a50:	d001      	beq.n	8006a56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006a52:	f000 f9b1 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	200001a0 	.word	0x200001a0
 8006a60:	40003800 	.word	0x40003800

08006a64 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a6a:	4a10      	ldr	r2, [pc, #64]	; (8006aac <MX_TIM17_Init+0x48>)
 8006a6c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <MX_TIM17_Init+0x4c>)
 8006a7e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <MX_TIM17_Init+0x44>)
 8006a94:	0018      	movs	r0, r3
 8006a96:	f003 fa59 	bl	8009f4c <HAL_TIM_Base_Init>
 8006a9a:	1e03      	subs	r3, r0, #0
 8006a9c:	d001      	beq.n	8006aa2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8006a9e:	f000 f98b 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	2000028c 	.word	0x2000028c
 8006aac:	40014800 	.word	0x40014800
 8006ab0:	0000c350 	.word	0x0000c350

08006ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ab8:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <MX_USART1_UART_Init+0x5c>)
 8006abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ac0:	22e1      	movs	r2, #225	; 0xe1
 8006ac2:	0252      	lsls	r2, r2, #9
 8006ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ada:	220c      	movs	r2, #12
 8006adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ae4:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <MX_USART1_UART_Init+0x58>)
 8006af8:	0018      	movs	r0, r3
 8006afa:	f003 faed 	bl	800a0d8 <HAL_UART_Init>
 8006afe:	1e03      	subs	r3, r0, #0
 8006b00:	d001      	beq.n	8006b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006b02:	f000 f959 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000404 	.word	0x20000404
 8006b10:	40013800 	.word	0x40013800

08006b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b18:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b1a:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <MX_USART2_UART_Init+0x5c>)
 8006b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b20:	2296      	movs	r2, #150	; 0x96
 8006b22:	0192      	lsls	r2, r2, #6
 8006b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b26:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b32:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b3a:	220c      	movs	r2, #12
 8006b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b44:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b4a:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <MX_USART2_UART_Init+0x58>)
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f003 fabd 	bl	800a0d8 <HAL_UART_Init>
 8006b5e:	1e03      	subs	r3, r0, #0
 8006b60:	d001      	beq.n	8006b66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006b62:	f000 f929 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	2000578c 	.word	0x2000578c
 8006b70:	40004400 	.word	0x40004400

08006b74 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8006b78:	4b14      	ldr	r3, [pc, #80]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006b7a:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <MX_USART5_UART_Init+0x5c>)
 8006b7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006b80:	2296      	movs	r2, #150	; 0x96
 8006b82:	0192      	lsls	r2, r2, #6
 8006b84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006b92:	4b0e      	ldr	r3, [pc, #56]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006b9a:	220c      	movs	r2, #12
 8006b9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ba4:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006baa:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <MX_USART5_UART_Init+0x58>)
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f003 fa8d 	bl	800a0d8 <HAL_UART_Init>
 8006bbe:	1e03      	subs	r3, r0, #0
 8006bc0:	d001      	beq.n	8006bc6 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8006bc2:	f000 f8f9 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000304 	.word	0x20000304
 8006bd0:	40005000 	.word	0x40005000

08006bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b08b      	sub	sp, #44	; 0x2c
 8006bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bda:	2414      	movs	r4, #20
 8006bdc:	193b      	adds	r3, r7, r4
 8006bde:	0018      	movs	r0, r3
 8006be0:	2314      	movs	r3, #20
 8006be2:	001a      	movs	r2, r3
 8006be4:	2100      	movs	r1, #0
 8006be6:	f004 fd6d 	bl	800b6c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bea:	4b6e      	ldr	r3, [pc, #440]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	4b6d      	ldr	r3, [pc, #436]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	0309      	lsls	r1, r1, #12
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	615a      	str	r2, [r3, #20]
 8006bf8:	4b6a      	ldr	r3, [pc, #424]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	031b      	lsls	r3, r3, #12
 8006c00:	4013      	ands	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006c06:	4b67      	ldr	r3, [pc, #412]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	4b66      	ldr	r3, [pc, #408]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c0c:	2180      	movs	r1, #128	; 0x80
 8006c0e:	03c9      	lsls	r1, r1, #15
 8006c10:	430a      	orrs	r2, r1
 8006c12:	615a      	str	r2, [r3, #20]
 8006c14:	4b63      	ldr	r3, [pc, #396]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	03db      	lsls	r3, r3, #15
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c22:	4b60      	ldr	r3, [pc, #384]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	4b5f      	ldr	r3, [pc, #380]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	0289      	lsls	r1, r1, #10
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	615a      	str	r2, [r3, #20]
 8006c30:	4b5c      	ldr	r3, [pc, #368]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	029b      	lsls	r3, r3, #10
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c3e:	4b59      	ldr	r3, [pc, #356]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	4b58      	ldr	r3, [pc, #352]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	02c9      	lsls	r1, r1, #11
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	615a      	str	r2, [r3, #20]
 8006c4c:	4b55      	ldr	r3, [pc, #340]	; (8006da4 <MX_GPIO_Init+0x1d0>)
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	02db      	lsls	r3, r3, #11
 8006c54:	4013      	ands	r3, r2
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_WC_GPIO_Port, EEPROM_WC_Pin, GPIO_PIN_RESET);
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	4852      	ldr	r0, [pc, #328]	; (8006da8 <MX_GPIO_Init+0x1d4>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	0019      	movs	r1, r3
 8006c64:	f001 f825 	bl	8007cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HOLD_EN_Pin|LED_B_Pin|SD_CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8006c68:	4950      	ldr	r1, [pc, #320]	; (8006dac <MX_GPIO_Init+0x1d8>)
 8006c6a:	2390      	movs	r3, #144	; 0x90
 8006c6c:	05db      	lsls	r3, r3, #23
 8006c6e:	2200      	movs	r2, #0
 8006c70:	0018      	movs	r0, r3
 8006c72:	f001 f81e 	bl	8007cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|DC_Pin|LED_R_Pin|BT_KEY_Pin
 8006c76:	494e      	ldr	r1, [pc, #312]	; (8006db0 <MX_GPIO_Init+0x1dc>)
 8006c78:	4b4e      	ldr	r3, [pc, #312]	; (8006db4 <MX_GPIO_Init+0x1e0>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f001 f818 	bl	8007cb2 <HAL_GPIO_WritePin>
                          |BACKLIGHT_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : EEPROM_WC_Pin */
  GPIO_InitStruct.Pin = EEPROM_WC_Pin;
 8006c82:	193b      	adds	r3, r7, r4
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	0212      	lsls	r2, r2, #8
 8006c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8a:	193b      	adds	r3, r7, r4
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c90:	193b      	adds	r3, r7, r4
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EEPROM_WC_GPIO_Port, &GPIO_InitStruct);
 8006c9c:	193b      	adds	r3, r7, r4
 8006c9e:	4a42      	ldr	r2, [pc, #264]	; (8006da8 <MX_GPIO_Init+0x1d4>)
 8006ca0:	0019      	movs	r1, r3
 8006ca2:	0010      	movs	r0, r2
 8006ca4:	f000 fda8 	bl	80077f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOLD_EN_Pin LED_B_Pin SD_CS_Pin RST_Pin */
  GPIO_InitStruct.Pin = HOLD_EN_Pin|LED_B_Pin|SD_CS_Pin|RST_Pin;
 8006ca8:	193b      	adds	r3, r7, r4
 8006caa:	4a40      	ldr	r2, [pc, #256]	; (8006dac <MX_GPIO_Init+0x1d8>)
 8006cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cae:	193b      	adds	r3, r7, r4
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb4:	193b      	adds	r3, r7, r4
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cba:	193b      	adds	r3, r7, r4
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc0:	193a      	adds	r2, r7, r4
 8006cc2:	2390      	movs	r3, #144	; 0x90
 8006cc4:	05db      	lsls	r3, r3, #23
 8006cc6:	0011      	movs	r1, r2
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 fd95 	bl	80077f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8006cce:	193b      	adds	r3, r7, r4
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006cd4:	193b      	adds	r3, r7, r4
 8006cd6:	2288      	movs	r2, #136	; 0x88
 8006cd8:	0352      	lsls	r2, r2, #13
 8006cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006cdc:	193b      	adds	r3, r7, r4
 8006cde:	2202      	movs	r2, #2
 8006ce0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006ce2:	193a      	adds	r2, r7, r4
 8006ce4:	2390      	movs	r3, #144	; 0x90
 8006ce6:	05db      	lsls	r3, r3, #23
 8006ce8:	0011      	movs	r1, r2
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 fd84 	bl	80077f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin DC_Pin LED_R_Pin BT_KEY_Pin
                           BACKLIGHT_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|DC_Pin|LED_R_Pin|BT_KEY_Pin
 8006cf0:	193b      	adds	r3, r7, r4
 8006cf2:	4a2f      	ldr	r2, [pc, #188]	; (8006db0 <MX_GPIO_Init+0x1dc>)
 8006cf4:	601a      	str	r2, [r3, #0]
                          |BACKLIGHT_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cf6:	193b      	adds	r3, r7, r4
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfc:	193b      	adds	r3, r7, r4
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d02:	193b      	adds	r3, r7, r4
 8006d04:	2200      	movs	r2, #0
 8006d06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d08:	193b      	adds	r3, r7, r4
 8006d0a:	4a2a      	ldr	r2, [pc, #168]	; (8006db4 <MX_GPIO_Init+0x1e0>)
 8006d0c:	0019      	movs	r1, r3
 8006d0e:	0010      	movs	r0, r2
 8006d10:	f000 fd72 	bl	80077f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin BT_STATE_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|BT_STATE_Pin;
 8006d14:	193b      	adds	r3, r7, r4
 8006d16:	2222      	movs	r2, #34	; 0x22
 8006d18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d1a:	193b      	adds	r3, r7, r4
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	193b      	adds	r3, r7, r4
 8006d22:	2200      	movs	r2, #0
 8006d24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d26:	193b      	adds	r3, r7, r4
 8006d28:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <MX_GPIO_Init+0x1e0>)
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	0010      	movs	r0, r2
 8006d2e:	f000 fd63 	bl	80077f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : READER_TYPE_Pin */
  GPIO_InitStruct.Pin = READER_TYPE_Pin;
 8006d32:	0021      	movs	r1, r4
 8006d34:	187b      	adds	r3, r7, r1
 8006d36:	2280      	movs	r2, #128	; 0x80
 8006d38:	00d2      	lsls	r2, r2, #3
 8006d3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d3c:	000c      	movs	r4, r1
 8006d3e:	193b      	adds	r3, r7, r4
 8006d40:	2200      	movs	r2, #0
 8006d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d44:	193b      	adds	r3, r7, r4
 8006d46:	2201      	movs	r2, #1
 8006d48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(READER_TYPE_GPIO_Port, &GPIO_InitStruct);
 8006d4a:	193b      	adds	r3, r7, r4
 8006d4c:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <MX_GPIO_Init+0x1e0>)
 8006d4e:	0019      	movs	r1, r3
 8006d50:	0010      	movs	r0, r2
 8006d52:	f000 fd51 	bl	80077f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8006d56:	0021      	movs	r1, r4
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	2280      	movs	r2, #128	; 0x80
 8006d5c:	0152      	lsls	r2, r2, #5
 8006d5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	22c4      	movs	r2, #196	; 0xc4
 8006d64:	0392      	lsls	r2, r2, #14
 8006d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d68:	187b      	adds	r3, r7, r1
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8006d6e:	187b      	adds	r3, r7, r1
 8006d70:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <MX_GPIO_Init+0x1e0>)
 8006d72:	0019      	movs	r1, r3
 8006d74:	0010      	movs	r0, r2
 8006d76:	f000 fd3f 	bl	80077f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	2005      	movs	r0, #5
 8006d80:	f000 fc7a 	bl	8007678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8006d84:	2005      	movs	r0, #5
 8006d86:	f000 fc8c 	bl	80076a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2007      	movs	r0, #7
 8006d90:	f000 fc72 	bl	8007678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006d94:	2007      	movs	r0, #7
 8006d96:	f000 fc84 	bl	80076a2 <HAL_NVIC_EnableIRQ>

}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b00b      	add	sp, #44	; 0x2c
 8006da0:	bd90      	pop	{r4, r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	40021000 	.word	0x40021000
 8006da8:	48000800 	.word	0x48000800
 8006dac:	00001111 	.word	0x00001111
 8006db0:	00000b45 	.word	0x00000b45
 8006db4:	48000400 	.word	0x48000400

08006db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006dbc:	b672      	cpsid	i
}
 8006dbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006dc0:	e7fe      	b.n	8006dc0 <Error_Handler+0x8>
	...

08006dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <HAL_MspInit+0x44>)
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_MspInit+0x44>)
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	619a      	str	r2, [r3, #24]
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <HAL_MspInit+0x44>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4013      	ands	r3, r2
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <HAL_MspInit+0x44>)
 8006de4:	69da      	ldr	r2, [r3, #28]
 8006de6:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <HAL_MspInit+0x44>)
 8006de8:	2180      	movs	r1, #128	; 0x80
 8006dea:	0549      	lsls	r1, r1, #21
 8006dec:	430a      	orrs	r2, r1
 8006dee:	61da      	str	r2, [r3, #28]
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <HAL_MspInit+0x44>)
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	055b      	lsls	r3, r3, #21
 8006df8:	4013      	ands	r3, r2
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b002      	add	sp, #8
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	40021000 	.word	0x40021000

08006e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e0c:	b590      	push	{r4, r7, lr}
 8006e0e:	b08b      	sub	sp, #44	; 0x2c
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e14:	2414      	movs	r4, #20
 8006e16:	193b      	adds	r3, r7, r4
 8006e18:	0018      	movs	r0, r3
 8006e1a:	2314      	movs	r3, #20
 8006e1c:	001a      	movs	r2, r3
 8006e1e:	2100      	movs	r1, #0
 8006e20:	f004 fc50 	bl	800b6c4 <memset>
  if(hi2c->Instance==I2C1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1c      	ldr	r2, [pc, #112]	; (8006e9c <HAL_I2C_MspInit+0x90>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d131      	bne.n	8006e92 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <HAL_I2C_MspInit+0x94>)
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	4b1b      	ldr	r3, [pc, #108]	; (8006ea0 <HAL_I2C_MspInit+0x94>)
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	03c9      	lsls	r1, r1, #15
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	615a      	str	r2, [r3, #20]
 8006e3c:	4b18      	ldr	r3, [pc, #96]	; (8006ea0 <HAL_I2C_MspInit+0x94>)
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	03db      	lsls	r3, r3, #15
 8006e44:	4013      	ands	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e4a:	0021      	movs	r1, r4
 8006e4c:	187b      	adds	r3, r7, r1
 8006e4e:	2203      	movs	r2, #3
 8006e50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e52:	187b      	adds	r3, r7, r1
 8006e54:	2212      	movs	r2, #18
 8006e56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e58:	187b      	adds	r3, r7, r1
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	2203      	movs	r2, #3
 8006e62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	2201      	movs	r2, #1
 8006e68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <HAL_I2C_MspInit+0x98>)
 8006e6e:	0019      	movs	r1, r3
 8006e70:	0010      	movs	r0, r2
 8006e72:	f000 fcc1 	bl	80077f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <HAL_I2C_MspInit+0x94>)
 8006e78:	69da      	ldr	r2, [r3, #28]
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <HAL_I2C_MspInit+0x94>)
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	0389      	lsls	r1, r1, #14
 8006e80:	430a      	orrs	r2, r1
 8006e82:	61da      	str	r2, [r3, #28]
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_I2C_MspInit+0x94>)
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	039b      	lsls	r3, r3, #14
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b00b      	add	sp, #44	; 0x2c
 8006e98:	bd90      	pop	{r4, r7, pc}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	40005400 	.word	0x40005400
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	48001400 	.word	0x48001400

08006ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ea8:	b590      	push	{r4, r7, lr}
 8006eaa:	b08d      	sub	sp, #52	; 0x34
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb0:	241c      	movs	r4, #28
 8006eb2:	193b      	adds	r3, r7, r4
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	2314      	movs	r3, #20
 8006eb8:	001a      	movs	r2, r3
 8006eba:	2100      	movs	r1, #0
 8006ebc:	f004 fc02 	bl	800b6c4 <memset>
  if(hspi->Instance==SPI1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a39      	ldr	r2, [pc, #228]	; (8006fac <HAL_SPI_MspInit+0x104>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d133      	bne.n	8006f32 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006eca:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	4b38      	ldr	r3, [pc, #224]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006ed0:	2180      	movs	r1, #128	; 0x80
 8006ed2:	0149      	lsls	r1, r1, #5
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	619a      	str	r2, [r3, #24]
 8006ed8:	4b35      	ldr	r3, [pc, #212]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	015b      	lsls	r3, r3, #5
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ee6:	4b32      	ldr	r3, [pc, #200]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006ee8:	695a      	ldr	r2, [r3, #20]
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006eec:	2180      	movs	r1, #128	; 0x80
 8006eee:	0289      	lsls	r1, r1, #10
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	615a      	str	r2, [r3, #20]
 8006ef4:	4b2e      	ldr	r3, [pc, #184]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	029b      	lsls	r3, r3, #10
 8006efc:	4013      	ands	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006f02:	0021      	movs	r1, r4
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	22e0      	movs	r2, #224	; 0xe0
 8006f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0a:	187b      	adds	r3, r7, r1
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	187b      	adds	r3, r7, r1
 8006f12:	2200      	movs	r2, #0
 8006f14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f16:	187b      	adds	r3, r7, r1
 8006f18:	2203      	movs	r2, #3
 8006f1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006f1c:	187b      	adds	r3, r7, r1
 8006f1e:	2200      	movs	r2, #0
 8006f20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f22:	187a      	adds	r2, r7, r1
 8006f24:	2390      	movs	r3, #144	; 0x90
 8006f26:	05db      	lsls	r3, r3, #23
 8006f28:	0011      	movs	r1, r2
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f000 fc64 	bl	80077f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f30:	e037      	b.n	8006fa2 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1f      	ldr	r2, [pc, #124]	; (8006fb4 <HAL_SPI_MspInit+0x10c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d132      	bne.n	8006fa2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f3c:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006f42:	2180      	movs	r1, #128	; 0x80
 8006f44:	01c9      	lsls	r1, r1, #7
 8006f46:	430a      	orrs	r2, r1
 8006f48:	61da      	str	r2, [r3, #28]
 8006f4a:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	2380      	movs	r3, #128	; 0x80
 8006f50:	01db      	lsls	r3, r3, #7
 8006f52:	4013      	ands	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f58:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	02c9      	lsls	r1, r1, #11
 8006f62:	430a      	orrs	r2, r1
 8006f64:	615a      	str	r2, [r3, #20]
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <HAL_SPI_MspInit+0x108>)
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	2380      	movs	r3, #128	; 0x80
 8006f6c:	02db      	lsls	r3, r3, #11
 8006f6e:	4013      	ands	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f74:	211c      	movs	r1, #28
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	22e0      	movs	r2, #224	; 0xe0
 8006f7a:	0212      	lsls	r2, r2, #8
 8006f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7e:	187b      	adds	r3, r7, r1
 8006f80:	2202      	movs	r2, #2
 8006f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f84:	187b      	adds	r3, r7, r1
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	2200      	movs	r2, #0
 8006f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f96:	187b      	adds	r3, r7, r1
 8006f98:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <HAL_SPI_MspInit+0x110>)
 8006f9a:	0019      	movs	r1, r3
 8006f9c:	0010      	movs	r0, r2
 8006f9e:	f000 fc2b 	bl	80077f8 <HAL_GPIO_Init>
}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b00d      	add	sp, #52	; 0x34
 8006fa8:	bd90      	pop	{r4, r7, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	40013000 	.word	0x40013000
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	40003800 	.word	0x40003800
 8006fb8:	48000400 	.word	0x48000400

08006fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <HAL_TIM_Base_MspInit+0x38>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d10d      	bne.n	8006fea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8006fd4:	2180      	movs	r1, #128	; 0x80
 8006fd6:	02c9      	lsls	r1, r1, #11
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	619a      	str	r2, [r3, #24]
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8006fde:	699a      	ldr	r2, [r3, #24]
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	02db      	lsls	r3, r3, #11
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	46bd      	mov	sp, r7
 8006fee:	b004      	add	sp, #16
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	40014800 	.word	0x40014800
 8006ff8:	40021000 	.word	0x40021000

08006ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b08f      	sub	sp, #60	; 0x3c
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007004:	2424      	movs	r4, #36	; 0x24
 8007006:	193b      	adds	r3, r7, r4
 8007008:	0018      	movs	r0, r3
 800700a:	2314      	movs	r3, #20
 800700c:	001a      	movs	r2, r3
 800700e:	2100      	movs	r1, #0
 8007010:	f004 fb58 	bl	800b6c4 <memset>
  if(huart->Instance==USART1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a69      	ldr	r2, [pc, #420]	; (80071c0 <HAL_UART_MspInit+0x1c4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d134      	bne.n	8007088 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800701e:	4b69      	ldr	r3, [pc, #420]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	4b68      	ldr	r3, [pc, #416]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	01c9      	lsls	r1, r1, #7
 8007028:	430a      	orrs	r2, r1
 800702a:	619a      	str	r2, [r3, #24]
 800702c:	4b65      	ldr	r3, [pc, #404]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 800702e:	699a      	ldr	r2, [r3, #24]
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	01db      	lsls	r3, r3, #7
 8007034:	4013      	ands	r3, r2
 8007036:	623b      	str	r3, [r7, #32]
 8007038:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703a:	4b62      	ldr	r3, [pc, #392]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	4b61      	ldr	r3, [pc, #388]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007040:	2180      	movs	r1, #128	; 0x80
 8007042:	0289      	lsls	r1, r1, #10
 8007044:	430a      	orrs	r2, r1
 8007046:	615a      	str	r2, [r3, #20]
 8007048:	4b5e      	ldr	r3, [pc, #376]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 800704a:	695a      	ldr	r2, [r3, #20]
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	029b      	lsls	r3, r3, #10
 8007050:	4013      	ands	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007056:	193b      	adds	r3, r7, r4
 8007058:	22c0      	movs	r2, #192	; 0xc0
 800705a:	00d2      	lsls	r2, r2, #3
 800705c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705e:	0021      	movs	r1, r4
 8007060:	187b      	adds	r3, r7, r1
 8007062:	2202      	movs	r2, #2
 8007064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007066:	187b      	adds	r3, r7, r1
 8007068:	2200      	movs	r2, #0
 800706a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800706c:	187b      	adds	r3, r7, r1
 800706e:	2203      	movs	r2, #3
 8007070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007072:	187b      	adds	r3, r7, r1
 8007074:	2201      	movs	r2, #1
 8007076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007078:	187a      	adds	r2, r7, r1
 800707a:	2390      	movs	r3, #144	; 0x90
 800707c:	05db      	lsls	r3, r3, #23
 800707e:	0011      	movs	r1, r2
 8007080:	0018      	movs	r0, r3
 8007082:	f000 fbb9 	bl	80077f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8007086:	e096      	b.n	80071b6 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a4e      	ldr	r2, [pc, #312]	; (80071c8 <HAL_UART_MspInit+0x1cc>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d152      	bne.n	8007138 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007092:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	4b4b      	ldr	r3, [pc, #300]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	0289      	lsls	r1, r1, #10
 800709c:	430a      	orrs	r2, r1
 800709e:	61da      	str	r2, [r3, #28]
 80070a0:	4b48      	ldr	r3, [pc, #288]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	2380      	movs	r3, #128	; 0x80
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	4013      	ands	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ae:	4b45      	ldr	r3, [pc, #276]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 80070b0:	695a      	ldr	r2, [r3, #20]
 80070b2:	4b44      	ldr	r3, [pc, #272]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	0289      	lsls	r1, r1, #10
 80070b8:	430a      	orrs	r2, r1
 80070ba:	615a      	str	r2, [r3, #20]
 80070bc:	4b41      	ldr	r3, [pc, #260]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	4013      	ands	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070ca:	2424      	movs	r4, #36	; 0x24
 80070cc:	193b      	adds	r3, r7, r4
 80070ce:	2204      	movs	r2, #4
 80070d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d2:	193b      	adds	r3, r7, r4
 80070d4:	2202      	movs	r2, #2
 80070d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d8:	193b      	adds	r3, r7, r4
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070de:	193b      	adds	r3, r7, r4
 80070e0:	2203      	movs	r2, #3
 80070e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	2201      	movs	r2, #1
 80070e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ea:	193a      	adds	r2, r7, r4
 80070ec:	2390      	movs	r3, #144	; 0x90
 80070ee:	05db      	lsls	r3, r3, #23
 80070f0:	0011      	movs	r1, r2
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 fb80 	bl	80077f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80070f8:	0021      	movs	r1, r4
 80070fa:	187b      	adds	r3, r7, r1
 80070fc:	2208      	movs	r2, #8
 80070fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007100:	187b      	adds	r3, r7, r1
 8007102:	2202      	movs	r2, #2
 8007104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007106:	187b      	adds	r3, r7, r1
 8007108:	2201      	movs	r2, #1
 800710a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800710c:	187b      	adds	r3, r7, r1
 800710e:	2203      	movs	r2, #3
 8007110:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007112:	187b      	adds	r3, r7, r1
 8007114:	2201      	movs	r2, #1
 8007116:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007118:	187a      	adds	r2, r7, r1
 800711a:	2390      	movs	r3, #144	; 0x90
 800711c:	05db      	lsls	r3, r3, #23
 800711e:	0011      	movs	r1, r2
 8007120:	0018      	movs	r0, r3
 8007122:	f000 fb69 	bl	80077f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	201c      	movs	r0, #28
 800712c:	f000 faa4 	bl	8007678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007130:	201c      	movs	r0, #28
 8007132:	f000 fab6 	bl	80076a2 <HAL_NVIC_EnableIRQ>
}
 8007136:	e03e      	b.n	80071b6 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART5)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a23      	ldr	r2, [pc, #140]	; (80071cc <HAL_UART_MspInit+0x1d0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d139      	bne.n	80071b6 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART5_CLK_ENABLE();
 8007142:	4b20      	ldr	r3, [pc, #128]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007144:	69da      	ldr	r2, [r3, #28]
 8007146:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007148:	2180      	movs	r1, #128	; 0x80
 800714a:	0349      	lsls	r1, r1, #13
 800714c:	430a      	orrs	r2, r1
 800714e:	61da      	str	r2, [r3, #28]
 8007150:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	035b      	lsls	r3, r3, #13
 8007158:	4013      	ands	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800715e:	4b19      	ldr	r3, [pc, #100]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	02c9      	lsls	r1, r1, #11
 8007168:	430a      	orrs	r2, r1
 800716a:	615a      	str	r2, [r3, #20]
 800716c:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <HAL_UART_MspInit+0x1c8>)
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	02db      	lsls	r3, r3, #11
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800717a:	2124      	movs	r1, #36	; 0x24
 800717c:	187b      	adds	r3, r7, r1
 800717e:	2218      	movs	r2, #24
 8007180:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007182:	187b      	adds	r3, r7, r1
 8007184:	2202      	movs	r2, #2
 8007186:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007188:	187b      	adds	r3, r7, r1
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800718e:	187b      	adds	r3, r7, r1
 8007190:	2203      	movs	r2, #3
 8007192:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 8007194:	187b      	adds	r3, r7, r1
 8007196:	2204      	movs	r2, #4
 8007198:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800719a:	187b      	adds	r3, r7, r1
 800719c:	4a0c      	ldr	r2, [pc, #48]	; (80071d0 <HAL_UART_MspInit+0x1d4>)
 800719e:	0019      	movs	r1, r3
 80071a0:	0010      	movs	r0, r2
 80071a2:	f000 fb29 	bl	80077f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	201d      	movs	r0, #29
 80071ac:	f000 fa64 	bl	8007678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 80071b0:	201d      	movs	r0, #29
 80071b2:	f000 fa76 	bl	80076a2 <HAL_NVIC_EnableIRQ>
}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b00f      	add	sp, #60	; 0x3c
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	40013800 	.word	0x40013800
 80071c4:	40021000 	.word	0x40021000
 80071c8:	40004400 	.word	0x40004400
 80071cc:	40005000 	.word	0x40005000
 80071d0:	48000400 	.word	0x48000400

080071d4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_UART_MspDeInit+0x88>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d10e      	bne.n	8007204 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80071e6:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <HAL_UART_MspDeInit+0x8c>)
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <HAL_UART_MspDeInit+0x8c>)
 80071ec:	491d      	ldr	r1, [pc, #116]	; (8007264 <HAL_UART_MspDeInit+0x90>)
 80071ee:	400a      	ands	r2, r1
 80071f0:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80071f2:	23c0      	movs	r3, #192	; 0xc0
 80071f4:	00da      	lsls	r2, r3, #3
 80071f6:	2390      	movs	r3, #144	; 0x90
 80071f8:	05db      	lsls	r3, r3, #23
 80071fa:	0011      	movs	r1, r2
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 fc6b 	bl	8007ad8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8007202:	e027      	b.n	8007254 <HAL_UART_MspDeInit+0x80>
  else if(huart->Instance==USART2)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <HAL_UART_MspDeInit+0x94>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10f      	bne.n	800722e <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART2_CLK_DISABLE();
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <HAL_UART_MspDeInit+0x8c>)
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	4b13      	ldr	r3, [pc, #76]	; (8007260 <HAL_UART_MspDeInit+0x8c>)
 8007214:	4915      	ldr	r1, [pc, #84]	; (800726c <HAL_UART_MspDeInit+0x98>)
 8007216:	400a      	ands	r2, r1
 8007218:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800721a:	2390      	movs	r3, #144	; 0x90
 800721c:	05db      	lsls	r3, r3, #23
 800721e:	210c      	movs	r1, #12
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fc59 	bl	8007ad8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007226:	201c      	movs	r0, #28
 8007228:	f000 fa4b 	bl	80076c2 <HAL_NVIC_DisableIRQ>
}
 800722c:	e012      	b.n	8007254 <HAL_UART_MspDeInit+0x80>
  else if(huart->Instance==USART5)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a0f      	ldr	r2, [pc, #60]	; (8007270 <HAL_UART_MspDeInit+0x9c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10d      	bne.n	8007254 <HAL_UART_MspDeInit+0x80>
    __HAL_RCC_USART5_CLK_DISABLE();
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <HAL_UART_MspDeInit+0x8c>)
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	4b08      	ldr	r3, [pc, #32]	; (8007260 <HAL_UART_MspDeInit+0x8c>)
 800723e:	490d      	ldr	r1, [pc, #52]	; (8007274 <HAL_UART_MspDeInit+0xa0>)
 8007240:	400a      	ands	r2, r1
 8007242:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <HAL_UART_MspDeInit+0xa4>)
 8007246:	2118      	movs	r1, #24
 8007248:	0018      	movs	r0, r3
 800724a:	f000 fc45 	bl	8007ad8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_6_IRQn);
 800724e:	201d      	movs	r0, #29
 8007250:	f000 fa37 	bl	80076c2 <HAL_NVIC_DisableIRQ>
}
 8007254:	46c0      	nop			; (mov r8, r8)
 8007256:	46bd      	mov	sp, r7
 8007258:	b002      	add	sp, #8
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40013800 	.word	0x40013800
 8007260:	40021000 	.word	0x40021000
 8007264:	ffffbfff 	.word	0xffffbfff
 8007268:	40004400 	.word	0x40004400
 800726c:	fffdffff 	.word	0xfffdffff
 8007270:	40005000 	.word	0x40005000
 8007274:	ffefffff 	.word	0xffefffff
 8007278:	48000400 	.word	0x48000400

0800727c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007280:	e7fe      	b.n	8007280 <NMI_Handler+0x4>

08007282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007286:	e7fe      	b.n	8007286 <HardFault_Handler+0x4>

08007288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072a0:	f000 f8dc 	bl	800745c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80072ae:	2002      	movs	r0, #2
 80072b0:	f000 fd38 	bl	8007d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	015b      	lsls	r3, r3, #5
 80072c2:	0018      	movs	r0, r3
 80072c4:	f000 fd2e 	bl	8007d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80072c8:	46c0      	nop			; (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80072d4:	4b03      	ldr	r3, [pc, #12]	; (80072e4 <USART2_IRQHandler+0x14>)
 80072d6:	0018      	movs	r0, r3
 80072d8:	f003 f888 	bl	800a3ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80072dc:	46c0      	nop			; (mov r8, r8)
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	2000578c 	.word	0x2000578c

080072e8 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80072ec:	4b03      	ldr	r3, [pc, #12]	; (80072fc <USART3_6_IRQHandler+0x14>)
 80072ee:	0018      	movs	r0, r3
 80072f0:	f003 f87c 	bl	800a3ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 80072f4:	46c0      	nop			; (mov r8, r8)
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000304 	.word	0x20000304

08007300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007308:	4a14      	ldr	r2, [pc, #80]	; (800735c <_sbrk+0x5c>)
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <_sbrk+0x60>)
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007314:	4b13      	ldr	r3, [pc, #76]	; (8007364 <_sbrk+0x64>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <_sbrk+0x64>)
 800731e:	4a12      	ldr	r2, [pc, #72]	; (8007368 <_sbrk+0x68>)
 8007320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <_sbrk+0x64>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	18d3      	adds	r3, r2, r3
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	d207      	bcs.n	8007340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007330:	f004 f99e 	bl	800b670 <__errno>
 8007334:	0003      	movs	r3, r0
 8007336:	220c      	movs	r2, #12
 8007338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800733a:	2301      	movs	r3, #1
 800733c:	425b      	negs	r3, r3
 800733e:	e009      	b.n	8007354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007340:	4b08      	ldr	r3, [pc, #32]	; (8007364 <_sbrk+0x64>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <_sbrk+0x64>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	18d2      	adds	r2, r2, r3
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <_sbrk+0x64>)
 8007350:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007352:	68fb      	ldr	r3, [r7, #12]
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b006      	add	sp, #24
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20008000 	.word	0x20008000
 8007360:	00000400 	.word	0x00000400
 8007364:	20000164 	.word	0x20000164
 8007368:	20005838 	.word	0x20005838

0800736c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8007370:	46c0      	nop			; (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007378:	480d      	ldr	r0, [pc, #52]	; (80073b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800737a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800737c:	f7ff fff6 	bl	800736c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007380:	480c      	ldr	r0, [pc, #48]	; (80073b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8007382:	490d      	ldr	r1, [pc, #52]	; (80073b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <LoopForever+0xe>)
  movs r3, #0
 8007386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007388:	e002      	b.n	8007390 <LoopCopyDataInit>

0800738a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800738a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800738c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800738e:	3304      	adds	r3, #4

08007390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007394:	d3f9      	bcc.n	800738a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007396:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007398:	4c0a      	ldr	r4, [pc, #40]	; (80073c4 <LoopForever+0x16>)
  movs r3, #0
 800739a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800739c:	e001      	b.n	80073a2 <LoopFillZerobss>

0800739e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800739e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073a0:	3204      	adds	r2, #4

080073a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073a4:	d3fb      	bcc.n	800739e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80073a6:	f004 f969 	bl	800b67c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80073aa:	f7ff f85f 	bl	800646c <main>

080073ae <LoopForever>:

LoopForever:
    b LoopForever
 80073ae:	e7fe      	b.n	80073ae <LoopForever>
  ldr   r0, =_estack
 80073b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80073b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80073b8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80073bc:	0800fd40 	.word	0x0800fd40
  ldr r2, =_sbss
 80073c0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80073c4:	20005838 	.word	0x20005838

080073c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80073c8:	e7fe      	b.n	80073c8 <ADC1_IRQHandler>
	...

080073cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <HAL_Init+0x24>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <HAL_Init+0x24>)
 80073d6:	2110      	movs	r1, #16
 80073d8:	430a      	orrs	r2, r1
 80073da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80073dc:	2000      	movs	r0, #0
 80073de:	f000 f809 	bl	80073f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80073e2:	f7ff fcef 	bl	8006dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	0018      	movs	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	40022000 	.word	0x40022000

080073f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80073fc:	4b14      	ldr	r3, [pc, #80]	; (8007450 <HAL_InitTick+0x5c>)
 80073fe:	681c      	ldr	r4, [r3, #0]
 8007400:	4b14      	ldr	r3, [pc, #80]	; (8007454 <HAL_InitTick+0x60>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	0019      	movs	r1, r3
 8007406:	23fa      	movs	r3, #250	; 0xfa
 8007408:	0098      	lsls	r0, r3, #2
 800740a:	f7f8 fe8d 	bl	8000128 <__udivsi3>
 800740e:	0003      	movs	r3, r0
 8007410:	0019      	movs	r1, r3
 8007412:	0020      	movs	r0, r4
 8007414:	f7f8 fe88 	bl	8000128 <__udivsi3>
 8007418:	0003      	movs	r3, r0
 800741a:	0018      	movs	r0, r3
 800741c:	f000 f961 	bl	80076e2 <HAL_SYSTICK_Config>
 8007420:	1e03      	subs	r3, r0, #0
 8007422:	d001      	beq.n	8007428 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e00f      	b.n	8007448 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b03      	cmp	r3, #3
 800742c:	d80b      	bhi.n	8007446 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	2301      	movs	r3, #1
 8007432:	425b      	negs	r3, r3
 8007434:	2200      	movs	r2, #0
 8007436:	0018      	movs	r0, r3
 8007438:	f000 f91e 	bl	8007678 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <HAL_InitTick+0x64>)
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	e000      	b.n	8007448 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b003      	add	sp, #12
 800744e:	bd90      	pop	{r4, r7, pc}
 8007450:	20000094 	.word	0x20000094
 8007454:	2000009c 	.word	0x2000009c
 8007458:	20000098 	.word	0x20000098

0800745c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_IncTick+0x1c>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	001a      	movs	r2, r3
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <HAL_IncTick+0x20>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	18d2      	adds	r2, r2, r3
 800746c:	4b03      	ldr	r3, [pc, #12]	; (800747c <HAL_IncTick+0x20>)
 800746e:	601a      	str	r2, [r3, #0]
}
 8007470:	46c0      	nop			; (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	2000009c 	.word	0x2000009c
 800747c:	20005824 	.word	0x20005824

08007480 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  return uwTick;
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <HAL_GetTick+0x10>)
 8007486:	681b      	ldr	r3, [r3, #0]
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	20005824 	.word	0x20005824

08007494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800749c:	f7ff fff0 	bl	8007480 <HAL_GetTick>
 80074a0:	0003      	movs	r3, r0
 80074a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	d005      	beq.n	80074ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <HAL_Delay+0x44>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	001a      	movs	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	189b      	adds	r3, r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	f7ff ffe0 	bl	8007480 <HAL_GetTick>
 80074c0:	0002      	movs	r2, r0
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d8f7      	bhi.n	80074bc <HAL_Delay+0x28>
  {
  }
}
 80074cc:	46c0      	nop			; (mov r8, r8)
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b004      	add	sp, #16
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	2000009c 	.word	0x2000009c

080074dc <__NVIC_EnableIRQ>:
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	0002      	movs	r2, r0
 80074e4:	1dfb      	adds	r3, r7, #7
 80074e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80074e8:	1dfb      	adds	r3, r7, #7
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b7f      	cmp	r3, #127	; 0x7f
 80074ee:	d809      	bhi.n	8007504 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074f0:	1dfb      	adds	r3, r7, #7
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	001a      	movs	r2, r3
 80074f6:	231f      	movs	r3, #31
 80074f8:	401a      	ands	r2, r3
 80074fa:	4b04      	ldr	r3, [pc, #16]	; (800750c <__NVIC_EnableIRQ+0x30>)
 80074fc:	2101      	movs	r1, #1
 80074fe:	4091      	lsls	r1, r2
 8007500:	000a      	movs	r2, r1
 8007502:	601a      	str	r2, [r3, #0]
}
 8007504:	46c0      	nop			; (mov r8, r8)
 8007506:	46bd      	mov	sp, r7
 8007508:	b002      	add	sp, #8
 800750a:	bd80      	pop	{r7, pc}
 800750c:	e000e100 	.word	0xe000e100

08007510 <__NVIC_DisableIRQ>:
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	0002      	movs	r2, r0
 8007518:	1dfb      	adds	r3, r7, #7
 800751a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b7f      	cmp	r3, #127	; 0x7f
 8007522:	d810      	bhi.n	8007546 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007524:	1dfb      	adds	r3, r7, #7
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	001a      	movs	r2, r3
 800752a:	231f      	movs	r3, #31
 800752c:	4013      	ands	r3, r2
 800752e:	4908      	ldr	r1, [pc, #32]	; (8007550 <__NVIC_DisableIRQ+0x40>)
 8007530:	2201      	movs	r2, #1
 8007532:	409a      	lsls	r2, r3
 8007534:	0013      	movs	r3, r2
 8007536:	2280      	movs	r2, #128	; 0x80
 8007538:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800753a:	f3bf 8f4f 	dsb	sy
}
 800753e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007540:	f3bf 8f6f 	isb	sy
}
 8007544:	46c0      	nop			; (mov r8, r8)
}
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	b002      	add	sp, #8
 800754c:	bd80      	pop	{r7, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	e000e100 	.word	0xe000e100

08007554 <__NVIC_SetPriority>:
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	0002      	movs	r2, r0
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	1dfb      	adds	r3, r7, #7
 8007560:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007562:	1dfb      	adds	r3, r7, #7
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b7f      	cmp	r3, #127	; 0x7f
 8007568:	d828      	bhi.n	80075bc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800756a:	4a2f      	ldr	r2, [pc, #188]	; (8007628 <__NVIC_SetPriority+0xd4>)
 800756c:	1dfb      	adds	r3, r7, #7
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b25b      	sxtb	r3, r3
 8007572:	089b      	lsrs	r3, r3, #2
 8007574:	33c0      	adds	r3, #192	; 0xc0
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	589b      	ldr	r3, [r3, r2]
 800757a:	1dfa      	adds	r2, r7, #7
 800757c:	7812      	ldrb	r2, [r2, #0]
 800757e:	0011      	movs	r1, r2
 8007580:	2203      	movs	r2, #3
 8007582:	400a      	ands	r2, r1
 8007584:	00d2      	lsls	r2, r2, #3
 8007586:	21ff      	movs	r1, #255	; 0xff
 8007588:	4091      	lsls	r1, r2
 800758a:	000a      	movs	r2, r1
 800758c:	43d2      	mvns	r2, r2
 800758e:	401a      	ands	r2, r3
 8007590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	019b      	lsls	r3, r3, #6
 8007596:	22ff      	movs	r2, #255	; 0xff
 8007598:	401a      	ands	r2, r3
 800759a:	1dfb      	adds	r3, r7, #7
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	0018      	movs	r0, r3
 80075a0:	2303      	movs	r3, #3
 80075a2:	4003      	ands	r3, r0
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075a8:	481f      	ldr	r0, [pc, #124]	; (8007628 <__NVIC_SetPriority+0xd4>)
 80075aa:	1dfb      	adds	r3, r7, #7
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b25b      	sxtb	r3, r3
 80075b0:	089b      	lsrs	r3, r3, #2
 80075b2:	430a      	orrs	r2, r1
 80075b4:	33c0      	adds	r3, #192	; 0xc0
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	501a      	str	r2, [r3, r0]
}
 80075ba:	e031      	b.n	8007620 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075bc:	4a1b      	ldr	r2, [pc, #108]	; (800762c <__NVIC_SetPriority+0xd8>)
 80075be:	1dfb      	adds	r3, r7, #7
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	0019      	movs	r1, r3
 80075c4:	230f      	movs	r3, #15
 80075c6:	400b      	ands	r3, r1
 80075c8:	3b08      	subs	r3, #8
 80075ca:	089b      	lsrs	r3, r3, #2
 80075cc:	3306      	adds	r3, #6
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	18d3      	adds	r3, r2, r3
 80075d2:	3304      	adds	r3, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	1dfa      	adds	r2, r7, #7
 80075d8:	7812      	ldrb	r2, [r2, #0]
 80075da:	0011      	movs	r1, r2
 80075dc:	2203      	movs	r2, #3
 80075de:	400a      	ands	r2, r1
 80075e0:	00d2      	lsls	r2, r2, #3
 80075e2:	21ff      	movs	r1, #255	; 0xff
 80075e4:	4091      	lsls	r1, r2
 80075e6:	000a      	movs	r2, r1
 80075e8:	43d2      	mvns	r2, r2
 80075ea:	401a      	ands	r2, r3
 80075ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	019b      	lsls	r3, r3, #6
 80075f2:	22ff      	movs	r2, #255	; 0xff
 80075f4:	401a      	ands	r2, r3
 80075f6:	1dfb      	adds	r3, r7, #7
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	0018      	movs	r0, r3
 80075fc:	2303      	movs	r3, #3
 80075fe:	4003      	ands	r3, r0
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007604:	4809      	ldr	r0, [pc, #36]	; (800762c <__NVIC_SetPriority+0xd8>)
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	001c      	movs	r4, r3
 800760c:	230f      	movs	r3, #15
 800760e:	4023      	ands	r3, r4
 8007610:	3b08      	subs	r3, #8
 8007612:	089b      	lsrs	r3, r3, #2
 8007614:	430a      	orrs	r2, r1
 8007616:	3306      	adds	r3, #6
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	18c3      	adds	r3, r0, r3
 800761c:	3304      	adds	r3, #4
 800761e:	601a      	str	r2, [r3, #0]
}
 8007620:	46c0      	nop			; (mov r8, r8)
 8007622:	46bd      	mov	sp, r7
 8007624:	b003      	add	sp, #12
 8007626:	bd90      	pop	{r4, r7, pc}
 8007628:	e000e100 	.word	0xe000e100
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	1e5a      	subs	r2, r3, #1
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	045b      	lsls	r3, r3, #17
 8007640:	429a      	cmp	r2, r3
 8007642:	d301      	bcc.n	8007648 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007644:	2301      	movs	r3, #1
 8007646:	e010      	b.n	800766a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <SysTick_Config+0x44>)
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	3a01      	subs	r2, #1
 800764e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007650:	2301      	movs	r3, #1
 8007652:	425b      	negs	r3, r3
 8007654:	2103      	movs	r1, #3
 8007656:	0018      	movs	r0, r3
 8007658:	f7ff ff7c 	bl	8007554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <SysTick_Config+0x44>)
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007662:	4b04      	ldr	r3, [pc, #16]	; (8007674 <SysTick_Config+0x44>)
 8007664:	2207      	movs	r2, #7
 8007666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007668:	2300      	movs	r3, #0
}
 800766a:	0018      	movs	r0, r3
 800766c:	46bd      	mov	sp, r7
 800766e:	b002      	add	sp, #8
 8007670:	bd80      	pop	{r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	e000e010 	.word	0xe000e010

08007678 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	210f      	movs	r1, #15
 8007684:	187b      	adds	r3, r7, r1
 8007686:	1c02      	adds	r2, r0, #0
 8007688:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	187b      	adds	r3, r7, r1
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b25b      	sxtb	r3, r3
 8007692:	0011      	movs	r1, r2
 8007694:	0018      	movs	r0, r3
 8007696:	f7ff ff5d 	bl	8007554 <__NVIC_SetPriority>
}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b004      	add	sp, #16
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	0002      	movs	r2, r0
 80076aa:	1dfb      	adds	r3, r7, #7
 80076ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076ae:	1dfb      	adds	r3, r7, #7
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7ff ff11 	bl	80074dc <__NVIC_EnableIRQ>
}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	b002      	add	sp, #8
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	0002      	movs	r2, r0
 80076ca:	1dfb      	adds	r3, r7, #7
 80076cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80076ce:	1dfb      	adds	r3, r7, #7
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	0018      	movs	r0, r3
 80076d6:	f7ff ff1b 	bl	8007510 <__NVIC_DisableIRQ>
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b002      	add	sp, #8
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	0018      	movs	r0, r3
 80076ee:	f7ff ff9f 	bl	8007630 <SysTick_Config>
 80076f2:	0003      	movs	r3, r0
}
 80076f4:	0018      	movs	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b002      	add	sp, #8
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2221      	movs	r2, #33	; 0x21
 8007708:	5c9b      	ldrb	r3, [r3, r2]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d008      	beq.n	8007722 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2204      	movs	r2, #4
 8007714:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	2100      	movs	r1, #0
 800771c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e020      	b.n	8007764 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	210e      	movs	r1, #14
 800772e:	438a      	bics	r2, r1
 8007730:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2101      	movs	r1, #1
 800773e:	438a      	bics	r2, r1
 8007740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2101      	movs	r1, #1
 800774c:	4091      	lsls	r1, r2
 800774e:	000a      	movs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2221      	movs	r2, #33	; 0x21
 8007756:	2101      	movs	r1, #1
 8007758:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	2100      	movs	r1, #0
 8007760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	0018      	movs	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	b002      	add	sp, #8
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007774:	210f      	movs	r1, #15
 8007776:	187b      	adds	r3, r7, r1
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2221      	movs	r2, #33	; 0x21
 8007780:	5c9b      	ldrb	r3, [r3, r2]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d006      	beq.n	8007796 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2204      	movs	r2, #4
 800778c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800778e:	187b      	adds	r3, r7, r1
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e028      	b.n	80077e8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	210e      	movs	r1, #14
 80077a2:	438a      	bics	r2, r1
 80077a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2101      	movs	r1, #1
 80077b2:	438a      	bics	r2, r1
 80077b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2101      	movs	r1, #1
 80077c0:	4091      	lsls	r1, r2
 80077c2:	000a      	movs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2221      	movs	r2, #33	; 0x21
 80077ca:	2101      	movs	r1, #1
 80077cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	2100      	movs	r1, #0
 80077d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	0010      	movs	r0, r2
 80077e6:	4798      	blx	r3
    }
  }
  return status;
 80077e8:	230f      	movs	r3, #15
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	781b      	ldrb	r3, [r3, #0]
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b004      	add	sp, #16
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007806:	e14f      	b.n	8007aa8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2101      	movs	r1, #1
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4091      	lsls	r1, r2
 8007812:	000a      	movs	r2, r1
 8007814:	4013      	ands	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d100      	bne.n	8007820 <HAL_GPIO_Init+0x28>
 800781e:	e140      	b.n	8007aa2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2203      	movs	r2, #3
 8007826:	4013      	ands	r3, r2
 8007828:	2b01      	cmp	r3, #1
 800782a:	d005      	beq.n	8007838 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2203      	movs	r2, #3
 8007832:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007834:	2b02      	cmp	r3, #2
 8007836:	d130      	bne.n	800789a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	2203      	movs	r2, #3
 8007844:	409a      	lsls	r2, r3
 8007846:	0013      	movs	r3, r2
 8007848:	43da      	mvns	r2, r3
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4013      	ands	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	409a      	lsls	r2, r3
 800785a:	0013      	movs	r3, r2
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800786e:	2201      	movs	r2, #1
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	409a      	lsls	r2, r3
 8007874:	0013      	movs	r3, r2
 8007876:	43da      	mvns	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	4013      	ands	r3, r2
 800787c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	091b      	lsrs	r3, r3, #4
 8007884:	2201      	movs	r2, #1
 8007886:	401a      	ands	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	409a      	lsls	r2, r3
 800788c:	0013      	movs	r3, r2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2203      	movs	r2, #3
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d017      	beq.n	80078d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	2203      	movs	r2, #3
 80078b2:	409a      	lsls	r2, r3
 80078b4:	0013      	movs	r3, r2
 80078b6:	43da      	mvns	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4013      	ands	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	409a      	lsls	r2, r3
 80078c8:	0013      	movs	r3, r2
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	4013      	ands	r3, r2
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d123      	bne.n	800792a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	08da      	lsrs	r2, r3, #3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3208      	adds	r2, #8
 80078ea:	0092      	lsls	r2, r2, #2
 80078ec:	58d3      	ldr	r3, [r2, r3]
 80078ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2207      	movs	r2, #7
 80078f4:	4013      	ands	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	220f      	movs	r2, #15
 80078fa:	409a      	lsls	r2, r3
 80078fc:	0013      	movs	r3, r2
 80078fe:	43da      	mvns	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4013      	ands	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2107      	movs	r1, #7
 800790e:	400b      	ands	r3, r1
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	409a      	lsls	r2, r3
 8007914:	0013      	movs	r3, r2
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	08da      	lsrs	r2, r3, #3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3208      	adds	r2, #8
 8007924:	0092      	lsls	r2, r2, #2
 8007926:	6939      	ldr	r1, [r7, #16]
 8007928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	2203      	movs	r2, #3
 8007936:	409a      	lsls	r2, r3
 8007938:	0013      	movs	r3, r2
 800793a:	43da      	mvns	r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4013      	ands	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2203      	movs	r2, #3
 8007948:	401a      	ands	r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	409a      	lsls	r2, r3
 8007950:	0013      	movs	r3, r2
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	23c0      	movs	r3, #192	; 0xc0
 8007964:	029b      	lsls	r3, r3, #10
 8007966:	4013      	ands	r3, r2
 8007968:	d100      	bne.n	800796c <HAL_GPIO_Init+0x174>
 800796a:	e09a      	b.n	8007aa2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800796c:	4b54      	ldr	r3, [pc, #336]	; (8007ac0 <HAL_GPIO_Init+0x2c8>)
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	4b53      	ldr	r3, [pc, #332]	; (8007ac0 <HAL_GPIO_Init+0x2c8>)
 8007972:	2101      	movs	r1, #1
 8007974:	430a      	orrs	r2, r1
 8007976:	619a      	str	r2, [r3, #24]
 8007978:	4b51      	ldr	r3, [pc, #324]	; (8007ac0 <HAL_GPIO_Init+0x2c8>)
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2201      	movs	r2, #1
 800797e:	4013      	ands	r3, r2
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007984:	4a4f      	ldr	r2, [pc, #316]	; (8007ac4 <HAL_GPIO_Init+0x2cc>)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	089b      	lsrs	r3, r3, #2
 800798a:	3302      	adds	r3, #2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	589b      	ldr	r3, [r3, r2]
 8007990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2203      	movs	r2, #3
 8007996:	4013      	ands	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	220f      	movs	r2, #15
 800799c:	409a      	lsls	r2, r3
 800799e:	0013      	movs	r3, r2
 80079a0:	43da      	mvns	r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4013      	ands	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	2390      	movs	r3, #144	; 0x90
 80079ac:	05db      	lsls	r3, r3, #23
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d013      	beq.n	80079da <HAL_GPIO_Init+0x1e2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a44      	ldr	r2, [pc, #272]	; (8007ac8 <HAL_GPIO_Init+0x2d0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00d      	beq.n	80079d6 <HAL_GPIO_Init+0x1de>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a43      	ldr	r2, [pc, #268]	; (8007acc <HAL_GPIO_Init+0x2d4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d007      	beq.n	80079d2 <HAL_GPIO_Init+0x1da>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a42      	ldr	r2, [pc, #264]	; (8007ad0 <HAL_GPIO_Init+0x2d8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d101      	bne.n	80079ce <HAL_GPIO_Init+0x1d6>
 80079ca:	2303      	movs	r3, #3
 80079cc:	e006      	b.n	80079dc <HAL_GPIO_Init+0x1e4>
 80079ce:	2305      	movs	r3, #5
 80079d0:	e004      	b.n	80079dc <HAL_GPIO_Init+0x1e4>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e002      	b.n	80079dc <HAL_GPIO_Init+0x1e4>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <HAL_GPIO_Init+0x1e4>
 80079da:	2300      	movs	r3, #0
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	2103      	movs	r1, #3
 80079e0:	400a      	ands	r2, r1
 80079e2:	0092      	lsls	r2, r2, #2
 80079e4:	4093      	lsls	r3, r2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80079ec:	4935      	ldr	r1, [pc, #212]	; (8007ac4 <HAL_GPIO_Init+0x2cc>)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	089b      	lsrs	r3, r3, #2
 80079f2:	3302      	adds	r3, #2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	43da      	mvns	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	2380      	movs	r3, #128	; 0x80
 8007a10:	035b      	lsls	r3, r3, #13
 8007a12:	4013      	ands	r3, r2
 8007a14:	d003      	beq.n	8007a1e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007a1e:	4b2d      	ldr	r3, [pc, #180]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007a24:	4b2b      	ldr	r3, [pc, #172]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	43da      	mvns	r2, r3
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	4013      	ands	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	2380      	movs	r3, #128	; 0x80
 8007a3a:	039b      	lsls	r3, r3, #14
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007a48:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8007a4e:	4b21      	ldr	r3, [pc, #132]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	43da      	mvns	r2, r3
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	2380      	movs	r3, #128	; 0x80
 8007a64:	029b      	lsls	r3, r3, #10
 8007a66:	4013      	ands	r3, r2
 8007a68:	d003      	beq.n	8007a72 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007a72:	4b18      	ldr	r3, [pc, #96]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007a78:	4b16      	ldr	r3, [pc, #88]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	43da      	mvns	r2, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4013      	ands	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	2380      	movs	r3, #128	; 0x80
 8007a8e:	025b      	lsls	r3, r3, #9
 8007a90:	4013      	ands	r3, r2
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007a9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <HAL_GPIO_Init+0x2dc>)
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	40da      	lsrs	r2, r3
 8007ab0:	1e13      	subs	r3, r2, #0
 8007ab2:	d000      	beq.n	8007ab6 <HAL_GPIO_Init+0x2be>
 8007ab4:	e6a8      	b.n	8007808 <HAL_GPIO_Init+0x10>
  } 
}
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	46c0      	nop			; (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b006      	add	sp, #24
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	48000400 	.word	0x48000400
 8007acc:	48000800 	.word	0x48000800
 8007ad0:	48000c00 	.word	0x48000c00
 8007ad4:	40010400 	.word	0x40010400

08007ad8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007ae6:	e0b1      	b.n	8007c4c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007ae8:	2201      	movs	r2, #1
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	409a      	lsls	r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	4013      	ands	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d100      	bne.n	8007afc <HAL_GPIO_DeInit+0x24>
 8007afa:	e0a4      	b.n	8007c46 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007afc:	4a59      	ldr	r2, [pc, #356]	; (8007c64 <HAL_GPIO_DeInit+0x18c>)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	089b      	lsrs	r3, r3, #2
 8007b02:	3302      	adds	r3, #2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	589b      	ldr	r3, [r3, r2]
 8007b08:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	4013      	ands	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	220f      	movs	r2, #15
 8007b14:	409a      	lsls	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	2390      	movs	r3, #144	; 0x90
 8007b20:	05db      	lsls	r3, r3, #23
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d013      	beq.n	8007b4e <HAL_GPIO_DeInit+0x76>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a4f      	ldr	r2, [pc, #316]	; (8007c68 <HAL_GPIO_DeInit+0x190>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00d      	beq.n	8007b4a <HAL_GPIO_DeInit+0x72>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a4e      	ldr	r2, [pc, #312]	; (8007c6c <HAL_GPIO_DeInit+0x194>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d007      	beq.n	8007b46 <HAL_GPIO_DeInit+0x6e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a4d      	ldr	r2, [pc, #308]	; (8007c70 <HAL_GPIO_DeInit+0x198>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d101      	bne.n	8007b42 <HAL_GPIO_DeInit+0x6a>
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e006      	b.n	8007b50 <HAL_GPIO_DeInit+0x78>
 8007b42:	2305      	movs	r3, #5
 8007b44:	e004      	b.n	8007b50 <HAL_GPIO_DeInit+0x78>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e002      	b.n	8007b50 <HAL_GPIO_DeInit+0x78>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <HAL_GPIO_DeInit+0x78>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	2103      	movs	r1, #3
 8007b54:	400a      	ands	r2, r1
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	4093      	lsls	r3, r2
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d132      	bne.n	8007bc6 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b60:	4b44      	ldr	r3, [pc, #272]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	43d9      	mvns	r1, r3
 8007b68:	4b42      	ldr	r3, [pc, #264]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b6a:	400a      	ands	r2, r1
 8007b6c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b6e:	4b41      	ldr	r3, [pc, #260]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	43d9      	mvns	r1, r3
 8007b76:	4b3f      	ldr	r3, [pc, #252]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b78:	400a      	ands	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b7c:	4b3d      	ldr	r3, [pc, #244]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	43d9      	mvns	r1, r3
 8007b84:	4b3b      	ldr	r3, [pc, #236]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b86:	400a      	ands	r2, r1
 8007b88:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b8a:	4b3a      	ldr	r3, [pc, #232]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	43d9      	mvns	r1, r3
 8007b92:	4b38      	ldr	r3, [pc, #224]	; (8007c74 <HAL_GPIO_DeInit+0x19c>)
 8007b94:	400a      	ands	r2, r1
 8007b96:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	0013      	movs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007ba8:	4a2e      	ldr	r2, [pc, #184]	; (8007c64 <HAL_GPIO_DeInit+0x18c>)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	089b      	lsrs	r3, r3, #2
 8007bae:	3302      	adds	r3, #2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	589a      	ldr	r2, [r3, r2]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	43d9      	mvns	r1, r3
 8007bb8:	482a      	ldr	r0, [pc, #168]	; (8007c64 <HAL_GPIO_DeInit+0x18c>)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	089b      	lsrs	r3, r3, #2
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	0052      	lsls	r2, r2, #1
 8007bce:	2103      	movs	r1, #3
 8007bd0:	4091      	lsls	r1, r2
 8007bd2:	000a      	movs	r2, r1
 8007bd4:	43d2      	mvns	r2, r2
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	08da      	lsrs	r2, r3, #3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3208      	adds	r2, #8
 8007be4:	0092      	lsls	r2, r2, #2
 8007be6:	58d3      	ldr	r3, [r2, r3]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	2107      	movs	r1, #7
 8007bec:	400a      	ands	r2, r1
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	210f      	movs	r1, #15
 8007bf2:	4091      	lsls	r1, r2
 8007bf4:	000a      	movs	r2, r1
 8007bf6:	43d1      	mvns	r1, r2
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	08d2      	lsrs	r2, r2, #3
 8007bfc:	4019      	ands	r1, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3208      	adds	r2, #8
 8007c02:	0092      	lsls	r2, r2, #2
 8007c04:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	0052      	lsls	r2, r2, #1
 8007c0e:	2103      	movs	r1, #3
 8007c10:	4091      	lsls	r1, r2
 8007c12:	000a      	movs	r2, r1
 8007c14:	43d2      	mvns	r2, r2
 8007c16:	401a      	ands	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2101      	movs	r1, #1
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4091      	lsls	r1, r2
 8007c26:	000a      	movs	r2, r1
 8007c28:	43d2      	mvns	r2, r2
 8007c2a:	401a      	ands	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	0052      	lsls	r2, r2, #1
 8007c38:	2103      	movs	r1, #3
 8007c3a:	4091      	lsls	r1, r2
 8007c3c:	000a      	movs	r2, r1
 8007c3e:	43d2      	mvns	r2, r2
 8007c40:	401a      	ands	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]

    }

    position++;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	40da      	lsrs	r2, r3
 8007c52:	1e13      	subs	r3, r2, #0
 8007c54:	d000      	beq.n	8007c58 <HAL_GPIO_DeInit+0x180>
 8007c56:	e747      	b.n	8007ae8 <HAL_GPIO_DeInit+0x10>
  }
}
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b006      	add	sp, #24
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	40010000 	.word	0x40010000
 8007c68:	48000400 	.word	0x48000400
 8007c6c:	48000800 	.word	0x48000800
 8007c70:	48000c00 	.word	0x48000c00
 8007c74:	40010400 	.word	0x40010400

08007c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	000a      	movs	r2, r1
 8007c82:	1cbb      	adds	r3, r7, #2
 8007c84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	1cba      	adds	r2, r7, #2
 8007c8c:	8812      	ldrh	r2, [r2, #0]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	d004      	beq.n	8007c9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007c92:	230f      	movs	r3, #15
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	2201      	movs	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	e003      	b.n	8007ca4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c9c:	230f      	movs	r3, #15
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007ca4:	230f      	movs	r3, #15
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	781b      	ldrb	r3, [r3, #0]
  }
 8007caa:	0018      	movs	r0, r3
 8007cac:	46bd      	mov	sp, r7
 8007cae:	b004      	add	sp, #16
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	0008      	movs	r0, r1
 8007cbc:	0011      	movs	r1, r2
 8007cbe:	1cbb      	adds	r3, r7, #2
 8007cc0:	1c02      	adds	r2, r0, #0
 8007cc2:	801a      	strh	r2, [r3, #0]
 8007cc4:	1c7b      	adds	r3, r7, #1
 8007cc6:	1c0a      	adds	r2, r1, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cca:	1c7b      	adds	r3, r7, #1
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007cd2:	1cbb      	adds	r3, r7, #2
 8007cd4:	881a      	ldrh	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007cda:	e003      	b.n	8007ce4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007cdc:	1cbb      	adds	r3, r7, #2
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b002      	add	sp, #8
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	000a      	movs	r2, r1
 8007cf6:	1cbb      	adds	r3, r7, #2
 8007cf8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d00:	1cbb      	adds	r3, r7, #2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4013      	ands	r3, r2
 8007d08:	041a      	lsls	r2, r3, #16
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	1cb9      	adds	r1, r7, #2
 8007d10:	8809      	ldrh	r1, [r1, #0]
 8007d12:	400b      	ands	r3, r1
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	619a      	str	r2, [r3, #24]
}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b004      	add	sp, #16
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	0002      	movs	r2, r0
 8007d2c:	1dbb      	adds	r3, r7, #6
 8007d2e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007d30:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	1dba      	adds	r2, r7, #6
 8007d36:	8812      	ldrh	r2, [r2, #0]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	d008      	beq.n	8007d4e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007d3e:	1dba      	adds	r2, r7, #6
 8007d40:	8812      	ldrh	r2, [r2, #0]
 8007d42:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d44:	1dbb      	adds	r3, r7, #6
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7fd ffad 	bl	8005ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b002      	add	sp, #8
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	40010400 	.word	0x40010400

08007d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e082      	b.n	8007e74 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2241      	movs	r2, #65	; 0x41
 8007d72:	5c9b      	ldrb	r3, [r3, r2]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2240      	movs	r2, #64	; 0x40
 8007d7e:	2100      	movs	r1, #0
 8007d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0018      	movs	r0, r3
 8007d86:	f7ff f841 	bl	8006e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2241      	movs	r2, #65	; 0x41
 8007d8e:	2124      	movs	r1, #36	; 0x24
 8007d90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	438a      	bics	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4934      	ldr	r1, [pc, #208]	; (8007e7c <HAL_I2C_Init+0x120>)
 8007dac:	400a      	ands	r2, r1
 8007dae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4931      	ldr	r1, [pc, #196]	; (8007e80 <HAL_I2C_Init+0x124>)
 8007dbc:	400a      	ands	r2, r1
 8007dbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d108      	bne.n	8007dda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	0209      	lsls	r1, r1, #8
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	e007      	b.n	8007dea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2184      	movs	r1, #132	; 0x84
 8007de4:	0209      	lsls	r1, r1, #8
 8007de6:	430a      	orrs	r2, r1
 8007de8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d104      	bne.n	8007dfc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2280      	movs	r2, #128	; 0x80
 8007df8:	0112      	lsls	r2, r2, #4
 8007dfa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	491f      	ldr	r1, [pc, #124]	; (8007e84 <HAL_I2C_Init+0x128>)
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	491a      	ldr	r1, [pc, #104]	; (8007e80 <HAL_I2C_Init+0x124>)
 8007e18:	400a      	ands	r2, r1
 8007e1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69d9      	ldr	r1, [r3, #28]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1a      	ldr	r2, [r3, #32]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2101      	movs	r1, #1
 8007e52:	430a      	orrs	r2, r1
 8007e54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2241      	movs	r2, #65	; 0x41
 8007e60:	2120      	movs	r1, #32
 8007e62:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2242      	movs	r2, #66	; 0x42
 8007e6e:	2100      	movs	r1, #0
 8007e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	0018      	movs	r0, r3
 8007e76:	46bd      	mov	sp, r7
 8007e78:	b002      	add	sp, #8
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	f0ffffff 	.word	0xf0ffffff
 8007e80:	ffff7fff 	.word	0xffff7fff
 8007e84:	02008000 	.word	0x02008000

08007e88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b089      	sub	sp, #36	; 0x24
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	0008      	movs	r0, r1
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	0019      	movs	r1, r3
 8007e96:	230a      	movs	r3, #10
 8007e98:	18fb      	adds	r3, r7, r3
 8007e9a:	1c02      	adds	r2, r0, #0
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	18fb      	adds	r3, r7, r3
 8007ea2:	1c0a      	adds	r2, r1, #0
 8007ea4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2241      	movs	r2, #65	; 0x41
 8007eaa:	5c9b      	ldrb	r3, [r3, r2]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d000      	beq.n	8007eb4 <HAL_I2C_Master_Transmit+0x2c>
 8007eb2:	e0e7      	b.n	8008084 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	5c9b      	ldrb	r3, [r3, r2]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_I2C_Master_Transmit+0x3a>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e0e1      	b.n	8008086 <HAL_I2C_Master_Transmit+0x1fe>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2240      	movs	r2, #64	; 0x40
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007eca:	f7ff fad9 	bl	8007480 <HAL_GetTick>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ed2:	2380      	movs	r3, #128	; 0x80
 8007ed4:	0219      	lsls	r1, r3, #8
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2319      	movs	r3, #25
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f000 fa04 	bl	80082ec <I2C_WaitOnFlagUntilTimeout>
 8007ee4:	1e03      	subs	r3, r0, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e0cc      	b.n	8008086 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2241      	movs	r2, #65	; 0x41
 8007ef0:	2121      	movs	r1, #33	; 0x21
 8007ef2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2242      	movs	r2, #66	; 0x42
 8007ef8:	2110      	movs	r1, #16
 8007efa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	18ba      	adds	r2, r7, r2
 8007f0e:	8812      	ldrh	r2, [r2, #0]
 8007f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2bff      	cmp	r3, #255	; 0xff
 8007f20:	d911      	bls.n	8007f46 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	2380      	movs	r3, #128	; 0x80
 8007f30:	045c      	lsls	r4, r3, #17
 8007f32:	230a      	movs	r3, #10
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	8819      	ldrh	r1, [r3, #0]
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	4b55      	ldr	r3, [pc, #340]	; (8008090 <HAL_I2C_Master_Transmit+0x208>)
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	0023      	movs	r3, r4
 8007f40:	f000 fc2e 	bl	80087a0 <I2C_TransferConfig>
 8007f44:	e075      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	2380      	movs	r3, #128	; 0x80
 8007f58:	049c      	lsls	r4, r3, #18
 8007f5a:	230a      	movs	r3, #10
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	8819      	ldrh	r1, [r3, #0]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	4b4b      	ldr	r3, [pc, #300]	; (8008090 <HAL_I2C_Master_Transmit+0x208>)
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	0023      	movs	r3, r4
 8007f68:	f000 fc1a 	bl	80087a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007f6c:	e061      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	0018      	movs	r0, r3
 8007f76:	f000 fa07 	bl	8008388 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f7a:	1e03      	subs	r3, r0, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e081      	b.n	8008086 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	781a      	ldrb	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d03a      	beq.n	8008032 <HAL_I2C_Master_Transmit+0x1aa>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d136      	bne.n	8008032 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	0013      	movs	r3, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2180      	movs	r1, #128	; 0x80
 8007fd2:	f000 f98b 	bl	80082ec <I2C_WaitOnFlagUntilTimeout>
 8007fd6:	1e03      	subs	r3, r0, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e053      	b.n	8008086 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2bff      	cmp	r3, #255	; 0xff
 8007fe6:	d911      	bls.n	800800c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	22ff      	movs	r2, #255	; 0xff
 8007fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	2380      	movs	r3, #128	; 0x80
 8007ff6:	045c      	lsls	r4, r3, #17
 8007ff8:	230a      	movs	r3, #10
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	8819      	ldrh	r1, [r3, #0]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	2300      	movs	r3, #0
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	0023      	movs	r3, r4
 8008006:	f000 fbcb 	bl	80087a0 <I2C_TransferConfig>
 800800a:	e012      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801a:	b2da      	uxtb	r2, r3
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	049c      	lsls	r4, r3, #18
 8008020:	230a      	movs	r3, #10
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	8819      	ldrh	r1, [r3, #0]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	2300      	movs	r3, #0
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	0023      	movs	r3, r4
 800802e:	f000 fbb7 	bl	80087a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d198      	bne.n	8007f6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0018      	movs	r0, r3
 8008044:	f000 f9e6 	bl	8008414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008048:	1e03      	subs	r3, r0, #0
 800804a:	d001      	beq.n	8008050 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e01a      	b.n	8008086 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2220      	movs	r2, #32
 8008056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	490c      	ldr	r1, [pc, #48]	; (8008094 <HAL_I2C_Master_Transmit+0x20c>)
 8008064:	400a      	ands	r2, r1
 8008066:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2241      	movs	r2, #65	; 0x41
 800806c:	2120      	movs	r1, #32
 800806e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2242      	movs	r2, #66	; 0x42
 8008074:	2100      	movs	r1, #0
 8008076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2240      	movs	r2, #64	; 0x40
 800807c:	2100      	movs	r1, #0
 800807e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e000      	b.n	8008086 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8008084:	2302      	movs	r3, #2
  }
}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	b007      	add	sp, #28
 800808c:	bd90      	pop	{r4, r7, pc}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	80002000 	.word	0x80002000
 8008094:	fe00e800 	.word	0xfe00e800

08008098 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008098:	b590      	push	{r4, r7, lr}
 800809a:	b089      	sub	sp, #36	; 0x24
 800809c:	af02      	add	r7, sp, #8
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	0008      	movs	r0, r1
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	0019      	movs	r1, r3
 80080a6:	230a      	movs	r3, #10
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	1c02      	adds	r2, r0, #0
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	2308      	movs	r3, #8
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	1c0a      	adds	r2, r1, #0
 80080b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2241      	movs	r2, #65	; 0x41
 80080ba:	5c9b      	ldrb	r3, [r3, r2]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d000      	beq.n	80080c4 <HAL_I2C_Master_Receive+0x2c>
 80080c2:	e0e8      	b.n	8008296 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2240      	movs	r2, #64	; 0x40
 80080c8:	5c9b      	ldrb	r3, [r3, r2]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_I2C_Master_Receive+0x3a>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e0e2      	b.n	8008298 <HAL_I2C_Master_Receive+0x200>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2240      	movs	r2, #64	; 0x40
 80080d6:	2101      	movs	r1, #1
 80080d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080da:	f7ff f9d1 	bl	8007480 <HAL_GetTick>
 80080de:	0003      	movs	r3, r0
 80080e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080e2:	2380      	movs	r3, #128	; 0x80
 80080e4:	0219      	lsls	r1, r3, #8
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	2319      	movs	r3, #25
 80080ee:	2201      	movs	r2, #1
 80080f0:	f000 f8fc 	bl	80082ec <I2C_WaitOnFlagUntilTimeout>
 80080f4:	1e03      	subs	r3, r0, #0
 80080f6:	d001      	beq.n	80080fc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e0cd      	b.n	8008298 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2241      	movs	r2, #65	; 0x41
 8008100:	2122      	movs	r1, #34	; 0x22
 8008102:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2242      	movs	r2, #66	; 0x42
 8008108:	2110      	movs	r1, #16
 800810a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2208      	movs	r2, #8
 800811c:	18ba      	adds	r2, r7, r2
 800811e:	8812      	ldrh	r2, [r2, #0]
 8008120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	2bff      	cmp	r3, #255	; 0xff
 8008130:	d911      	bls.n	8008156 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	b2da      	uxtb	r2, r3
 800813e:	2380      	movs	r3, #128	; 0x80
 8008140:	045c      	lsls	r4, r3, #17
 8008142:	230a      	movs	r3, #10
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	8819      	ldrh	r1, [r3, #0]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	4b55      	ldr	r3, [pc, #340]	; (80082a0 <HAL_I2C_Master_Receive+0x208>)
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	0023      	movs	r3, r4
 8008150:	f000 fb26 	bl	80087a0 <I2C_TransferConfig>
 8008154:	e076      	b.n	8008244 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008164:	b2da      	uxtb	r2, r3
 8008166:	2380      	movs	r3, #128	; 0x80
 8008168:	049c      	lsls	r4, r3, #18
 800816a:	230a      	movs	r3, #10
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	8819      	ldrh	r1, [r3, #0]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	4b4b      	ldr	r3, [pc, #300]	; (80082a0 <HAL_I2C_Master_Receive+0x208>)
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	0023      	movs	r3, r4
 8008178:	f000 fb12 	bl	80087a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800817c:	e062      	b.n	8008244 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	0018      	movs	r0, r3
 8008186:	f000 f989 	bl	800849c <I2C_WaitOnRXNEFlagUntilTimeout>
 800818a:	1e03      	subs	r3, r0, #0
 800818c:	d001      	beq.n	8008192 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e082      	b.n	8008298 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d03a      	beq.n	8008244 <HAL_I2C_Master_Receive+0x1ac>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d136      	bne.n	8008244 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	0013      	movs	r3, r2
 80081e0:	2200      	movs	r2, #0
 80081e2:	2180      	movs	r1, #128	; 0x80
 80081e4:	f000 f882 	bl	80082ec <I2C_WaitOnFlagUntilTimeout>
 80081e8:	1e03      	subs	r3, r0, #0
 80081ea:	d001      	beq.n	80081f0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e053      	b.n	8008298 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2bff      	cmp	r3, #255	; 0xff
 80081f8:	d911      	bls.n	800821e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	22ff      	movs	r2, #255	; 0xff
 80081fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008204:	b2da      	uxtb	r2, r3
 8008206:	2380      	movs	r3, #128	; 0x80
 8008208:	045c      	lsls	r4, r3, #17
 800820a:	230a      	movs	r3, #10
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	8819      	ldrh	r1, [r3, #0]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	2300      	movs	r3, #0
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	0023      	movs	r3, r4
 8008218:	f000 fac2 	bl	80087a0 <I2C_TransferConfig>
 800821c:	e012      	b.n	8008244 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	b2da      	uxtb	r2, r3
 800822e:	2380      	movs	r3, #128	; 0x80
 8008230:	049c      	lsls	r4, r3, #18
 8008232:	230a      	movs	r3, #10
 8008234:	18fb      	adds	r3, r7, r3
 8008236:	8819      	ldrh	r1, [r3, #0]
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	2300      	movs	r3, #0
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	0023      	movs	r3, r4
 8008240:	f000 faae 	bl	80087a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d197      	bne.n	800817e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	0018      	movs	r0, r3
 8008256:	f000 f8dd 	bl	8008414 <I2C_WaitOnSTOPFlagUntilTimeout>
 800825a:	1e03      	subs	r3, r0, #0
 800825c:	d001      	beq.n	8008262 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e01a      	b.n	8008298 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2220      	movs	r2, #32
 8008268:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	490b      	ldr	r1, [pc, #44]	; (80082a4 <HAL_I2C_Master_Receive+0x20c>)
 8008276:	400a      	ands	r2, r1
 8008278:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2241      	movs	r2, #65	; 0x41
 800827e:	2120      	movs	r1, #32
 8008280:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2242      	movs	r2, #66	; 0x42
 8008286:	2100      	movs	r1, #0
 8008288:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2240      	movs	r2, #64	; 0x40
 800828e:	2100      	movs	r1, #0
 8008290:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	e000      	b.n	8008298 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8008296:	2302      	movs	r3, #2
  }
}
 8008298:	0018      	movs	r0, r3
 800829a:	46bd      	mov	sp, r7
 800829c:	b007      	add	sp, #28
 800829e:	bd90      	pop	{r4, r7, pc}
 80082a0:	80002400 	.word	0x80002400
 80082a4:	fe00e800 	.word	0xfe00e800

080082a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	2202      	movs	r2, #2
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d103      	bne.n	80082c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	2201      	movs	r2, #1
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d007      	beq.n	80082e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2101      	movs	r1, #1
 80082e0:	430a      	orrs	r2, r1
 80082e2:	619a      	str	r2, [r3, #24]
  }
}
 80082e4:	46c0      	nop			; (mov r8, r8)
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b002      	add	sp, #8
 80082ea:	bd80      	pop	{r7, pc}

080082ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	1dfb      	adds	r3, r7, #7
 80082fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082fc:	e030      	b.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3301      	adds	r3, #1
 8008302:	d02d      	beq.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008304:	f7ff f8bc 	bl	8007480 <HAL_GetTick>
 8008308:	0002      	movs	r2, r0
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d122      	bne.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4013      	ands	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	425a      	negs	r2, r3
 800832a:	4153      	adcs	r3, r2
 800832c:	b2db      	uxtb	r3, r3
 800832e:	001a      	movs	r2, r3
 8008330:	1dfb      	adds	r3, r7, #7
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d113      	bne.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833c:	2220      	movs	r2, #32
 800833e:	431a      	orrs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2241      	movs	r2, #65	; 0x41
 8008348:	2120      	movs	r1, #32
 800834a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2242      	movs	r2, #66	; 0x42
 8008350:	2100      	movs	r1, #0
 8008352:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2240      	movs	r2, #64	; 0x40
 8008358:	2100      	movs	r1, #0
 800835a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e00f      	b.n	8008380 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4013      	ands	r3, r2
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	425a      	negs	r2, r3
 8008370:	4153      	adcs	r3, r2
 8008372:	b2db      	uxtb	r3, r3
 8008374:	001a      	movs	r2, r3
 8008376:	1dfb      	adds	r3, r7, #7
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d0bf      	beq.n	80082fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b004      	add	sp, #16
 8008386:	bd80      	pop	{r7, pc}

08008388 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008394:	e032      	b.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	0018      	movs	r0, r3
 800839e:	f000 f8ff 	bl	80085a0 <I2C_IsErrorOccurred>
 80083a2:	1e03      	subs	r3, r0, #0
 80083a4:	d001      	beq.n	80083aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e030      	b.n	800840c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	3301      	adds	r3, #1
 80083ae:	d025      	beq.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b0:	f7ff f866 	bl	8007480 <HAL_GetTick>
 80083b4:	0002      	movs	r2, r0
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d11a      	bne.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2202      	movs	r2, #2
 80083ce:	4013      	ands	r3, r2
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d013      	beq.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d8:	2220      	movs	r2, #32
 80083da:	431a      	orrs	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2241      	movs	r2, #65	; 0x41
 80083e4:	2120      	movs	r1, #32
 80083e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2242      	movs	r2, #66	; 0x42
 80083ec:	2100      	movs	r1, #0
 80083ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2240      	movs	r2, #64	; 0x40
 80083f4:	2100      	movs	r1, #0
 80083f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e007      	b.n	800840c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	2202      	movs	r2, #2
 8008404:	4013      	ands	r3, r2
 8008406:	2b02      	cmp	r3, #2
 8008408:	d1c5      	bne.n	8008396 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	0018      	movs	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	b004      	add	sp, #16
 8008412:	bd80      	pop	{r7, pc}

08008414 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008420:	e02f      	b.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	0018      	movs	r0, r3
 800842a:	f000 f8b9 	bl	80085a0 <I2C_IsErrorOccurred>
 800842e:	1e03      	subs	r3, r0, #0
 8008430:	d001      	beq.n	8008436 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e02d      	b.n	8008492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7ff f823 	bl	8007480 <HAL_GetTick>
 800843a:	0002      	movs	r2, r0
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d11a      	bne.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2220      	movs	r2, #32
 8008454:	4013      	ands	r3, r2
 8008456:	2b20      	cmp	r3, #32
 8008458:	d013      	beq.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	2220      	movs	r2, #32
 8008460:	431a      	orrs	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2241      	movs	r2, #65	; 0x41
 800846a:	2120      	movs	r1, #32
 800846c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2242      	movs	r2, #66	; 0x42
 8008472:	2100      	movs	r1, #0
 8008474:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2240      	movs	r2, #64	; 0x40
 800847a:	2100      	movs	r1, #0
 800847c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e007      	b.n	8008492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2220      	movs	r2, #32
 800848a:	4013      	ands	r3, r2
 800848c:	2b20      	cmp	r3, #32
 800848e:	d1c8      	bne.n	8008422 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	0018      	movs	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	b004      	add	sp, #16
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084a8:	e06b      	b.n	8008582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	0018      	movs	r0, r3
 80084b2:	f000 f875 	bl	80085a0 <I2C_IsErrorOccurred>
 80084b6:	1e03      	subs	r3, r0, #0
 80084b8:	d001      	beq.n	80084be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e069      	b.n	8008592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2220      	movs	r2, #32
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	d138      	bne.n	800853e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	2204      	movs	r2, #4
 80084d4:	4013      	ands	r3, r2
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d105      	bne.n	80084e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e055      	b.n	8008592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2210      	movs	r2, #16
 80084ee:	4013      	ands	r3, r2
 80084f0:	2b10      	cmp	r3, #16
 80084f2:	d107      	bne.n	8008504 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2210      	movs	r2, #16
 80084fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2204      	movs	r2, #4
 8008500:	645a      	str	r2, [r3, #68]	; 0x44
 8008502:	e002      	b.n	800850a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2220      	movs	r2, #32
 8008510:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	491f      	ldr	r1, [pc, #124]	; (800859c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800851e:	400a      	ands	r2, r1
 8008520:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2241      	movs	r2, #65	; 0x41
 8008526:	2120      	movs	r1, #32
 8008528:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2242      	movs	r2, #66	; 0x42
 800852e:	2100      	movs	r1, #0
 8008530:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2240      	movs	r2, #64	; 0x40
 8008536:	2100      	movs	r1, #0
 8008538:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e029      	b.n	8008592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853e:	f7fe ff9f 	bl	8007480 <HAL_GetTick>
 8008542:	0002      	movs	r2, r0
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	d302      	bcc.n	8008554 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d116      	bne.n	8008582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	2204      	movs	r2, #4
 800855c:	4013      	ands	r3, r2
 800855e:	2b04      	cmp	r3, #4
 8008560:	d00f      	beq.n	8008582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	2220      	movs	r2, #32
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2241      	movs	r2, #65	; 0x41
 8008572:	2120      	movs	r1, #32
 8008574:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2240      	movs	r2, #64	; 0x40
 800857a:	2100      	movs	r1, #0
 800857c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e007      	b.n	8008592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2204      	movs	r2, #4
 800858a:	4013      	ands	r3, r2
 800858c:	2b04      	cmp	r3, #4
 800858e:	d18c      	bne.n	80084aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	0018      	movs	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	b004      	add	sp, #16
 8008598:	bd80      	pop	{r7, pc}
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	fe00e800 	.word	0xfe00e800

080085a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b08b      	sub	sp, #44	; 0x2c
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085ac:	2327      	movs	r3, #39	; 0x27
 80085ae:	18fb      	adds	r3, r7, r3
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2210      	movs	r2, #16
 80085c8:	4013      	ands	r3, r2
 80085ca:	d100      	bne.n	80085ce <I2C_IsErrorOccurred+0x2e>
 80085cc:	e082      	b.n	80086d4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2210      	movs	r2, #16
 80085d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085d6:	e060      	b.n	800869a <I2C_IsErrorOccurred+0xfa>
 80085d8:	2427      	movs	r4, #39	; 0x27
 80085da:	193b      	adds	r3, r7, r4
 80085dc:	193a      	adds	r2, r7, r4
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3301      	adds	r3, #1
 80085e6:	d058      	beq.n	800869a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085e8:	f7fe ff4a 	bl	8007480 <HAL_GetTick>
 80085ec:	0002      	movs	r2, r0
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d306      	bcc.n	8008606 <I2C_IsErrorOccurred+0x66>
 80085f8:	193b      	adds	r3, r7, r4
 80085fa:	193a      	adds	r2, r7, r4
 80085fc:	7812      	ldrb	r2, [r2, #0]
 80085fe:	701a      	strb	r2, [r3, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d149      	bne.n	800869a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	01db      	lsls	r3, r3, #7
 8008610:	4013      	ands	r3, r2
 8008612:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008614:	2013      	movs	r0, #19
 8008616:	183b      	adds	r3, r7, r0
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	2142      	movs	r1, #66	; 0x42
 800861c:	5c52      	ldrb	r2, [r2, r1]
 800861e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	2380      	movs	r3, #128	; 0x80
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	401a      	ands	r2, r3
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	429a      	cmp	r2, r3
 8008632:	d126      	bne.n	8008682 <I2C_IsErrorOccurred+0xe2>
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	2380      	movs	r3, #128	; 0x80
 8008638:	01db      	lsls	r3, r3, #7
 800863a:	429a      	cmp	r2, r3
 800863c:	d021      	beq.n	8008682 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800863e:	183b      	adds	r3, r7, r0
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b20      	cmp	r3, #32
 8008644:	d01d      	beq.n	8008682 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2180      	movs	r1, #128	; 0x80
 8008652:	01c9      	lsls	r1, r1, #7
 8008654:	430a      	orrs	r2, r1
 8008656:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008658:	f7fe ff12 	bl	8007480 <HAL_GetTick>
 800865c:	0003      	movs	r3, r0
 800865e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008660:	e00f      	b.n	8008682 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008662:	f7fe ff0d 	bl	8007480 <HAL_GetTick>
 8008666:	0002      	movs	r2, r0
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b19      	cmp	r3, #25
 800866e:	d908      	bls.n	8008682 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	2220      	movs	r2, #32
 8008674:	4313      	orrs	r3, r2
 8008676:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008678:	2327      	movs	r3, #39	; 0x27
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	2201      	movs	r2, #1
 800867e:	701a      	strb	r2, [r3, #0]

              break;
 8008680:	e00b      	b.n	800869a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2220      	movs	r2, #32
 800868a:	4013      	ands	r3, r2
 800868c:	2127      	movs	r1, #39	; 0x27
 800868e:	187a      	adds	r2, r7, r1
 8008690:	1879      	adds	r1, r7, r1
 8008692:	7809      	ldrb	r1, [r1, #0]
 8008694:	7011      	strb	r1, [r2, #0]
 8008696:	2b20      	cmp	r3, #32
 8008698:	d1e3      	bne.n	8008662 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	2220      	movs	r2, #32
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d004      	beq.n	80086b2 <I2C_IsErrorOccurred+0x112>
 80086a8:	2327      	movs	r3, #39	; 0x27
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d092      	beq.n	80085d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086b2:	2327      	movs	r3, #39	; 0x27
 80086b4:	18fb      	adds	r3, r7, r3
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2220      	movs	r2, #32
 80086c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2204      	movs	r2, #4
 80086c8:	4313      	orrs	r3, r2
 80086ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086cc:	2327      	movs	r3, #39	; 0x27
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2201      	movs	r2, #1
 80086d2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	2380      	movs	r3, #128	; 0x80
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4013      	ands	r3, r2
 80086e4:	d00c      	beq.n	8008700 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	2201      	movs	r2, #1
 80086ea:	4313      	orrs	r3, r2
 80086ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2280      	movs	r2, #128	; 0x80
 80086f4:	0052      	lsls	r2, r2, #1
 80086f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086f8:	2327      	movs	r3, #39	; 0x27
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	2201      	movs	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	2380      	movs	r3, #128	; 0x80
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4013      	ands	r3, r2
 8008708:	d00c      	beq.n	8008724 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2208      	movs	r2, #8
 800870e:	4313      	orrs	r3, r2
 8008710:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2280      	movs	r2, #128	; 0x80
 8008718:	00d2      	lsls	r2, r2, #3
 800871a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800871c:	2327      	movs	r3, #39	; 0x27
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	2380      	movs	r3, #128	; 0x80
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4013      	ands	r3, r2
 800872c:	d00c      	beq.n	8008748 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	2202      	movs	r2, #2
 8008732:	4313      	orrs	r3, r2
 8008734:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2280      	movs	r2, #128	; 0x80
 800873c:	0092      	lsls	r2, r2, #2
 800873e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008740:	2327      	movs	r3, #39	; 0x27
 8008742:	18fb      	adds	r3, r7, r3
 8008744:	2201      	movs	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8008748:	2327      	movs	r3, #39	; 0x27
 800874a:	18fb      	adds	r3, r7, r3
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01d      	beq.n	800878e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	0018      	movs	r0, r3
 8008756:	f7ff fda7 	bl	80082a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	490d      	ldr	r1, [pc, #52]	; (800879c <I2C_IsErrorOccurred+0x1fc>)
 8008766:	400a      	ands	r2, r1
 8008768:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2241      	movs	r2, #65	; 0x41
 800877a:	2120      	movs	r1, #32
 800877c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2242      	movs	r2, #66	; 0x42
 8008782:	2100      	movs	r1, #0
 8008784:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2240      	movs	r2, #64	; 0x40
 800878a:	2100      	movs	r1, #0
 800878c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800878e:	2327      	movs	r3, #39	; 0x27
 8008790:	18fb      	adds	r3, r7, r3
 8008792:	781b      	ldrb	r3, [r3, #0]
}
 8008794:	0018      	movs	r0, r3
 8008796:	46bd      	mov	sp, r7
 8008798:	b00b      	add	sp, #44	; 0x2c
 800879a:	bd90      	pop	{r4, r7, pc}
 800879c:	fe00e800 	.word	0xfe00e800

080087a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	0008      	movs	r0, r1
 80087aa:	0011      	movs	r1, r2
 80087ac:	607b      	str	r3, [r7, #4]
 80087ae:	240a      	movs	r4, #10
 80087b0:	193b      	adds	r3, r7, r4
 80087b2:	1c02      	adds	r2, r0, #0
 80087b4:	801a      	strh	r2, [r3, #0]
 80087b6:	2009      	movs	r0, #9
 80087b8:	183b      	adds	r3, r7, r0
 80087ba:	1c0a      	adds	r2, r1, #0
 80087bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087be:	193b      	adds	r3, r7, r4
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	059b      	lsls	r3, r3, #22
 80087c4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087c6:	183b      	adds	r3, r7, r0
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	0419      	lsls	r1, r3, #16
 80087cc:	23ff      	movs	r3, #255	; 0xff
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	4313      	orrs	r3, r2
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	085b      	lsrs	r3, r3, #1
 80087e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ea:	0d51      	lsrs	r1, r2, #21
 80087ec:	2280      	movs	r2, #128	; 0x80
 80087ee:	00d2      	lsls	r2, r2, #3
 80087f0:	400a      	ands	r2, r1
 80087f2:	4907      	ldr	r1, [pc, #28]	; (8008810 <I2C_TransferConfig+0x70>)
 80087f4:	430a      	orrs	r2, r1
 80087f6:	43d2      	mvns	r2, r2
 80087f8:	401a      	ands	r2, r3
 80087fa:	0011      	movs	r1, r2
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008806:	46c0      	nop			; (mov r8, r8)
 8008808:	46bd      	mov	sp, r7
 800880a:	b007      	add	sp, #28
 800880c:	bd90      	pop	{r4, r7, pc}
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	03ff63ff 	.word	0x03ff63ff

08008814 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2241      	movs	r2, #65	; 0x41
 8008822:	5c9b      	ldrb	r3, [r3, r2]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b20      	cmp	r3, #32
 8008828:	d138      	bne.n	800889c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2240      	movs	r2, #64	; 0x40
 800882e:	5c9b      	ldrb	r3, [r3, r2]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008834:	2302      	movs	r3, #2
 8008836:	e032      	b.n	800889e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2240      	movs	r2, #64	; 0x40
 800883c:	2101      	movs	r1, #1
 800883e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2241      	movs	r2, #65	; 0x41
 8008844:	2124      	movs	r1, #36	; 0x24
 8008846:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2101      	movs	r1, #1
 8008854:	438a      	bics	r2, r1
 8008856:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4911      	ldr	r1, [pc, #68]	; (80088a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008864:	400a      	ands	r2, r1
 8008866:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6819      	ldr	r1, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2101      	movs	r1, #1
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2241      	movs	r2, #65	; 0x41
 800888c:	2120      	movs	r1, #32
 800888e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2240      	movs	r2, #64	; 0x40
 8008894:	2100      	movs	r1, #0
 8008896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e000      	b.n	800889e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800889c:	2302      	movs	r3, #2
  }
}
 800889e:	0018      	movs	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b002      	add	sp, #8
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	ffffefff 	.word	0xffffefff

080088ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2241      	movs	r2, #65	; 0x41
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d139      	bne.n	8008936 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2240      	movs	r2, #64	; 0x40
 80088c6:	5c9b      	ldrb	r3, [r3, r2]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d101      	bne.n	80088d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e033      	b.n	8008938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2240      	movs	r2, #64	; 0x40
 80088d4:	2101      	movs	r1, #1
 80088d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2241      	movs	r2, #65	; 0x41
 80088dc:	2124      	movs	r1, #36	; 0x24
 80088de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2101      	movs	r1, #1
 80088ec:	438a      	bics	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a11      	ldr	r2, [pc, #68]	; (8008940 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2101      	movs	r1, #1
 800891e:	430a      	orrs	r2, r1
 8008920:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2241      	movs	r2, #65	; 0x41
 8008926:	2120      	movs	r1, #32
 8008928:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2240      	movs	r2, #64	; 0x40
 800892e:	2100      	movs	r1, #0
 8008930:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	e000      	b.n	8008938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008936:	2302      	movs	r3, #2
  }
}
 8008938:	0018      	movs	r0, r3
 800893a:	46bd      	mov	sp, r7
 800893c:	b004      	add	sp, #16
 800893e:	bd80      	pop	{r7, pc}
 8008940:	fffff0ff 	.word	0xfffff0ff

08008944 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e03d      	b.n	80089d2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a20      	ldr	r2, [pc, #128]	; (80089dc <HAL_IWDG_Init+0x98>)
 800895c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <HAL_IWDG_Init+0x9c>)
 8008964:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6852      	ldr	r2, [r2, #4]
 800896e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6892      	ldr	r2, [r2, #8]
 8008978:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800897a:	f7fe fd81 	bl	8007480 <HAL_GetTick>
 800897e:	0003      	movs	r3, r0
 8008980:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008982:	e00e      	b.n	80089a2 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008984:	f7fe fd7c 	bl	8007480 <HAL_GetTick>
 8008988:	0002      	movs	r2, r0
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b27      	cmp	r3, #39	; 0x27
 8008990:	d907      	bls.n	80089a2 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2207      	movs	r2, #7
 800899a:	4013      	ands	r3, r2
 800899c:	d001      	beq.n	80089a2 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e017      	b.n	80089d2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2207      	movs	r2, #7
 80089aa:	4013      	ands	r3, r2
 80089ac:	d1ea      	bne.n	8008984 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d005      	beq.n	80089c8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	68d2      	ldr	r2, [r2, #12]
 80089c4:	611a      	str	r2, [r3, #16]
 80089c6:	e003      	b.n	80089d0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a05      	ldr	r2, [pc, #20]	; (80089e4 <HAL_IWDG_Init+0xa0>)
 80089ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	0018      	movs	r0, r3
 80089d4:	46bd      	mov	sp, r7
 80089d6:	b004      	add	sp, #16
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	0000cccc 	.word	0x0000cccc
 80089e0:	00005555 	.word	0x00005555
 80089e4:	0000aaaa 	.word	0x0000aaaa

080089e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a03      	ldr	r2, [pc, #12]	; (8008a04 <HAL_IWDG_Refresh+0x1c>)
 80089f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	0018      	movs	r0, r3
 80089fc:	46bd      	mov	sp, r7
 80089fe:	b002      	add	sp, #8
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	0000aaaa 	.word	0x0000aaaa

08008a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e305      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4013      	ands	r3, r2
 8008a22:	d100      	bne.n	8008a26 <HAL_RCC_OscConfig+0x1e>
 8008a24:	e08d      	b.n	8008b42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008a26:	4bc5      	ldr	r3, [pc, #788]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	220c      	movs	r2, #12
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d00e      	beq.n	8008a50 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a32:	4bc2      	ldr	r3, [pc, #776]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	220c      	movs	r2, #12
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d116      	bne.n	8008a6c <HAL_RCC_OscConfig+0x64>
 8008a3e:	4bbf      	ldr	r3, [pc, #764]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	23c0      	movs	r3, #192	; 0xc0
 8008a44:	025b      	lsls	r3, r3, #9
 8008a46:	401a      	ands	r2, r3
 8008a48:	2380      	movs	r3, #128	; 0x80
 8008a4a:	025b      	lsls	r3, r3, #9
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d10d      	bne.n	8008a6c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a50:	4bba      	ldr	r3, [pc, #744]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	029b      	lsls	r3, r3, #10
 8008a58:	4013      	ands	r3, r2
 8008a5a:	d100      	bne.n	8008a5e <HAL_RCC_OscConfig+0x56>
 8008a5c:	e070      	b.n	8008b40 <HAL_RCC_OscConfig+0x138>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d000      	beq.n	8008a68 <HAL_RCC_OscConfig+0x60>
 8008a66:	e06b      	b.n	8008b40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e2dc      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d107      	bne.n	8008a84 <HAL_RCC_OscConfig+0x7c>
 8008a74:	4bb1      	ldr	r3, [pc, #708]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4bb0      	ldr	r3, [pc, #704]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a7a:	2180      	movs	r1, #128	; 0x80
 8008a7c:	0249      	lsls	r1, r1, #9
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	e02f      	b.n	8008ae4 <HAL_RCC_OscConfig+0xdc>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10c      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x9e>
 8008a8c:	4bab      	ldr	r3, [pc, #684]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4baa      	ldr	r3, [pc, #680]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a92:	49ab      	ldr	r1, [pc, #684]	; (8008d40 <HAL_RCC_OscConfig+0x338>)
 8008a94:	400a      	ands	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	4ba8      	ldr	r3, [pc, #672]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4ba7      	ldr	r3, [pc, #668]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008a9e:	49a9      	ldr	r1, [pc, #676]	; (8008d44 <HAL_RCC_OscConfig+0x33c>)
 8008aa0:	400a      	ands	r2, r1
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e01e      	b.n	8008ae4 <HAL_RCC_OscConfig+0xdc>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d10e      	bne.n	8008acc <HAL_RCC_OscConfig+0xc4>
 8008aae:	4ba3      	ldr	r3, [pc, #652]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	4ba2      	ldr	r3, [pc, #648]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ab4:	2180      	movs	r1, #128	; 0x80
 8008ab6:	02c9      	lsls	r1, r1, #11
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	4b9f      	ldr	r3, [pc, #636]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b9e      	ldr	r3, [pc, #632]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ac2:	2180      	movs	r1, #128	; 0x80
 8008ac4:	0249      	lsls	r1, r1, #9
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e00b      	b.n	8008ae4 <HAL_RCC_OscConfig+0xdc>
 8008acc:	4b9b      	ldr	r3, [pc, #620]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	4b9a      	ldr	r3, [pc, #616]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ad2:	499b      	ldr	r1, [pc, #620]	; (8008d40 <HAL_RCC_OscConfig+0x338>)
 8008ad4:	400a      	ands	r2, r1
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	4b98      	ldr	r3, [pc, #608]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b97      	ldr	r3, [pc, #604]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008ade:	4999      	ldr	r1, [pc, #612]	; (8008d44 <HAL_RCC_OscConfig+0x33c>)
 8008ae0:	400a      	ands	r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d014      	beq.n	8008b16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aec:	f7fe fcc8 	bl	8007480 <HAL_GetTick>
 8008af0:	0003      	movs	r3, r0
 8008af2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008af4:	e008      	b.n	8008b08 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008af6:	f7fe fcc3 	bl	8007480 <HAL_GetTick>
 8008afa:	0002      	movs	r2, r0
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b64      	cmp	r3, #100	; 0x64
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e28e      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b08:	4b8c      	ldr	r3, [pc, #560]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	029b      	lsls	r3, r3, #10
 8008b10:	4013      	ands	r3, r2
 8008b12:	d0f0      	beq.n	8008af6 <HAL_RCC_OscConfig+0xee>
 8008b14:	e015      	b.n	8008b42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b16:	f7fe fcb3 	bl	8007480 <HAL_GetTick>
 8008b1a:	0003      	movs	r3, r0
 8008b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b20:	f7fe fcae 	bl	8007480 <HAL_GetTick>
 8008b24:	0002      	movs	r2, r0
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b64      	cmp	r3, #100	; 0x64
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e279      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b32:	4b82      	ldr	r3, [pc, #520]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	2380      	movs	r3, #128	; 0x80
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	d1f0      	bne.n	8008b20 <HAL_RCC_OscConfig+0x118>
 8008b3e:	e000      	b.n	8008b42 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2202      	movs	r2, #2
 8008b48:	4013      	ands	r3, r2
 8008b4a:	d100      	bne.n	8008b4e <HAL_RCC_OscConfig+0x146>
 8008b4c:	e06c      	b.n	8008c28 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008b4e:	4b7b      	ldr	r3, [pc, #492]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	220c      	movs	r2, #12
 8008b54:	4013      	ands	r3, r2
 8008b56:	d00e      	beq.n	8008b76 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008b58:	4b78      	ldr	r3, [pc, #480]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	220c      	movs	r2, #12
 8008b5e:	4013      	ands	r3, r2
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d11f      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x19c>
 8008b64:	4b75      	ldr	r3, [pc, #468]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	23c0      	movs	r3, #192	; 0xc0
 8008b6a:	025b      	lsls	r3, r3, #9
 8008b6c:	401a      	ands	r2, r3
 8008b6e:	2380      	movs	r3, #128	; 0x80
 8008b70:	021b      	lsls	r3, r3, #8
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d116      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b76:	4b71      	ldr	r3, [pc, #452]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d005      	beq.n	8008b8c <HAL_RCC_OscConfig+0x184>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d001      	beq.n	8008b8c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e24c      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b8c:	4b6b      	ldr	r3, [pc, #428]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	22f8      	movs	r2, #248	; 0xf8
 8008b92:	4393      	bics	r3, r2
 8008b94:	0019      	movs	r1, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	00da      	lsls	r2, r3, #3
 8008b9c:	4b67      	ldr	r3, [pc, #412]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba2:	e041      	b.n	8008c28 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d024      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bac:	4b63      	ldr	r3, [pc, #396]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b62      	ldr	r3, [pc, #392]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb8:	f7fe fc62 	bl	8007480 <HAL_GetTick>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bc0:	e008      	b.n	8008bd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bc2:	f7fe fc5d 	bl	8007480 <HAL_GetTick>
 8008bc6:	0002      	movs	r2, r0
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d901      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e228      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bd4:	4b59      	ldr	r3, [pc, #356]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	4013      	ands	r3, r2
 8008bdc:	d0f1      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bde:	4b57      	ldr	r3, [pc, #348]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	22f8      	movs	r2, #248	; 0xf8
 8008be4:	4393      	bics	r3, r2
 8008be6:	0019      	movs	r1, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	00da      	lsls	r2, r3, #3
 8008bee:	4b53      	ldr	r3, [pc, #332]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	e018      	b.n	8008c28 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bf6:	4b51      	ldr	r3, [pc, #324]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4b50      	ldr	r3, [pc, #320]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	438a      	bics	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c02:	f7fe fc3d 	bl	8007480 <HAL_GetTick>
 8008c06:	0003      	movs	r3, r0
 8008c08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c0c:	f7fe fc38 	bl	8007480 <HAL_GetTick>
 8008c10:	0002      	movs	r2, r0
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e203      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c1e:	4b47      	ldr	r3, [pc, #284]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2202      	movs	r2, #2
 8008c24:	4013      	ands	r3, r2
 8008c26:	d1f1      	bne.n	8008c0c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2208      	movs	r2, #8
 8008c2e:	4013      	ands	r3, r2
 8008c30:	d036      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d019      	beq.n	8008c6e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c3a:	4b40      	ldr	r3, [pc, #256]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c3e:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c40:	2101      	movs	r1, #1
 8008c42:	430a      	orrs	r2, r1
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c46:	f7fe fc1b 	bl	8007480 <HAL_GetTick>
 8008c4a:	0003      	movs	r3, r0
 8008c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c50:	f7fe fc16 	bl	8007480 <HAL_GetTick>
 8008c54:	0002      	movs	r2, r0
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e1e1      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c62:	4b36      	ldr	r3, [pc, #216]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2202      	movs	r2, #2
 8008c68:	4013      	ands	r3, r2
 8008c6a:	d0f1      	beq.n	8008c50 <HAL_RCC_OscConfig+0x248>
 8008c6c:	e018      	b.n	8008ca0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c6e:	4b33      	ldr	r3, [pc, #204]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c72:	4b32      	ldr	r3, [pc, #200]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c74:	2101      	movs	r1, #1
 8008c76:	438a      	bics	r2, r1
 8008c78:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c7a:	f7fe fc01 	bl	8007480 <HAL_GetTick>
 8008c7e:	0003      	movs	r3, r0
 8008c80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c84:	f7fe fbfc 	bl	8007480 <HAL_GetTick>
 8008c88:	0002      	movs	r2, r0
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e1c7      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	d1f1      	bne.n	8008c84 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	d100      	bne.n	8008cac <HAL_RCC_OscConfig+0x2a4>
 8008caa:	e0b5      	b.n	8008e18 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cac:	201f      	movs	r0, #31
 8008cae:	183b      	adds	r3, r7, r0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cb4:	4b21      	ldr	r3, [pc, #132]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008cb6:	69da      	ldr	r2, [r3, #28]
 8008cb8:	2380      	movs	r3, #128	; 0x80
 8008cba:	055b      	lsls	r3, r3, #21
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	d110      	bne.n	8008ce2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cc0:	4b1e      	ldr	r3, [pc, #120]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	0549      	lsls	r1, r1, #21
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	61da      	str	r2, [r3, #28]
 8008cce:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008cd0:	69da      	ldr	r2, [r3, #28]
 8008cd2:	2380      	movs	r3, #128	; 0x80
 8008cd4:	055b      	lsls	r3, r3, #21
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008cdc:	183b      	adds	r3, r7, r0
 8008cde:	2201      	movs	r2, #1
 8008ce0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ce2:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <HAL_RCC_OscConfig+0x340>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	2380      	movs	r3, #128	; 0x80
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	4013      	ands	r3, r2
 8008cec:	d11a      	bne.n	8008d24 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cee:	4b16      	ldr	r3, [pc, #88]	; (8008d48 <HAL_RCC_OscConfig+0x340>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <HAL_RCC_OscConfig+0x340>)
 8008cf4:	2180      	movs	r1, #128	; 0x80
 8008cf6:	0049      	lsls	r1, r1, #1
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cfc:	f7fe fbc0 	bl	8007480 <HAL_GetTick>
 8008d00:	0003      	movs	r3, r0
 8008d02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d06:	f7fe fbbb 	bl	8007480 <HAL_GetTick>
 8008d0a:	0002      	movs	r2, r0
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b64      	cmp	r3, #100	; 0x64
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e186      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d18:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <HAL_RCC_OscConfig+0x340>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	2380      	movs	r3, #128	; 0x80
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	4013      	ands	r3, r2
 8008d22:	d0f0      	beq.n	8008d06 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d10f      	bne.n	8008d4c <HAL_RCC_OscConfig+0x344>
 8008d2c:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008d2e:	6a1a      	ldr	r2, [r3, #32]
 8008d30:	4b02      	ldr	r3, [pc, #8]	; (8008d3c <HAL_RCC_OscConfig+0x334>)
 8008d32:	2101      	movs	r1, #1
 8008d34:	430a      	orrs	r2, r1
 8008d36:	621a      	str	r2, [r3, #32]
 8008d38:	e036      	b.n	8008da8 <HAL_RCC_OscConfig+0x3a0>
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	40021000 	.word	0x40021000
 8008d40:	fffeffff 	.word	0xfffeffff
 8008d44:	fffbffff 	.word	0xfffbffff
 8008d48:	40007000 	.word	0x40007000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10c      	bne.n	8008d6e <HAL_RCC_OscConfig+0x366>
 8008d54:	4bb6      	ldr	r3, [pc, #728]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	4bb5      	ldr	r3, [pc, #724]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	438a      	bics	r2, r1
 8008d5e:	621a      	str	r2, [r3, #32]
 8008d60:	4bb3      	ldr	r3, [pc, #716]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d62:	6a1a      	ldr	r2, [r3, #32]
 8008d64:	4bb2      	ldr	r3, [pc, #712]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d66:	2104      	movs	r1, #4
 8008d68:	438a      	bics	r2, r1
 8008d6a:	621a      	str	r2, [r3, #32]
 8008d6c:	e01c      	b.n	8008da8 <HAL_RCC_OscConfig+0x3a0>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d10c      	bne.n	8008d90 <HAL_RCC_OscConfig+0x388>
 8008d76:	4bae      	ldr	r3, [pc, #696]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d78:	6a1a      	ldr	r2, [r3, #32]
 8008d7a:	4bad      	ldr	r3, [pc, #692]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d7c:	2104      	movs	r1, #4
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	621a      	str	r2, [r3, #32]
 8008d82:	4bab      	ldr	r3, [pc, #684]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d84:	6a1a      	ldr	r2, [r3, #32]
 8008d86:	4baa      	ldr	r3, [pc, #680]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d88:	2101      	movs	r1, #1
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	621a      	str	r2, [r3, #32]
 8008d8e:	e00b      	b.n	8008da8 <HAL_RCC_OscConfig+0x3a0>
 8008d90:	4ba7      	ldr	r3, [pc, #668]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	4ba6      	ldr	r3, [pc, #664]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d96:	2101      	movs	r1, #1
 8008d98:	438a      	bics	r2, r1
 8008d9a:	621a      	str	r2, [r3, #32]
 8008d9c:	4ba4      	ldr	r3, [pc, #656]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008d9e:	6a1a      	ldr	r2, [r3, #32]
 8008da0:	4ba3      	ldr	r3, [pc, #652]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008da2:	2104      	movs	r1, #4
 8008da4:	438a      	bics	r2, r1
 8008da6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d014      	beq.n	8008dda <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008db0:	f7fe fb66 	bl	8007480 <HAL_GetTick>
 8008db4:	0003      	movs	r3, r0
 8008db6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db8:	e009      	b.n	8008dce <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dba:	f7fe fb61 	bl	8007480 <HAL_GetTick>
 8008dbe:	0002      	movs	r2, r0
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	4a9b      	ldr	r2, [pc, #620]	; (8009034 <HAL_RCC_OscConfig+0x62c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e12b      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dce:	4b98      	ldr	r3, [pc, #608]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	d0f0      	beq.n	8008dba <HAL_RCC_OscConfig+0x3b2>
 8008dd8:	e013      	b.n	8008e02 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dda:	f7fe fb51 	bl	8007480 <HAL_GetTick>
 8008dde:	0003      	movs	r3, r0
 8008de0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008de2:	e009      	b.n	8008df8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008de4:	f7fe fb4c 	bl	8007480 <HAL_GetTick>
 8008de8:	0002      	movs	r2, r0
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	4a91      	ldr	r2, [pc, #580]	; (8009034 <HAL_RCC_OscConfig+0x62c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d901      	bls.n	8008df8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e116      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008df8:	4b8d      	ldr	r3, [pc, #564]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	4013      	ands	r3, r2
 8008e00:	d1f0      	bne.n	8008de4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008e02:	231f      	movs	r3, #31
 8008e04:	18fb      	adds	r3, r7, r3
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d105      	bne.n	8008e18 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e0c:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	4b87      	ldr	r3, [pc, #540]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e12:	4989      	ldr	r1, [pc, #548]	; (8009038 <HAL_RCC_OscConfig+0x630>)
 8008e14:	400a      	ands	r2, r1
 8008e16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	4013      	ands	r3, r2
 8008e20:	d063      	beq.n	8008eea <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d12a      	bne.n	8008e80 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008e2a:	4b81      	ldr	r3, [pc, #516]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2e:	4b80      	ldr	r3, [pc, #512]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e30:	2104      	movs	r1, #4
 8008e32:	430a      	orrs	r2, r1
 8008e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8008e36:	4b7e      	ldr	r3, [pc, #504]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e3a:	4b7d      	ldr	r3, [pc, #500]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e42:	f7fe fb1d 	bl	8007480 <HAL_GetTick>
 8008e46:	0003      	movs	r3, r0
 8008e48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008e4a:	e008      	b.n	8008e5e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008e4c:	f7fe fb18 	bl	8007480 <HAL_GetTick>
 8008e50:	0002      	movs	r2, r0
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e0e3      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008e5e:	4b74      	ldr	r3, [pc, #464]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e62:	2202      	movs	r2, #2
 8008e64:	4013      	ands	r3, r2
 8008e66:	d0f1      	beq.n	8008e4c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008e68:	4b71      	ldr	r3, [pc, #452]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6c:	22f8      	movs	r2, #248	; 0xf8
 8008e6e:	4393      	bics	r3, r2
 8008e70:	0019      	movs	r1, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	00da      	lsls	r2, r3, #3
 8008e78:	4b6d      	ldr	r3, [pc, #436]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8008e7e:	e034      	b.n	8008eea <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	3305      	adds	r3, #5
 8008e86:	d111      	bne.n	8008eac <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008e88:	4b69      	ldr	r3, [pc, #420]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e8c:	4b68      	ldr	r3, [pc, #416]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e8e:	2104      	movs	r1, #4
 8008e90:	438a      	bics	r2, r1
 8008e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008e94:	4b66      	ldr	r3, [pc, #408]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e98:	22f8      	movs	r2, #248	; 0xf8
 8008e9a:	4393      	bics	r3, r2
 8008e9c:	0019      	movs	r1, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	00da      	lsls	r2, r3, #3
 8008ea4:	4b62      	ldr	r3, [pc, #392]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8008eaa:	e01e      	b.n	8008eea <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008eac:	4b60      	ldr	r3, [pc, #384]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eb0:	4b5f      	ldr	r3, [pc, #380]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008eb8:	4b5d      	ldr	r3, [pc, #372]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ebc:	4b5c      	ldr	r3, [pc, #368]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	438a      	bics	r2, r1
 8008ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ec4:	f7fe fadc 	bl	8007480 <HAL_GetTick>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008ecc:	e008      	b.n	8008ee0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008ece:	f7fe fad7 	bl	8007480 <HAL_GetTick>
 8008ed2:	0002      	movs	r2, r0
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d901      	bls.n	8008ee0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e0a2      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008ee0:	4b53      	ldr	r3, [pc, #332]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	d1f1      	bne.n	8008ece <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d100      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
 8008ef2:	e097      	b.n	8009024 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ef4:	4b4e      	ldr	r3, [pc, #312]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	220c      	movs	r2, #12
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d100      	bne.n	8008f02 <HAL_RCC_OscConfig+0x4fa>
 8008f00:	e06b      	b.n	8008fda <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d14c      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f0a:	4b49      	ldr	r3, [pc, #292]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b48      	ldr	r3, [pc, #288]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f10:	494a      	ldr	r1, [pc, #296]	; (800903c <HAL_RCC_OscConfig+0x634>)
 8008f12:	400a      	ands	r2, r1
 8008f14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f16:	f7fe fab3 	bl	8007480 <HAL_GetTick>
 8008f1a:	0003      	movs	r3, r0
 8008f1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f20:	f7fe faae 	bl	8007480 <HAL_GetTick>
 8008f24:	0002      	movs	r2, r0
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e079      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f32:	4b3f      	ldr	r3, [pc, #252]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	2380      	movs	r3, #128	; 0x80
 8008f38:	049b      	lsls	r3, r3, #18
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f3e:	4b3c      	ldr	r3, [pc, #240]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	220f      	movs	r2, #15
 8008f44:	4393      	bics	r3, r2
 8008f46:	0019      	movs	r1, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4c:	4b38      	ldr	r3, [pc, #224]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f52:	4b37      	ldr	r3, [pc, #220]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	4a3a      	ldr	r2, [pc, #232]	; (8009040 <HAL_RCC_OscConfig+0x638>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	431a      	orrs	r2, r3
 8008f66:	4b32      	ldr	r3, [pc, #200]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f6c:	4b30      	ldr	r3, [pc, #192]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	4b2f      	ldr	r3, [pc, #188]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f72:	2180      	movs	r1, #128	; 0x80
 8008f74:	0449      	lsls	r1, r1, #17
 8008f76:	430a      	orrs	r2, r1
 8008f78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f7a:	f7fe fa81 	bl	8007480 <HAL_GetTick>
 8008f7e:	0003      	movs	r3, r0
 8008f80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f84:	f7fe fa7c 	bl	8007480 <HAL_GetTick>
 8008f88:	0002      	movs	r2, r0
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e047      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f96:	4b26      	ldr	r3, [pc, #152]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	2380      	movs	r3, #128	; 0x80
 8008f9c:	049b      	lsls	r3, r3, #18
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	d0f0      	beq.n	8008f84 <HAL_RCC_OscConfig+0x57c>
 8008fa2:	e03f      	b.n	8009024 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa4:	4b22      	ldr	r3, [pc, #136]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	4b21      	ldr	r3, [pc, #132]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008faa:	4924      	ldr	r1, [pc, #144]	; (800903c <HAL_RCC_OscConfig+0x634>)
 8008fac:	400a      	ands	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb0:	f7fe fa66 	bl	8007480 <HAL_GetTick>
 8008fb4:	0003      	movs	r3, r0
 8008fb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fb8:	e008      	b.n	8008fcc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fba:	f7fe fa61 	bl	8007480 <HAL_GetTick>
 8008fbe:	0002      	movs	r2, r0
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e02c      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fcc:	4b18      	ldr	r3, [pc, #96]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	049b      	lsls	r3, r3, #18
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	d1f0      	bne.n	8008fba <HAL_RCC_OscConfig+0x5b2>
 8008fd8:	e024      	b.n	8009024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d101      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e01f      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008fec:	4b10      	ldr	r3, [pc, #64]	; (8009030 <HAL_RCC_OscConfig+0x628>)
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	23c0      	movs	r3, #192	; 0xc0
 8008ff6:	025b      	lsls	r3, r3, #9
 8008ff8:	401a      	ands	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d10e      	bne.n	8009020 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	220f      	movs	r2, #15
 8009006:	401a      	ands	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800900c:	429a      	cmp	r2, r3
 800900e:	d107      	bne.n	8009020 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	23f0      	movs	r3, #240	; 0xf0
 8009014:	039b      	lsls	r3, r3, #14
 8009016:	401a      	ands	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d001      	beq.n	8009024 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	0018      	movs	r0, r3
 8009028:	46bd      	mov	sp, r7
 800902a:	b008      	add	sp, #32
 800902c:	bd80      	pop	{r7, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	40021000 	.word	0x40021000
 8009034:	00001388 	.word	0x00001388
 8009038:	efffffff 	.word	0xefffffff
 800903c:	feffffff 	.word	0xfeffffff
 8009040:	ffc27fff 	.word	0xffc27fff

08009044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e0b3      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009058:	4b5b      	ldr	r3, [pc, #364]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2201      	movs	r2, #1
 800905e:	4013      	ands	r3, r2
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d911      	bls.n	800908a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009066:	4b58      	ldr	r3, [pc, #352]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2201      	movs	r2, #1
 800906c:	4393      	bics	r3, r2
 800906e:	0019      	movs	r1, r3
 8009070:	4b55      	ldr	r3, [pc, #340]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009078:	4b53      	ldr	r3, [pc, #332]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2201      	movs	r2, #1
 800907e:	4013      	ands	r3, r2
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d001      	beq.n	800908a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e09a      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2202      	movs	r2, #2
 8009090:	4013      	ands	r3, r2
 8009092:	d015      	beq.n	80090c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2204      	movs	r2, #4
 800909a:	4013      	ands	r3, r2
 800909c:	d006      	beq.n	80090ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800909e:	4b4b      	ldr	r3, [pc, #300]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	4b4a      	ldr	r3, [pc, #296]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090a4:	21e0      	movs	r1, #224	; 0xe0
 80090a6:	00c9      	lsls	r1, r1, #3
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ac:	4b47      	ldr	r3, [pc, #284]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	22f0      	movs	r2, #240	; 0xf0
 80090b2:	4393      	bics	r3, r2
 80090b4:	0019      	movs	r1, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	4b44      	ldr	r3, [pc, #272]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090bc:	430a      	orrs	r2, r1
 80090be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2201      	movs	r2, #1
 80090c6:	4013      	ands	r3, r2
 80090c8:	d040      	beq.n	800914c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d107      	bne.n	80090e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090d2:	4b3e      	ldr	r3, [pc, #248]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	2380      	movs	r3, #128	; 0x80
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	4013      	ands	r3, r2
 80090dc:	d114      	bne.n	8009108 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e06e      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d107      	bne.n	80090fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ea:	4b38      	ldr	r3, [pc, #224]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	049b      	lsls	r3, r3, #18
 80090f2:	4013      	ands	r3, r2
 80090f4:	d108      	bne.n	8009108 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e062      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fa:	4b34      	ldr	r3, [pc, #208]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2202      	movs	r2, #2
 8009100:	4013      	ands	r3, r2
 8009102:	d101      	bne.n	8009108 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e05b      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009108:	4b30      	ldr	r3, [pc, #192]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2203      	movs	r2, #3
 800910e:	4393      	bics	r3, r2
 8009110:	0019      	movs	r1, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	4b2d      	ldr	r3, [pc, #180]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 8009118:	430a      	orrs	r2, r1
 800911a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800911c:	f7fe f9b0 	bl	8007480 <HAL_GetTick>
 8009120:	0003      	movs	r3, r0
 8009122:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009124:	e009      	b.n	800913a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009126:	f7fe f9ab 	bl	8007480 <HAL_GetTick>
 800912a:	0002      	movs	r2, r0
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	4a27      	ldr	r2, [pc, #156]	; (80091d0 <HAL_RCC_ClockConfig+0x18c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e042      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	220c      	movs	r2, #12
 8009140:	401a      	ands	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	429a      	cmp	r2, r3
 800914a:	d1ec      	bne.n	8009126 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800914c:	4b1e      	ldr	r3, [pc, #120]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	4013      	ands	r3, r2
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d211      	bcs.n	800917e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800915a:	4b1b      	ldr	r3, [pc, #108]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2201      	movs	r2, #1
 8009160:	4393      	bics	r3, r2
 8009162:	0019      	movs	r1, r3
 8009164:	4b18      	ldr	r3, [pc, #96]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800916c:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <HAL_RCC_ClockConfig+0x184>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2201      	movs	r2, #1
 8009172:	4013      	ands	r3, r2
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d001      	beq.n	800917e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e020      	b.n	80091c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2204      	movs	r2, #4
 8009184:	4013      	ands	r3, r2
 8009186:	d009      	beq.n	800919c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4a11      	ldr	r2, [pc, #68]	; (80091d4 <HAL_RCC_ClockConfig+0x190>)
 800918e:	4013      	ands	r3, r2
 8009190:	0019      	movs	r1, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 8009198:	430a      	orrs	r2, r1
 800919a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800919c:	f000 f820 	bl	80091e0 <HAL_RCC_GetSysClockFreq>
 80091a0:	0001      	movs	r1, r0
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <HAL_RCC_ClockConfig+0x188>)
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	091b      	lsrs	r3, r3, #4
 80091a8:	220f      	movs	r2, #15
 80091aa:	4013      	ands	r3, r2
 80091ac:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <HAL_RCC_ClockConfig+0x194>)
 80091ae:	5cd3      	ldrb	r3, [r2, r3]
 80091b0:	000a      	movs	r2, r1
 80091b2:	40da      	lsrs	r2, r3
 80091b4:	4b09      	ldr	r3, [pc, #36]	; (80091dc <HAL_RCC_ClockConfig+0x198>)
 80091b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80091b8:	2000      	movs	r0, #0
 80091ba:	f7fe f91b 	bl	80073f4 <HAL_InitTick>
  
  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	0018      	movs	r0, r3
 80091c2:	46bd      	mov	sp, r7
 80091c4:	b004      	add	sp, #16
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	40022000 	.word	0x40022000
 80091cc:	40021000 	.word	0x40021000
 80091d0:	00001388 	.word	0x00001388
 80091d4:	fffff8ff 	.word	0xfffff8ff
 80091d8:	0800fcc4 	.word	0x0800fcc4
 80091dc:	20000094 	.word	0x20000094

080091e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	2300      	movs	r3, #0
 80091ec:	60bb      	str	r3, [r7, #8]
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	2300      	movs	r3, #0
 80091f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80091fa:	4b21      	ldr	r3, [pc, #132]	; (8009280 <HAL_RCC_GetSysClockFreq+0xa0>)
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	220c      	movs	r2, #12
 8009204:	4013      	ands	r3, r2
 8009206:	2b04      	cmp	r3, #4
 8009208:	d002      	beq.n	8009210 <HAL_RCC_GetSysClockFreq+0x30>
 800920a:	2b08      	cmp	r3, #8
 800920c:	d003      	beq.n	8009216 <HAL_RCC_GetSysClockFreq+0x36>
 800920e:	e02e      	b.n	800926e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009210:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009212:	613b      	str	r3, [r7, #16]
      break;
 8009214:	e02e      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	0c9b      	lsrs	r3, r3, #18
 800921a:	220f      	movs	r2, #15
 800921c:	4013      	ands	r3, r2
 800921e:	4a1a      	ldr	r2, [pc, #104]	; (8009288 <HAL_RCC_GetSysClockFreq+0xa8>)
 8009220:	5cd3      	ldrb	r3, [r2, r3]
 8009222:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	220f      	movs	r2, #15
 800922a:	4013      	ands	r3, r2
 800922c:	4a17      	ldr	r2, [pc, #92]	; (800928c <HAL_RCC_GetSysClockFreq+0xac>)
 800922e:	5cd3      	ldrb	r3, [r2, r3]
 8009230:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	23c0      	movs	r3, #192	; 0xc0
 8009236:	025b      	lsls	r3, r3, #9
 8009238:	401a      	ands	r2, r3
 800923a:	2380      	movs	r3, #128	; 0x80
 800923c:	025b      	lsls	r3, r3, #9
 800923e:	429a      	cmp	r2, r3
 8009240:	d109      	bne.n	8009256 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	480f      	ldr	r0, [pc, #60]	; (8009284 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009246:	f7f6 ff6f 	bl	8000128 <__udivsi3>
 800924a:	0003      	movs	r3, r0
 800924c:	001a      	movs	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4353      	muls	r3, r2
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e008      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	480a      	ldr	r0, [pc, #40]	; (8009284 <HAL_RCC_GetSysClockFreq+0xa4>)
 800925a:	f7f6 ff65 	bl	8000128 <__udivsi3>
 800925e:	0003      	movs	r3, r0
 8009260:	001a      	movs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4353      	muls	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	613b      	str	r3, [r7, #16]
      break;
 800926c:	e002      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800926e:	4b05      	ldr	r3, [pc, #20]	; (8009284 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009270:	613b      	str	r3, [r7, #16]
      break;
 8009272:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009274:	693b      	ldr	r3, [r7, #16]
}
 8009276:	0018      	movs	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	b006      	add	sp, #24
 800927c:	bd80      	pop	{r7, pc}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	40021000 	.word	0x40021000
 8009284:	007a1200 	.word	0x007a1200
 8009288:	0800fcdc 	.word	0x0800fcdc
 800928c:	0800fcec 	.word	0x0800fcec

08009290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009294:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009296:	681b      	ldr	r3, [r3, #0]
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	20000094 	.word	0x20000094

080092a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80092a8:	f7ff fff2 	bl	8009290 <HAL_RCC_GetHCLKFreq>
 80092ac:	0001      	movs	r1, r0
 80092ae:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	0a1b      	lsrs	r3, r3, #8
 80092b4:	2207      	movs	r2, #7
 80092b6:	4013      	ands	r3, r2
 80092b8:	4a04      	ldr	r2, [pc, #16]	; (80092cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80092ba:	5cd3      	ldrb	r3, [r2, r3]
 80092bc:	40d9      	lsrs	r1, r3
 80092be:	000b      	movs	r3, r1
}    
 80092c0:	0018      	movs	r0, r3
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	40021000 	.word	0x40021000
 80092cc:	0800fcd4 	.word	0x0800fcd4

080092d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	2380      	movs	r3, #128	; 0x80
 80092e6:	025b      	lsls	r3, r3, #9
 80092e8:	4013      	ands	r3, r2
 80092ea:	d100      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80092ec:	e08e      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80092ee:	2017      	movs	r0, #23
 80092f0:	183b      	adds	r3, r7, r0
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092f6:	4b57      	ldr	r3, [pc, #348]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80092f8:	69da      	ldr	r2, [r3, #28]
 80092fa:	2380      	movs	r3, #128	; 0x80
 80092fc:	055b      	lsls	r3, r3, #21
 80092fe:	4013      	ands	r3, r2
 8009300:	d110      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009302:	4b54      	ldr	r3, [pc, #336]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009304:	69da      	ldr	r2, [r3, #28]
 8009306:	4b53      	ldr	r3, [pc, #332]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009308:	2180      	movs	r1, #128	; 0x80
 800930a:	0549      	lsls	r1, r1, #21
 800930c:	430a      	orrs	r2, r1
 800930e:	61da      	str	r2, [r3, #28]
 8009310:	4b50      	ldr	r3, [pc, #320]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	2380      	movs	r3, #128	; 0x80
 8009316:	055b      	lsls	r3, r3, #21
 8009318:	4013      	ands	r3, r2
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800931e:	183b      	adds	r3, r7, r0
 8009320:	2201      	movs	r2, #1
 8009322:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009324:	4b4c      	ldr	r3, [pc, #304]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	005b      	lsls	r3, r3, #1
 800932c:	4013      	ands	r3, r2
 800932e:	d11a      	bne.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009330:	4b49      	ldr	r3, [pc, #292]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	4b48      	ldr	r3, [pc, #288]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8009336:	2180      	movs	r1, #128	; 0x80
 8009338:	0049      	lsls	r1, r1, #1
 800933a:	430a      	orrs	r2, r1
 800933c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800933e:	f7fe f89f 	bl	8007480 <HAL_GetTick>
 8009342:	0003      	movs	r3, r0
 8009344:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009346:	e008      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009348:	f7fe f89a 	bl	8007480 <HAL_GetTick>
 800934c:	0002      	movs	r2, r0
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b64      	cmp	r3, #100	; 0x64
 8009354:	d901      	bls.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e077      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800935a:	4b3f      	ldr	r3, [pc, #252]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	2380      	movs	r3, #128	; 0x80
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4013      	ands	r3, r2
 8009364:	d0f0      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009366:	4b3b      	ldr	r3, [pc, #236]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009368:	6a1a      	ldr	r2, [r3, #32]
 800936a:	23c0      	movs	r3, #192	; 0xc0
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4013      	ands	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d034      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	23c0      	movs	r3, #192	; 0xc0
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4013      	ands	r3, r2
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	429a      	cmp	r2, r3
 8009386:	d02c      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009388:	4b32      	ldr	r3, [pc, #200]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800938a:	6a1b      	ldr	r3, [r3, #32]
 800938c:	4a33      	ldr	r2, [pc, #204]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800938e:	4013      	ands	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009392:	4b30      	ldr	r3, [pc, #192]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009394:	6a1a      	ldr	r2, [r3, #32]
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009398:	2180      	movs	r1, #128	; 0x80
 800939a:	0249      	lsls	r1, r1, #9
 800939c:	430a      	orrs	r2, r1
 800939e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093a0:	4b2c      	ldr	r3, [pc, #176]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80093a2:	6a1a      	ldr	r2, [r3, #32]
 80093a4:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80093a6:	492e      	ldr	r1, [pc, #184]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80093a8:	400a      	ands	r2, r1
 80093aa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80093ac:	4b29      	ldr	r3, [pc, #164]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	4013      	ands	r3, r2
 80093b8:	d013      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093ba:	f7fe f861 	bl	8007480 <HAL_GetTick>
 80093be:	0003      	movs	r3, r0
 80093c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093c2:	e009      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093c4:	f7fe f85c 	bl	8007480 <HAL_GetTick>
 80093c8:	0002      	movs	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	4a25      	ldr	r2, [pc, #148]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e038      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093d8:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	2202      	movs	r2, #2
 80093de:	4013      	ands	r3, r2
 80093e0:	d0f0      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	4a1d      	ldr	r2, [pc, #116]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80093e8:	4013      	ands	r3, r2
 80093ea:	0019      	movs	r1, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	4b18      	ldr	r3, [pc, #96]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80093f2:	430a      	orrs	r2, r1
 80093f4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80093f6:	2317      	movs	r3, #23
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d105      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009400:	4b14      	ldr	r3, [pc, #80]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	4b13      	ldr	r3, [pc, #76]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009406:	4918      	ldr	r1, [pc, #96]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8009408:	400a      	ands	r2, r1
 800940a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2201      	movs	r2, #1
 8009412:	4013      	ands	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	2203      	movs	r2, #3
 800941c:	4393      	bics	r3, r2
 800941e:	0019      	movs	r1, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009426:	430a      	orrs	r2, r1
 8009428:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2220      	movs	r2, #32
 8009430:	4013      	ands	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009434:	4b07      	ldr	r3, [pc, #28]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	2210      	movs	r2, #16
 800943a:	4393      	bics	r3, r2
 800943c:	0019      	movs	r1, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	4b04      	ldr	r3, [pc, #16]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8009444:	430a      	orrs	r2, r1
 8009446:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	0018      	movs	r0, r3
 800944c:	46bd      	mov	sp, r7
 800944e:	b006      	add	sp, #24
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	40021000 	.word	0x40021000
 8009458:	40007000 	.word	0x40007000
 800945c:	fffffcff 	.word	0xfffffcff
 8009460:	fffeffff 	.word	0xfffeffff
 8009464:	00001388 	.word	0x00001388
 8009468:	efffffff 	.word	0xefffffff

0800946c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e0a8      	b.n	80095d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	2382      	movs	r3, #130	; 0x82
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	429a      	cmp	r2, r3
 8009490:	d009      	beq.n	80094a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	61da      	str	r2, [r3, #28]
 8009498:	e005      	b.n	80094a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	225d      	movs	r2, #93	; 0x5d
 80094b0:	5c9b      	ldrb	r3, [r3, r2]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	225c      	movs	r2, #92	; 0x5c
 80094bc:	2100      	movs	r1, #0
 80094be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0018      	movs	r0, r3
 80094c4:	f7fd fcf0 	bl	8006ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	225d      	movs	r2, #93	; 0x5d
 80094cc:	2102      	movs	r1, #2
 80094ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2140      	movs	r1, #64	; 0x40
 80094dc:	438a      	bics	r2, r1
 80094de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	23e0      	movs	r3, #224	; 0xe0
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d902      	bls.n	80094f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e002      	b.n	80094f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094f2:	2380      	movs	r3, #128	; 0x80
 80094f4:	015b      	lsls	r3, r3, #5
 80094f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	23f0      	movs	r3, #240	; 0xf0
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	429a      	cmp	r2, r3
 8009502:	d008      	beq.n	8009516 <HAL_SPI_Init+0xaa>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	23e0      	movs	r3, #224	; 0xe0
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	429a      	cmp	r2, r3
 800950e:	d002      	beq.n	8009516 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	2382      	movs	r3, #130	; 0x82
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	401a      	ands	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6899      	ldr	r1, [r3, #8]
 8009524:	2384      	movs	r3, #132	; 0x84
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	400b      	ands	r3, r1
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2102      	movs	r1, #2
 8009532:	400b      	ands	r3, r1
 8009534:	431a      	orrs	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	2101      	movs	r1, #1
 800953c:	400b      	ands	r3, r1
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6999      	ldr	r1, [r3, #24]
 8009544:	2380      	movs	r3, #128	; 0x80
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	400b      	ands	r3, r1
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	2138      	movs	r1, #56	; 0x38
 8009552:	400b      	ands	r3, r1
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	2180      	movs	r1, #128	; 0x80
 800955c:	400b      	ands	r3, r1
 800955e:	431a      	orrs	r2, r3
 8009560:	0011      	movs	r1, r2
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009566:	2380      	movs	r3, #128	; 0x80
 8009568:	019b      	lsls	r3, r3, #6
 800956a:	401a      	ands	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	0c1b      	lsrs	r3, r3, #16
 800957a:	2204      	movs	r2, #4
 800957c:	401a      	ands	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	2110      	movs	r1, #16
 8009584:	400b      	ands	r3, r1
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	2108      	movs	r1, #8
 800958e:	400b      	ands	r3, r1
 8009590:	431a      	orrs	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68d9      	ldr	r1, [r3, #12]
 8009596:	23f0      	movs	r3, #240	; 0xf0
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	400b      	ands	r3, r1
 800959c:	431a      	orrs	r2, r3
 800959e:	0011      	movs	r1, r2
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	2380      	movs	r3, #128	; 0x80
 80095a4:	015b      	lsls	r3, r3, #5
 80095a6:	401a      	ands	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69da      	ldr	r2, [r3, #28]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4907      	ldr	r1, [pc, #28]	; (80095d8 <HAL_SPI_Init+0x16c>)
 80095bc:	400a      	ands	r2, r1
 80095be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	225d      	movs	r2, #93	; 0x5d
 80095ca:	2101      	movs	r1, #1
 80095cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	0018      	movs	r0, r3
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b004      	add	sp, #16
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	fffff7ff 	.word	0xfffff7ff

080095dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	1dbb      	adds	r3, r7, #6
 80095ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095ec:	231f      	movs	r3, #31
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	225c      	movs	r2, #92	; 0x5c
 80095f8:	5c9b      	ldrb	r3, [r3, r2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_SPI_Transmit+0x26>
 80095fe:	2302      	movs	r3, #2
 8009600:	e147      	b.n	8009892 <HAL_SPI_Transmit+0x2b6>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	225c      	movs	r2, #92	; 0x5c
 8009606:	2101      	movs	r1, #1
 8009608:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960a:	f7fd ff39 	bl	8007480 <HAL_GetTick>
 800960e:	0003      	movs	r3, r0
 8009610:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009612:	2316      	movs	r3, #22
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	1dba      	adds	r2, r7, #6
 8009618:	8812      	ldrh	r2, [r2, #0]
 800961a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	225d      	movs	r2, #93	; 0x5d
 8009620:	5c9b      	ldrb	r3, [r3, r2]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	d004      	beq.n	8009632 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009628:	231f      	movs	r3, #31
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	2202      	movs	r2, #2
 800962e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009630:	e128      	b.n	8009884 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <HAL_SPI_Transmit+0x64>
 8009638:	1dbb      	adds	r3, r7, #6
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009640:	231f      	movs	r3, #31
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2201      	movs	r2, #1
 8009646:	701a      	strb	r2, [r3, #0]
    goto error;
 8009648:	e11c      	b.n	8009884 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	225d      	movs	r2, #93	; 0x5d
 800964e:	2103      	movs	r1, #3
 8009650:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1dba      	adds	r2, r7, #6
 8009662:	8812      	ldrh	r2, [r2, #0]
 8009664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	1dba      	adds	r2, r7, #6
 800966a:	8812      	ldrh	r2, [r2, #0]
 800966c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2244      	movs	r2, #68	; 0x44
 8009678:	2100      	movs	r1, #0
 800967a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2246      	movs	r2, #70	; 0x46
 8009680:	2100      	movs	r1, #0
 8009682:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	2380      	movs	r3, #128	; 0x80
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	429a      	cmp	r2, r3
 800969a:	d110      	bne.n	80096be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2140      	movs	r1, #64	; 0x40
 80096a8:	438a      	bics	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2180      	movs	r1, #128	; 0x80
 80096b8:	01c9      	lsls	r1, r1, #7
 80096ba:	430a      	orrs	r2, r1
 80096bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2240      	movs	r2, #64	; 0x40
 80096c6:	4013      	ands	r3, r2
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d007      	beq.n	80096dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2140      	movs	r1, #64	; 0x40
 80096d8:	430a      	orrs	r2, r1
 80096da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	23e0      	movs	r3, #224	; 0xe0
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d952      	bls.n	800978e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_SPI_Transmit+0x11e>
 80096f0:	2316      	movs	r3, #22
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d143      	bne.n	8009782 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	881a      	ldrh	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	1c9a      	adds	r2, r3, #2
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800971e:	e030      	b.n	8009782 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	2202      	movs	r2, #2
 8009728:	4013      	ands	r3, r2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d112      	bne.n	8009754 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	881a      	ldrh	r2, [r3, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	1c9a      	adds	r2, r3, #2
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009752:	e016      	b.n	8009782 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009754:	f7fd fe94 	bl	8007480 <HAL_GetTick>
 8009758:	0002      	movs	r2, r0
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d802      	bhi.n	800976a <HAL_SPI_Transmit+0x18e>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3301      	adds	r3, #1
 8009768:	d102      	bne.n	8009770 <HAL_SPI_Transmit+0x194>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d108      	bne.n	8009782 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8009770:	231f      	movs	r3, #31
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	2203      	movs	r2, #3
 8009776:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	225d      	movs	r2, #93	; 0x5d
 800977c:	2101      	movs	r1, #1
 800977e:	5499      	strb	r1, [r3, r2]
          goto error;
 8009780:	e080      	b.n	8009884 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009786:	b29b      	uxth	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1c9      	bne.n	8009720 <HAL_SPI_Transmit+0x144>
 800978c:	e053      	b.n	8009836 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <HAL_SPI_Transmit+0x1c4>
 8009796:	2316      	movs	r3, #22
 8009798:	18fb      	adds	r3, r7, r3
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d145      	bne.n	800982c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	330c      	adds	r3, #12
 80097aa:	7812      	ldrb	r2, [r2, #0]
 80097ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80097c6:	e031      	b.n	800982c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2202      	movs	r2, #2
 80097d0:	4013      	ands	r3, r2
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d113      	bne.n	80097fe <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	330c      	adds	r3, #12
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097fc:	e016      	b.n	800982c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097fe:	f7fd fe3f 	bl	8007480 <HAL_GetTick>
 8009802:	0002      	movs	r2, r0
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d802      	bhi.n	8009814 <HAL_SPI_Transmit+0x238>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	d102      	bne.n	800981a <HAL_SPI_Transmit+0x23e>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d108      	bne.n	800982c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800981a:	231f      	movs	r3, #31
 800981c:	18fb      	adds	r3, r7, r3
 800981e:	2203      	movs	r2, #3
 8009820:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	225d      	movs	r2, #93	; 0x5d
 8009826:	2101      	movs	r1, #1
 8009828:	5499      	strb	r1, [r3, r2]
          goto error;
 800982a:	e02b      	b.n	8009884 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1c8      	bne.n	80097c8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	0018      	movs	r0, r3
 800983e:	f000 fb3f 	bl	8009ec0 <SPI_EndRxTxTransaction>
 8009842:	1e03      	subs	r3, r0, #0
 8009844:	d002      	beq.n	800984c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2220      	movs	r2, #32
 800984a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8009872:	231f      	movs	r3, #31
 8009874:	18fb      	adds	r3, r7, r3
 8009876:	2201      	movs	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	e003      	b.n	8009884 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	225d      	movs	r2, #93	; 0x5d
 8009880:	2101      	movs	r1, #1
 8009882:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	225c      	movs	r2, #92	; 0x5c
 8009888:	2100      	movs	r1, #0
 800988a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800988c:	231f      	movs	r3, #31
 800988e:	18fb      	adds	r3, r7, r3
 8009890:	781b      	ldrb	r3, [r3, #0]
}
 8009892:	0018      	movs	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	b008      	add	sp, #32
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	; 0x28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	001a      	movs	r2, r3
 80098aa:	1cbb      	adds	r3, r7, #2
 80098ac:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098ae:	2301      	movs	r3, #1
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098b2:	2323      	movs	r3, #35	; 0x23
 80098b4:	18fb      	adds	r3, r7, r3
 80098b6:	2200      	movs	r2, #0
 80098b8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	225c      	movs	r2, #92	; 0x5c
 80098be:	5c9b      	ldrb	r3, [r3, r2]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_SPI_TransmitReceive+0x2c>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e1c4      	b.n	8009c52 <HAL_SPI_TransmitReceive+0x3b6>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	225c      	movs	r2, #92	; 0x5c
 80098cc:	2101      	movs	r1, #1
 80098ce:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098d0:	f7fd fdd6 	bl	8007480 <HAL_GetTick>
 80098d4:	0003      	movs	r3, r0
 80098d6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098d8:	201b      	movs	r0, #27
 80098da:	183b      	adds	r3, r7, r0
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	215d      	movs	r1, #93	; 0x5d
 80098e0:	5c52      	ldrb	r2, [r2, r1]
 80098e2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80098ea:	2312      	movs	r3, #18
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	1cba      	adds	r2, r7, #2
 80098f0:	8812      	ldrh	r2, [r2, #0]
 80098f2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098f4:	183b      	adds	r3, r7, r0
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d011      	beq.n	8009920 <HAL_SPI_TransmitReceive+0x84>
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	2382      	movs	r3, #130	; 0x82
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	429a      	cmp	r2, r3
 8009904:	d107      	bne.n	8009916 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d103      	bne.n	8009916 <HAL_SPI_TransmitReceive+0x7a>
 800990e:	183b      	adds	r3, r7, r0
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b04      	cmp	r3, #4
 8009914:	d004      	beq.n	8009920 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009916:	2323      	movs	r3, #35	; 0x23
 8009918:	18fb      	adds	r3, r7, r3
 800991a:	2202      	movs	r2, #2
 800991c:	701a      	strb	r2, [r3, #0]
    goto error;
 800991e:	e191      	b.n	8009c44 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <HAL_SPI_TransmitReceive+0x98>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_SPI_TransmitReceive+0x98>
 800992c:	1cbb      	adds	r3, r7, #2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009934:	2323      	movs	r3, #35	; 0x23
 8009936:	18fb      	adds	r3, r7, r3
 8009938:	2201      	movs	r2, #1
 800993a:	701a      	strb	r2, [r3, #0]
    goto error;
 800993c:	e182      	b.n	8009c44 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	225d      	movs	r2, #93	; 0x5d
 8009942:	5c9b      	ldrb	r3, [r3, r2]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b04      	cmp	r3, #4
 8009948:	d003      	beq.n	8009952 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	225d      	movs	r2, #93	; 0x5d
 800994e:	2105      	movs	r1, #5
 8009950:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1cba      	adds	r2, r7, #2
 8009962:	2146      	movs	r1, #70	; 0x46
 8009964:	8812      	ldrh	r2, [r2, #0]
 8009966:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1cba      	adds	r2, r7, #2
 800996c:	2144      	movs	r1, #68	; 0x44
 800996e:	8812      	ldrh	r2, [r2, #0]
 8009970:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	1cba      	adds	r2, r7, #2
 800997c:	8812      	ldrh	r2, [r2, #0]
 800997e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	1cba      	adds	r2, r7, #2
 8009984:	8812      	ldrh	r2, [r2, #0]
 8009986:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	23e0      	movs	r3, #224	; 0xe0
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	429a      	cmp	r2, r3
 800999e:	d908      	bls.n	80099b2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	49ac      	ldr	r1, [pc, #688]	; (8009c5c <HAL_SPI_TransmitReceive+0x3c0>)
 80099ac:	400a      	ands	r2, r1
 80099ae:	605a      	str	r2, [r3, #4]
 80099b0:	e008      	b.n	80099c4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2180      	movs	r1, #128	; 0x80
 80099be:	0149      	lsls	r1, r1, #5
 80099c0:	430a      	orrs	r2, r1
 80099c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2240      	movs	r2, #64	; 0x40
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b40      	cmp	r3, #64	; 0x40
 80099d0:	d007      	beq.n	80099e2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2140      	movs	r1, #64	; 0x40
 80099de:	430a      	orrs	r2, r1
 80099e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	23e0      	movs	r3, #224	; 0xe0
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d800      	bhi.n	80099f0 <HAL_SPI_TransmitReceive+0x154>
 80099ee:	e083      	b.n	8009af8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d005      	beq.n	8009a04 <HAL_SPI_TransmitReceive+0x168>
 80099f8:	2312      	movs	r3, #18
 80099fa:	18fb      	adds	r3, r7, r3
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d000      	beq.n	8009a04 <HAL_SPI_TransmitReceive+0x168>
 8009a02:	e06d      	b.n	8009ae0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	881a      	ldrh	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	1c9a      	adds	r2, r3, #2
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	3b01      	subs	r3, #1
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a28:	e05a      	b.n	8009ae0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2202      	movs	r2, #2
 8009a32:	4013      	ands	r3, r2
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d11b      	bne.n	8009a70 <HAL_SPI_TransmitReceive+0x1d4>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d016      	beq.n	8009a70 <HAL_SPI_TransmitReceive+0x1d4>
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d113      	bne.n	8009a70 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	881a      	ldrh	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	1c9a      	adds	r2, r3, #2
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	2201      	movs	r2, #1
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d11c      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x21c>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2246      	movs	r2, #70	; 0x46
 8009a82:	5a9b      	ldrh	r3, [r3, r2]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d016      	beq.n	8009ab8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a94:	b292      	uxth	r2, r2
 8009a96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	1c9a      	adds	r2, r3, #2
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2246      	movs	r2, #70	; 0x46
 8009aa6:	5a9b      	ldrh	r3, [r3, r2]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b299      	uxth	r1, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2246      	movs	r2, #70	; 0x46
 8009ab2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ab8:	f7fd fce2 	bl	8007480 <HAL_GetTick>
 8009abc:	0002      	movs	r2, r0
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d80b      	bhi.n	8009ae0 <HAL_SPI_TransmitReceive+0x244>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	3301      	adds	r3, #1
 8009acc:	d008      	beq.n	8009ae0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009ace:	2323      	movs	r3, #35	; 0x23
 8009ad0:	18fb      	adds	r3, r7, r3
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	225d      	movs	r2, #93	; 0x5d
 8009ada:	2101      	movs	r1, #1
 8009adc:	5499      	strb	r1, [r3, r2]
        goto error;
 8009ade:	e0b1      	b.n	8009c44 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d19f      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x18e>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2246      	movs	r2, #70	; 0x46
 8009aee:	5a9b      	ldrh	r3, [r3, r2]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d199      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x18e>
 8009af6:	e089      	b.n	8009c0c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <HAL_SPI_TransmitReceive+0x270>
 8009b00:	2312      	movs	r3, #18
 8009b02:	18fb      	adds	r3, r7, r3
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d000      	beq.n	8009b0c <HAL_SPI_TransmitReceive+0x270>
 8009b0a:	e074      	b.n	8009bf6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	330c      	adds	r3, #12
 8009b16:	7812      	ldrb	r2, [r2, #0]
 8009b18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b32:	e060      	b.n	8009bf6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d11c      	bne.n	8009b7c <HAL_SPI_TransmitReceive+0x2e0>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d017      	beq.n	8009b7c <HAL_SPI_TransmitReceive+0x2e0>
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d114      	bne.n	8009b7c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	330c      	adds	r3, #12
 8009b5c:	7812      	ldrb	r2, [r2, #0]
 8009b5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2201      	movs	r2, #1
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d11e      	bne.n	8009bc8 <HAL_SPI_TransmitReceive+0x32c>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2246      	movs	r2, #70	; 0x46
 8009b8e:	5a9b      	ldrh	r3, [r3, r2]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d018      	beq.n	8009bc8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2246      	movs	r2, #70	; 0x46
 8009bb6:	5a9b      	ldrh	r3, [r3, r2]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b299      	uxth	r1, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2246      	movs	r2, #70	; 0x46
 8009bc2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009bc8:	f7fd fc5a 	bl	8007480 <HAL_GetTick>
 8009bcc:	0002      	movs	r2, r0
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d802      	bhi.n	8009bde <HAL_SPI_TransmitReceive+0x342>
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bda:	3301      	adds	r3, #1
 8009bdc:	d102      	bne.n	8009be4 <HAL_SPI_TransmitReceive+0x348>
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d108      	bne.n	8009bf6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8009be4:	2323      	movs	r3, #35	; 0x23
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	2203      	movs	r2, #3
 8009bea:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	225d      	movs	r2, #93	; 0x5d
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	5499      	strb	r1, [r3, r2]
        goto error;
 8009bf4:	e026      	b.n	8009c44 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d199      	bne.n	8009b34 <HAL_SPI_TransmitReceive+0x298>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2246      	movs	r2, #70	; 0x46
 8009c04:	5a9b      	ldrh	r3, [r3, r2]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d193      	bne.n	8009b34 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	0018      	movs	r0, r3
 8009c14:	f000 f954 	bl	8009ec0 <SPI_EndRxTxTransaction>
 8009c18:	1e03      	subs	r3, r0, #0
 8009c1a:	d006      	beq.n	8009c2a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009c1c:	2323      	movs	r3, #35	; 0x23
 8009c1e:	18fb      	adds	r3, r7, r3
 8009c20:	2201      	movs	r2, #1
 8009c22:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d004      	beq.n	8009c3c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8009c32:	2323      	movs	r3, #35	; 0x23
 8009c34:	18fb      	adds	r3, r7, r3
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
 8009c3a:	e003      	b.n	8009c44 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	225d      	movs	r2, #93	; 0x5d
 8009c40:	2101      	movs	r1, #1
 8009c42:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	225c      	movs	r2, #92	; 0x5c
 8009c48:	2100      	movs	r1, #0
 8009c4a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c4c:	2323      	movs	r3, #35	; 0x23
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	781b      	ldrb	r3, [r3, #0]
}
 8009c52:	0018      	movs	r0, r3
 8009c54:	46bd      	mov	sp, r7
 8009c56:	b00a      	add	sp, #40	; 0x28
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	ffffefff 	.word	0xffffefff

08009c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	1dfb      	adds	r3, r7, #7
 8009c6e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c70:	f7fd fc06 	bl	8007480 <HAL_GetTick>
 8009c74:	0002      	movs	r2, r0
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	18d3      	adds	r3, r2, r3
 8009c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c80:	f7fd fbfe 	bl	8007480 <HAL_GetTick>
 8009c84:	0003      	movs	r3, r0
 8009c86:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c88:	4b3a      	ldr	r3, [pc, #232]	; (8009d74 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	015b      	lsls	r3, r3, #5
 8009c8e:	0d1b      	lsrs	r3, r3, #20
 8009c90:	69fa      	ldr	r2, [r7, #28]
 8009c92:	4353      	muls	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c96:	e058      	b.n	8009d4a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	d055      	beq.n	8009d4a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c9e:	f7fd fbef 	bl	8007480 <HAL_GetTick>
 8009ca2:	0002      	movs	r2, r0
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d902      	bls.n	8009cb4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d142      	bne.n	8009d3a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	21e0      	movs	r1, #224	; 0xe0
 8009cc0:	438a      	bics	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	2382      	movs	r3, #130	; 0x82
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d113      	bne.n	8009cf8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	2380      	movs	r3, #128	; 0x80
 8009cd6:	021b      	lsls	r3, r3, #8
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d005      	beq.n	8009ce8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	00db      	lsls	r3, r3, #3
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d107      	bne.n	8009cf8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2140      	movs	r1, #64	; 0x40
 8009cf4:	438a      	bics	r2, r1
 8009cf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cfc:	2380      	movs	r3, #128	; 0x80
 8009cfe:	019b      	lsls	r3, r3, #6
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d110      	bne.n	8009d26 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	491a      	ldr	r1, [pc, #104]	; (8009d78 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009d10:	400a      	ands	r2, r1
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	0189      	lsls	r1, r1, #6
 8009d22:	430a      	orrs	r2, r1
 8009d24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	225d      	movs	r2, #93	; 0x5d
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	225c      	movs	r2, #92	; 0x5c
 8009d32:	2100      	movs	r1, #0
 8009d34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e017      	b.n	8009d6a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	4013      	ands	r3, r2
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	425a      	negs	r2, r3
 8009d5a:	4153      	adcs	r3, r2
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	001a      	movs	r2, r3
 8009d60:	1dfb      	adds	r3, r7, #7
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d197      	bne.n	8009c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	b008      	add	sp, #32
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	20000094 	.word	0x20000094
 8009d78:	ffffdfff 	.word	0xffffdfff

08009d7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08a      	sub	sp, #40	; 0x28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009d8a:	2317      	movs	r3, #23
 8009d8c:	18fb      	adds	r3, r7, r3
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009d92:	f7fd fb75 	bl	8007480 <HAL_GetTick>
 8009d96:	0002      	movs	r2, r0
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	1a9b      	subs	r3, r3, r2
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	18d3      	adds	r3, r2, r3
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009da2:	f7fd fb6d 	bl	8007480 <HAL_GetTick>
 8009da6:	0003      	movs	r3, r0
 8009da8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	330c      	adds	r3, #12
 8009db0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009db2:	4b41      	ldr	r3, [pc, #260]	; (8009eb8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	0013      	movs	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	189b      	adds	r3, r3, r2
 8009dbc:	00da      	lsls	r2, r3, #3
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	0d1b      	lsrs	r3, r3, #20
 8009dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc4:	4353      	muls	r3, r2
 8009dc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009dc8:	e068      	b.n	8009e9c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	23c0      	movs	r3, #192	; 0xc0
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d10a      	bne.n	8009dea <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	2117      	movs	r1, #23
 8009de2:	187b      	adds	r3, r7, r1
 8009de4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009de6:	187b      	adds	r3, r7, r1
 8009de8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	3301      	adds	r3, #1
 8009dee:	d055      	beq.n	8009e9c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009df0:	f7fd fb46 	bl	8007480 <HAL_GetTick>
 8009df4:	0002      	movs	r2, r0
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d902      	bls.n	8009e06 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d142      	bne.n	8009e8c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	21e0      	movs	r1, #224	; 0xe0
 8009e12:	438a      	bics	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	2382      	movs	r3, #130	; 0x82
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d113      	bne.n	8009e4a <SPI_WaitFifoStateUntilTimeout+0xce>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	2380      	movs	r3, #128	; 0x80
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d005      	beq.n	8009e3a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	2380      	movs	r3, #128	; 0x80
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d107      	bne.n	8009e4a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2140      	movs	r1, #64	; 0x40
 8009e46:	438a      	bics	r2, r1
 8009e48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e4e:	2380      	movs	r3, #128	; 0x80
 8009e50:	019b      	lsls	r3, r3, #6
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d110      	bne.n	8009e78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4916      	ldr	r1, [pc, #88]	; (8009ebc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009e62:	400a      	ands	r2, r1
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2180      	movs	r1, #128	; 0x80
 8009e72:	0189      	lsls	r1, r1, #6
 8009e74:	430a      	orrs	r2, r1
 8009e76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	225d      	movs	r2, #93	; 0x5d
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	225c      	movs	r2, #92	; 0x5c
 8009e84:	2100      	movs	r1, #0
 8009e86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e010      	b.n	8009eae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d18e      	bne.n	8009dca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	0018      	movs	r0, r3
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b00a      	add	sp, #40	; 0x28
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	20000094 	.word	0x20000094
 8009ebc:	ffffdfff 	.word	0xffffdfff

08009ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	23c0      	movs	r3, #192	; 0xc0
 8009ed0:	0159      	lsls	r1, r3, #5
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	0013      	movs	r3, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	f7ff ff4e 	bl	8009d7c <SPI_WaitFifoStateUntilTimeout>
 8009ee0:	1e03      	subs	r3, r0, #0
 8009ee2:	d007      	beq.n	8009ef4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee8:	2220      	movs	r2, #32
 8009eea:	431a      	orrs	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e027      	b.n	8009f44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	0013      	movs	r3, r2
 8009efe:	2200      	movs	r2, #0
 8009f00:	2180      	movs	r1, #128	; 0x80
 8009f02:	f7ff fead 	bl	8009c60 <SPI_WaitFlagStateUntilTimeout>
 8009f06:	1e03      	subs	r3, r0, #0
 8009f08:	d007      	beq.n	8009f1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f0e:	2220      	movs	r2, #32
 8009f10:	431a      	orrs	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e014      	b.n	8009f44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	23c0      	movs	r3, #192	; 0xc0
 8009f1e:	00d9      	lsls	r1, r3, #3
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	0013      	movs	r3, r2
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f7ff ff27 	bl	8009d7c <SPI_WaitFifoStateUntilTimeout>
 8009f2e:	1e03      	subs	r3, r0, #0
 8009f30:	d007      	beq.n	8009f42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f36:	2220      	movs	r2, #32
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e000      	b.n	8009f44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b004      	add	sp, #16
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e042      	b.n	8009fe4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	223d      	movs	r2, #61	; 0x3d
 8009f62:	5c9b      	ldrb	r3, [r3, r2]
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d107      	bne.n	8009f7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	223c      	movs	r2, #60	; 0x3c
 8009f6e:	2100      	movs	r1, #0
 8009f70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7fd f821 	bl	8006fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	223d      	movs	r2, #61	; 0x3d
 8009f7e:	2102      	movs	r1, #2
 8009f80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	0019      	movs	r1, r3
 8009f8c:	0010      	movs	r0, r2
 8009f8e:	f000 f82d 	bl	8009fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2246      	movs	r2, #70	; 0x46
 8009f96:	2101      	movs	r1, #1
 8009f98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	223e      	movs	r2, #62	; 0x3e
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	5499      	strb	r1, [r3, r2]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	223f      	movs	r2, #63	; 0x3f
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	5499      	strb	r1, [r3, r2]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2240      	movs	r2, #64	; 0x40
 8009fae:	2101      	movs	r1, #1
 8009fb0:	5499      	strb	r1, [r3, r2]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2241      	movs	r2, #65	; 0x41
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2242      	movs	r2, #66	; 0x42
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	5499      	strb	r1, [r3, r2]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2243      	movs	r2, #67	; 0x43
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	5499      	strb	r1, [r3, r2]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2244      	movs	r2, #68	; 0x44
 8009fce:	2101      	movs	r1, #1
 8009fd0:	5499      	strb	r1, [r3, r2]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2245      	movs	r2, #69	; 0x45
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	223d      	movs	r2, #61	; 0x3d
 8009fde:	2101      	movs	r1, #1
 8009fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	b002      	add	sp, #8
 8009fea:	bd80      	pop	{r7, pc}

08009fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a2f      	ldr	r2, [pc, #188]	; (800a0bc <TIM_Base_SetConfig+0xd0>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d003      	beq.n	800a00c <TIM_Base_SetConfig+0x20>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a2e      	ldr	r2, [pc, #184]	; (800a0c0 <TIM_Base_SetConfig+0xd4>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d108      	bne.n	800a01e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2270      	movs	r2, #112	; 0x70
 800a010:	4393      	bics	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a26      	ldr	r2, [pc, #152]	; (800a0bc <TIM_Base_SetConfig+0xd0>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d013      	beq.n	800a04e <TIM_Base_SetConfig+0x62>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a25      	ldr	r2, [pc, #148]	; (800a0c0 <TIM_Base_SetConfig+0xd4>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00f      	beq.n	800a04e <TIM_Base_SetConfig+0x62>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a24      	ldr	r2, [pc, #144]	; (800a0c4 <TIM_Base_SetConfig+0xd8>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d00b      	beq.n	800a04e <TIM_Base_SetConfig+0x62>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a23      	ldr	r2, [pc, #140]	; (800a0c8 <TIM_Base_SetConfig+0xdc>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d007      	beq.n	800a04e <TIM_Base_SetConfig+0x62>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a22      	ldr	r2, [pc, #136]	; (800a0cc <TIM_Base_SetConfig+0xe0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_Base_SetConfig+0x62>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a21      	ldr	r2, [pc, #132]	; (800a0d0 <TIM_Base_SetConfig+0xe4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d108      	bne.n	800a060 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4a20      	ldr	r2, [pc, #128]	; (800a0d4 <TIM_Base_SetConfig+0xe8>)
 800a052:	4013      	ands	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2280      	movs	r2, #128	; 0x80
 800a064:	4393      	bics	r3, r2
 800a066:	001a      	movs	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a0c      	ldr	r2, [pc, #48]	; (800a0bc <TIM_Base_SetConfig+0xd0>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d00b      	beq.n	800a0a6 <TIM_Base_SetConfig+0xba>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a0d      	ldr	r2, [pc, #52]	; (800a0c8 <TIM_Base_SetConfig+0xdc>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d007      	beq.n	800a0a6 <TIM_Base_SetConfig+0xba>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a0c      	ldr	r2, [pc, #48]	; (800a0cc <TIM_Base_SetConfig+0xe0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d003      	beq.n	800a0a6 <TIM_Base_SetConfig+0xba>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a0b      	ldr	r2, [pc, #44]	; (800a0d0 <TIM_Base_SetConfig+0xe4>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d103      	bne.n	800a0ae <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	615a      	str	r2, [r3, #20]
}
 800a0b4:	46c0      	nop			; (mov r8, r8)
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	b004      	add	sp, #16
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40012c00 	.word	0x40012c00
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40002000 	.word	0x40002000
 800a0c8:	40014000 	.word	0x40014000
 800a0cc:	40014400 	.word	0x40014400
 800a0d0:	40014800 	.word	0x40014800
 800a0d4:	fffffcff 	.word	0xfffffcff

0800a0d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e044      	b.n	800a174 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d107      	bne.n	800a102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2278      	movs	r2, #120	; 0x78
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7fc ff7d 	bl	8006ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2224      	movs	r2, #36	; 0x24
 800a106:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2101      	movs	r1, #1
 800a114:	438a      	bics	r2, r1
 800a116:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	0018      	movs	r0, r3
 800a11c:	f000 fc4a 	bl	800a9b4 <UART_SetConfig>
 800a120:	0003      	movs	r3, r0
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e024      	b.n	800a174 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	0018      	movs	r0, r3
 800a136:	f000 fdad 	bl	800ac94 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	490d      	ldr	r1, [pc, #52]	; (800a17c <HAL_UART_Init+0xa4>)
 800a146:	400a      	ands	r2, r1
 800a148:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2108      	movs	r1, #8
 800a156:	438a      	bics	r2, r1
 800a158:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2101      	movs	r1, #1
 800a166:	430a      	orrs	r2, r1
 800a168:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	0018      	movs	r0, r3
 800a16e:	f000 fe45 	bl	800adfc <UART_CheckIdleState>
 800a172:	0003      	movs	r3, r0
}
 800a174:	0018      	movs	r0, r3
 800a176:	46bd      	mov	sp, r7
 800a178:	b002      	add	sp, #8
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	fffff7ff 	.word	0xfffff7ff

0800a180 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e030      	b.n	800a1f4 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2224      	movs	r2, #36	; 0x24
 800a196:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	438a      	bics	r2, r1
 800a1a6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f7fd f806 	bl	80071d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2284      	movs	r2, #132	; 0x84
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2280      	movs	r2, #128	; 0x80
 800a1da:	2100      	movs	r1, #0
 800a1dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2278      	movs	r2, #120	; 0x78
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	; 0x28
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	1dbb      	adds	r3, r7, #6
 800a20a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a210:	2b20      	cmp	r3, #32
 800a212:	d000      	beq.n	800a216 <HAL_UART_Transmit+0x1a>
 800a214:	e08d      	b.n	800a332 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_UART_Transmit+0x28>
 800a21c:	1dbb      	adds	r3, r7, #6
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e085      	b.n	800a334 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	2380      	movs	r3, #128	; 0x80
 800a22e:	015b      	lsls	r3, r3, #5
 800a230:	429a      	cmp	r2, r3
 800a232:	d109      	bne.n	800a248 <HAL_UART_Transmit+0x4c>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d105      	bne.n	800a248 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2201      	movs	r2, #1
 800a240:	4013      	ands	r3, r2
 800a242:	d001      	beq.n	800a248 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e075      	b.n	800a334 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2284      	movs	r2, #132	; 0x84
 800a24c:	2100      	movs	r1, #0
 800a24e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2221      	movs	r2, #33	; 0x21
 800a254:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a256:	f7fd f913 	bl	8007480 <HAL_GetTick>
 800a25a:	0003      	movs	r3, r0
 800a25c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	1dba      	adds	r2, r7, #6
 800a262:	2150      	movs	r1, #80	; 0x50
 800a264:	8812      	ldrh	r2, [r2, #0]
 800a266:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	1dba      	adds	r2, r7, #6
 800a26c:	2152      	movs	r1, #82	; 0x52
 800a26e:	8812      	ldrh	r2, [r2, #0]
 800a270:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689a      	ldr	r2, [r3, #8]
 800a276:	2380      	movs	r3, #128	; 0x80
 800a278:	015b      	lsls	r3, r3, #5
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d108      	bne.n	800a290 <HAL_UART_Transmit+0x94>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d104      	bne.n	800a290 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	61bb      	str	r3, [r7, #24]
 800a28e:	e003      	b.n	800a298 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a298:	e030      	b.n	800a2fc <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	0013      	movs	r3, r2
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2180      	movs	r1, #128	; 0x80
 800a2a8:	f000 fe50 	bl	800af4c <UART_WaitOnFlagUntilTimeout>
 800a2ac:	1e03      	subs	r3, r0, #0
 800a2ae:	d004      	beq.n	800a2ba <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e03c      	b.n	800a334 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10b      	bne.n	800a2d8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	05d2      	lsls	r2, r2, #23
 800a2ca:	0dd2      	lsrs	r2, r2, #23
 800a2cc:	b292      	uxth	r2, r2
 800a2ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	3302      	adds	r3, #2
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	e008      	b.n	800a2ea <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	781a      	ldrb	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	b292      	uxth	r2, r2
 800a2e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2252      	movs	r2, #82	; 0x52
 800a2ee:	5a9b      	ldrh	r3, [r3, r2]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	b299      	uxth	r1, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2252      	movs	r2, #82	; 0x52
 800a2fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2252      	movs	r2, #82	; 0x52
 800a300:	5a9b      	ldrh	r3, [r3, r2]
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1c8      	bne.n	800a29a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	0013      	movs	r3, r2
 800a312:	2200      	movs	r2, #0
 800a314:	2140      	movs	r1, #64	; 0x40
 800a316:	f000 fe19 	bl	800af4c <UART_WaitOnFlagUntilTimeout>
 800a31a:	1e03      	subs	r3, r0, #0
 800a31c:	d004      	beq.n	800a328 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e005      	b.n	800a334 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2220      	movs	r2, #32
 800a32c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	e000      	b.n	800a334 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800a332:	2302      	movs	r3, #2
  }
}
 800a334:	0018      	movs	r0, r3
 800a336:	46bd      	mov	sp, r7
 800a338:	b008      	add	sp, #32
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	1dbb      	adds	r3, r7, #6
 800a348:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2280      	movs	r2, #128	; 0x80
 800a34e:	589b      	ldr	r3, [r3, r2]
 800a350:	2b20      	cmp	r3, #32
 800a352:	d145      	bne.n	800a3e0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <HAL_UART_Receive_IT+0x26>
 800a35a:	1dbb      	adds	r3, r7, #6
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e03d      	b.n	800a3e2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	689a      	ldr	r2, [r3, #8]
 800a36a:	2380      	movs	r3, #128	; 0x80
 800a36c:	015b      	lsls	r3, r3, #5
 800a36e:	429a      	cmp	r2, r3
 800a370:	d109      	bne.n	800a386 <HAL_UART_Receive_IT+0x4a>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d105      	bne.n	800a386 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2201      	movs	r2, #1
 800a37e:	4013      	ands	r3, r2
 800a380:	d001      	beq.n	800a386 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e02d      	b.n	800a3e2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	2380      	movs	r3, #128	; 0x80
 800a394:	041b      	lsls	r3, r3, #16
 800a396:	4013      	ands	r3, r2
 800a398:	d019      	beq.n	800a3ce <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39a:	f3ef 8310 	mrs	r3, PRIMASK
 800a39e:	613b      	str	r3, [r7, #16]
  return(result);
 800a3a0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f383 8810 	msr	PRIMASK, r3
}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2180      	movs	r1, #128	; 0x80
 800a3bc:	04c9      	lsls	r1, r1, #19
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f383 8810 	msr	PRIMASK, r3
}
 800a3cc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a3ce:	1dbb      	adds	r3, r7, #6
 800a3d0:	881a      	ldrh	r2, [r3, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f000 fe22 	bl	800b020 <UART_Start_Receive_IT>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	e000      	b.n	800a3e2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
  }
}
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	b008      	add	sp, #32
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3ec:	b590      	push	{r4, r7, lr}
 800a3ee:	b0ab      	sub	sp, #172	; 0xac
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	22a4      	movs	r2, #164	; 0xa4
 800a3fc:	18b9      	adds	r1, r7, r2
 800a3fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	20a0      	movs	r0, #160	; 0xa0
 800a408:	1839      	adds	r1, r7, r0
 800a40a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	219c      	movs	r1, #156	; 0x9c
 800a414:	1879      	adds	r1, r7, r1
 800a416:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a418:	0011      	movs	r1, r2
 800a41a:	18bb      	adds	r3, r7, r2
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a99      	ldr	r2, [pc, #612]	; (800a684 <HAL_UART_IRQHandler+0x298>)
 800a420:	4013      	ands	r3, r2
 800a422:	2298      	movs	r2, #152	; 0x98
 800a424:	18bc      	adds	r4, r7, r2
 800a426:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800a428:	18bb      	adds	r3, r7, r2
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d114      	bne.n	800a45a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a430:	187b      	adds	r3, r7, r1
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2220      	movs	r2, #32
 800a436:	4013      	ands	r3, r2
 800a438:	d00f      	beq.n	800a45a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a43a:	183b      	adds	r3, r7, r0
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2220      	movs	r2, #32
 800a440:	4013      	ands	r3, r2
 800a442:	d00a      	beq.n	800a45a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d100      	bne.n	800a44e <HAL_UART_IRQHandler+0x62>
 800a44c:	e286      	b.n	800a95c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	0010      	movs	r0, r2
 800a456:	4798      	blx	r3
      }
      return;
 800a458:	e280      	b.n	800a95c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a45a:	2398      	movs	r3, #152	; 0x98
 800a45c:	18fb      	adds	r3, r7, r3
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d100      	bne.n	800a466 <HAL_UART_IRQHandler+0x7a>
 800a464:	e114      	b.n	800a690 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a466:	239c      	movs	r3, #156	; 0x9c
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2201      	movs	r2, #1
 800a46e:	4013      	ands	r3, r2
 800a470:	d106      	bne.n	800a480 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a472:	23a0      	movs	r3, #160	; 0xa0
 800a474:	18fb      	adds	r3, r7, r3
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a83      	ldr	r2, [pc, #524]	; (800a688 <HAL_UART_IRQHandler+0x29c>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	d100      	bne.n	800a480 <HAL_UART_IRQHandler+0x94>
 800a47e:	e107      	b.n	800a690 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a480:	23a4      	movs	r3, #164	; 0xa4
 800a482:	18fb      	adds	r3, r7, r3
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2201      	movs	r2, #1
 800a488:	4013      	ands	r3, r2
 800a48a:	d012      	beq.n	800a4b2 <HAL_UART_IRQHandler+0xc6>
 800a48c:	23a0      	movs	r3, #160	; 0xa0
 800a48e:	18fb      	adds	r3, r7, r3
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	2380      	movs	r3, #128	; 0x80
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4013      	ands	r3, r2
 800a498:	d00b      	beq.n	800a4b2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2284      	movs	r2, #132	; 0x84
 800a4a6:	589b      	ldr	r3, [r3, r2]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2184      	movs	r1, #132	; 0x84
 800a4b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4b2:	23a4      	movs	r3, #164	; 0xa4
 800a4b4:	18fb      	adds	r3, r7, r3
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	d011      	beq.n	800a4e2 <HAL_UART_IRQHandler+0xf6>
 800a4be:	239c      	movs	r3, #156	; 0x9c
 800a4c0:	18fb      	adds	r3, r7, r3
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d00b      	beq.n	800a4e2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2284      	movs	r2, #132	; 0x84
 800a4d6:	589b      	ldr	r3, [r3, r2]
 800a4d8:	2204      	movs	r2, #4
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2184      	movs	r1, #132	; 0x84
 800a4e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4e2:	23a4      	movs	r3, #164	; 0xa4
 800a4e4:	18fb      	adds	r3, r7, r3
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	d011      	beq.n	800a512 <HAL_UART_IRQHandler+0x126>
 800a4ee:	239c      	movs	r3, #156	; 0x9c
 800a4f0:	18fb      	adds	r3, r7, r3
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d00b      	beq.n	800a512 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2204      	movs	r2, #4
 800a500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2284      	movs	r2, #132	; 0x84
 800a506:	589b      	ldr	r3, [r3, r2]
 800a508:	2202      	movs	r2, #2
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2184      	movs	r1, #132	; 0x84
 800a510:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a512:	23a4      	movs	r3, #164	; 0xa4
 800a514:	18fb      	adds	r3, r7, r3
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2208      	movs	r2, #8
 800a51a:	4013      	ands	r3, r2
 800a51c:	d017      	beq.n	800a54e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a51e:	23a0      	movs	r3, #160	; 0xa0
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2220      	movs	r2, #32
 800a526:	4013      	ands	r3, r2
 800a528:	d105      	bne.n	800a536 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a52a:	239c      	movs	r3, #156	; 0x9c
 800a52c:	18fb      	adds	r3, r7, r3
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2201      	movs	r2, #1
 800a532:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a534:	d00b      	beq.n	800a54e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2208      	movs	r2, #8
 800a53c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2284      	movs	r2, #132	; 0x84
 800a542:	589b      	ldr	r3, [r3, r2]
 800a544:	2208      	movs	r2, #8
 800a546:	431a      	orrs	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2184      	movs	r1, #132	; 0x84
 800a54c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a54e:	23a4      	movs	r3, #164	; 0xa4
 800a550:	18fb      	adds	r3, r7, r3
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	011b      	lsls	r3, r3, #4
 800a558:	4013      	ands	r3, r2
 800a55a:	d013      	beq.n	800a584 <HAL_UART_IRQHandler+0x198>
 800a55c:	23a0      	movs	r3, #160	; 0xa0
 800a55e:	18fb      	adds	r3, r7, r3
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	2380      	movs	r3, #128	; 0x80
 800a564:	04db      	lsls	r3, r3, #19
 800a566:	4013      	ands	r3, r2
 800a568:	d00c      	beq.n	800a584 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2280      	movs	r2, #128	; 0x80
 800a570:	0112      	lsls	r2, r2, #4
 800a572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2284      	movs	r2, #132	; 0x84
 800a578:	589b      	ldr	r3, [r3, r2]
 800a57a:	2220      	movs	r2, #32
 800a57c:	431a      	orrs	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2184      	movs	r1, #132	; 0x84
 800a582:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2284      	movs	r2, #132	; 0x84
 800a588:	589b      	ldr	r3, [r3, r2]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d100      	bne.n	800a590 <HAL_UART_IRQHandler+0x1a4>
 800a58e:	e1e7      	b.n	800a960 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a590:	23a4      	movs	r3, #164	; 0xa4
 800a592:	18fb      	adds	r3, r7, r3
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2220      	movs	r2, #32
 800a598:	4013      	ands	r3, r2
 800a59a:	d00e      	beq.n	800a5ba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a59c:	23a0      	movs	r3, #160	; 0xa0
 800a59e:	18fb      	adds	r3, r7, r3
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	d008      	beq.n	800a5ba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d004      	beq.n	800a5ba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	0010      	movs	r0, r2
 800a5b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2284      	movs	r2, #132	; 0x84
 800a5be:	589b      	ldr	r3, [r3, r2]
 800a5c0:	2194      	movs	r1, #148	; 0x94
 800a5c2:	187a      	adds	r2, r7, r1
 800a5c4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2240      	movs	r2, #64	; 0x40
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	2b40      	cmp	r3, #64	; 0x40
 800a5d2:	d004      	beq.n	800a5de <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5d4:	187b      	adds	r3, r7, r1
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2228      	movs	r2, #40	; 0x28
 800a5da:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5dc:	d047      	beq.n	800a66e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f000 fde7 	bl	800b1b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	2240      	movs	r2, #64	; 0x40
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b40      	cmp	r3, #64	; 0x40
 800a5f2:	d137      	bne.n	800a664 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a5fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fc:	2090      	movs	r0, #144	; 0x90
 800a5fe:	183a      	adds	r2, r7, r0
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	2301      	movs	r3, #1
 800a604:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a608:	f383 8810 	msr	PRIMASK, r3
}
 800a60c:	46c0      	nop			; (mov r8, r8)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2140      	movs	r1, #64	; 0x40
 800a61a:	438a      	bics	r2, r1
 800a61c:	609a      	str	r2, [r3, #8]
 800a61e:	183b      	adds	r3, r7, r0
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a626:	f383 8810 	msr	PRIMASK, r3
}
 800a62a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a630:	2b00      	cmp	r3, #0
 800a632:	d012      	beq.n	800a65a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a638:	4a14      	ldr	r2, [pc, #80]	; (800a68c <HAL_UART_IRQHandler+0x2a0>)
 800a63a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a640:	0018      	movs	r0, r3
 800a642:	f7fd f893 	bl	800776c <HAL_DMA_Abort_IT>
 800a646:	1e03      	subs	r3, r0, #0
 800a648:	d01a      	beq.n	800a680 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a64e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a654:	0018      	movs	r0, r3
 800a656:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a658:	e012      	b.n	800a680 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	0018      	movs	r0, r3
 800a65e:	f000 f995 	bl	800a98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a662:	e00d      	b.n	800a680 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	0018      	movs	r0, r3
 800a668:	f000 f990 	bl	800a98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66c:	e008      	b.n	800a680 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0018      	movs	r0, r3
 800a672:	f000 f98b 	bl	800a98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2284      	movs	r2, #132	; 0x84
 800a67a:	2100      	movs	r1, #0
 800a67c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a67e:	e16f      	b.n	800a960 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a680:	46c0      	nop			; (mov r8, r8)
    return;
 800a682:	e16d      	b.n	800a960 <HAL_UART_IRQHandler+0x574>
 800a684:	0000080f 	.word	0x0000080f
 800a688:	04000120 	.word	0x04000120
 800a68c:	0800b27d 	.word	0x0800b27d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a694:	2b01      	cmp	r3, #1
 800a696:	d000      	beq.n	800a69a <HAL_UART_IRQHandler+0x2ae>
 800a698:	e139      	b.n	800a90e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a69a:	23a4      	movs	r3, #164	; 0xa4
 800a69c:	18fb      	adds	r3, r7, r3
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2210      	movs	r2, #16
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	d100      	bne.n	800a6a8 <HAL_UART_IRQHandler+0x2bc>
 800a6a6:	e132      	b.n	800a90e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6a8:	23a0      	movs	r3, #160	; 0xa0
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2210      	movs	r2, #16
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	d100      	bne.n	800a6b6 <HAL_UART_IRQHandler+0x2ca>
 800a6b4:	e12b      	b.n	800a90e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2210      	movs	r2, #16
 800a6bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	2240      	movs	r2, #64	; 0x40
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	2b40      	cmp	r3, #64	; 0x40
 800a6ca:	d000      	beq.n	800a6ce <HAL_UART_IRQHandler+0x2e2>
 800a6cc:	e09f      	b.n	800a80e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	217e      	movs	r1, #126	; 0x7e
 800a6d8:	187b      	adds	r3, r7, r1
 800a6da:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a6dc:	187b      	adds	r3, r7, r1
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d100      	bne.n	800a6e6 <HAL_UART_IRQHandler+0x2fa>
 800a6e4:	e13e      	b.n	800a964 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2258      	movs	r2, #88	; 0x58
 800a6ea:	5a9b      	ldrh	r3, [r3, r2]
 800a6ec:	187a      	adds	r2, r7, r1
 800a6ee:	8812      	ldrh	r2, [r2, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d300      	bcc.n	800a6f6 <HAL_UART_IRQHandler+0x30a>
 800a6f4:	e136      	b.n	800a964 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	187a      	adds	r2, r7, r1
 800a6fa:	215a      	movs	r1, #90	; 0x5a
 800a6fc:	8812      	ldrh	r2, [r2, #0]
 800a6fe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	2b20      	cmp	r3, #32
 800a708:	d06f      	beq.n	800a7ea <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a70a:	f3ef 8310 	mrs	r3, PRIMASK
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a712:	67bb      	str	r3, [r7, #120]	; 0x78
 800a714:	2301      	movs	r3, #1
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	f383 8810 	msr	PRIMASK, r3
}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4992      	ldr	r1, [pc, #584]	; (800a974 <HAL_UART_IRQHandler+0x588>)
 800a72c:	400a      	ands	r2, r1
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a732:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	f383 8810 	msr	PRIMASK, r3
}
 800a73a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a73c:	f3ef 8310 	mrs	r3, PRIMASK
 800a740:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a744:	677b      	str	r3, [r7, #116]	; 0x74
 800a746:	2301      	movs	r3, #1
 800a748:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74c:	f383 8810 	msr	PRIMASK, r3
}
 800a750:	46c0      	nop			; (mov r8, r8)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2101      	movs	r1, #1
 800a75e:	438a      	bics	r2, r1
 800a760:	609a      	str	r2, [r3, #8]
 800a762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a764:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a768:	f383 8810 	msr	PRIMASK, r3
}
 800a76c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a76e:	f3ef 8310 	mrs	r3, PRIMASK
 800a772:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a774:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a776:	673b      	str	r3, [r7, #112]	; 0x70
 800a778:	2301      	movs	r3, #1
 800a77a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a77e:	f383 8810 	msr	PRIMASK, r3
}
 800a782:	46c0      	nop			; (mov r8, r8)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2140      	movs	r1, #64	; 0x40
 800a790:	438a      	bics	r2, r1
 800a792:	609a      	str	r2, [r3, #8]
 800a794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a796:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a79a:	f383 8810 	msr	PRIMASK, r3
}
 800a79e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2280      	movs	r2, #128	; 0x80
 800a7a4:	2120      	movs	r1, #32
 800a7a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a7b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7be:	f383 8810 	msr	PRIMASK, r3
}
 800a7c2:	46c0      	nop			; (mov r8, r8)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2110      	movs	r1, #16
 800a7d0:	438a      	bics	r2, r1
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7da:	f383 8810 	msr	PRIMASK, r3
}
 800a7de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	f7fc ff89 	bl	80076fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2258      	movs	r2, #88	; 0x58
 800a7f4:	5a9a      	ldrh	r2, [r3, r2]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	215a      	movs	r1, #90	; 0x5a
 800a7fa:	5a5b      	ldrh	r3, [r3, r1]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	b29a      	uxth	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	0011      	movs	r1, r2
 800a806:	0018      	movs	r0, r3
 800a808:	f000 f8c8 	bl	800a99c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a80c:	e0aa      	b.n	800a964 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2258      	movs	r2, #88	; 0x58
 800a812:	5a99      	ldrh	r1, [r3, r2]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	225a      	movs	r2, #90	; 0x5a
 800a818:	5a9b      	ldrh	r3, [r3, r2]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	208e      	movs	r0, #142	; 0x8e
 800a81e:	183b      	adds	r3, r7, r0
 800a820:	1a8a      	subs	r2, r1, r2
 800a822:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	225a      	movs	r2, #90	; 0x5a
 800a828:	5a9b      	ldrh	r3, [r3, r2]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d100      	bne.n	800a832 <HAL_UART_IRQHandler+0x446>
 800a830:	e09a      	b.n	800a968 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800a832:	183b      	adds	r3, r7, r0
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d100      	bne.n	800a83c <HAL_UART_IRQHandler+0x450>
 800a83a:	e095      	b.n	800a968 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a83c:	f3ef 8310 	mrs	r3, PRIMASK
 800a840:	60fb      	str	r3, [r7, #12]
  return(result);
 800a842:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a844:	2488      	movs	r4, #136	; 0x88
 800a846:	193a      	adds	r2, r7, r4
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	2301      	movs	r3, #1
 800a84c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f383 8810 	msr	PRIMASK, r3
}
 800a854:	46c0      	nop			; (mov r8, r8)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4945      	ldr	r1, [pc, #276]	; (800a978 <HAL_UART_IRQHandler+0x58c>)
 800a862:	400a      	ands	r2, r1
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	193b      	adds	r3, r7, r4
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f383 8810 	msr	PRIMASK, r3
}
 800a872:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a874:	f3ef 8310 	mrs	r3, PRIMASK
 800a878:	61bb      	str	r3, [r7, #24]
  return(result);
 800a87a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87c:	2484      	movs	r4, #132	; 0x84
 800a87e:	193a      	adds	r2, r7, r4
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	2301      	movs	r3, #1
 800a884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f383 8810 	msr	PRIMASK, r3
}
 800a88c:	46c0      	nop			; (mov r8, r8)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	689a      	ldr	r2, [r3, #8]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2101      	movs	r1, #1
 800a89a:	438a      	bics	r2, r1
 800a89c:	609a      	str	r2, [r3, #8]
 800a89e:	193b      	adds	r3, r7, r4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	f383 8810 	msr	PRIMASK, r3
}
 800a8aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2280      	movs	r2, #128	; 0x80
 800a8b0:	2120      	movs	r1, #32
 800a8b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c8:	2480      	movs	r4, #128	; 0x80
 800a8ca:	193a      	adds	r2, r7, r4
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	f383 8810 	msr	PRIMASK, r3
}
 800a8d8:	46c0      	nop			; (mov r8, r8)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2110      	movs	r1, #16
 800a8e6:	438a      	bics	r2, r1
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	193b      	adds	r3, r7, r4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f2:	f383 8810 	msr	PRIMASK, r3
}
 800a8f6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8fe:	183b      	adds	r3, r7, r0
 800a900:	881a      	ldrh	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	0011      	movs	r1, r2
 800a906:	0018      	movs	r0, r3
 800a908:	f000 f848 	bl	800a99c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a90c:	e02c      	b.n	800a968 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a90e:	23a4      	movs	r3, #164	; 0xa4
 800a910:	18fb      	adds	r3, r7, r3
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2280      	movs	r2, #128	; 0x80
 800a916:	4013      	ands	r3, r2
 800a918:	d00f      	beq.n	800a93a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a91a:	23a0      	movs	r3, #160	; 0xa0
 800a91c:	18fb      	adds	r3, r7, r3
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2280      	movs	r2, #128	; 0x80
 800a922:	4013      	ands	r3, r2
 800a924:	d009      	beq.n	800a93a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d01e      	beq.n	800a96c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	0010      	movs	r0, r2
 800a936:	4798      	blx	r3
    }
    return;
 800a938:	e018      	b.n	800a96c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a93a:	23a4      	movs	r3, #164	; 0xa4
 800a93c:	18fb      	adds	r3, r7, r3
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2240      	movs	r2, #64	; 0x40
 800a942:	4013      	ands	r3, r2
 800a944:	d013      	beq.n	800a96e <HAL_UART_IRQHandler+0x582>
 800a946:	23a0      	movs	r3, #160	; 0xa0
 800a948:	18fb      	adds	r3, r7, r3
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2240      	movs	r2, #64	; 0x40
 800a94e:	4013      	ands	r3, r2
 800a950:	d00d      	beq.n	800a96e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	0018      	movs	r0, r3
 800a956:	f000 fca8 	bl	800b2aa <UART_EndTransmit_IT>
    return;
 800a95a:	e008      	b.n	800a96e <HAL_UART_IRQHandler+0x582>
      return;
 800a95c:	46c0      	nop			; (mov r8, r8)
 800a95e:	e006      	b.n	800a96e <HAL_UART_IRQHandler+0x582>
    return;
 800a960:	46c0      	nop			; (mov r8, r8)
 800a962:	e004      	b.n	800a96e <HAL_UART_IRQHandler+0x582>
      return;
 800a964:	46c0      	nop			; (mov r8, r8)
 800a966:	e002      	b.n	800a96e <HAL_UART_IRQHandler+0x582>
      return;
 800a968:	46c0      	nop			; (mov r8, r8)
 800a96a:	e000      	b.n	800a96e <HAL_UART_IRQHandler+0x582>
    return;
 800a96c:	46c0      	nop			; (mov r8, r8)
  }

}
 800a96e:	46bd      	mov	sp, r7
 800a970:	b02b      	add	sp, #172	; 0xac
 800a972:	bd90      	pop	{r4, r7, pc}
 800a974:	fffffeff 	.word	0xfffffeff
 800a978:	fffffedf 	.word	0xfffffedf

0800a97c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a984:	46c0      	nop			; (mov r8, r8)
 800a986:	46bd      	mov	sp, r7
 800a988:	b002      	add	sp, #8
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a994:	46c0      	nop			; (mov r8, r8)
 800a996:	46bd      	mov	sp, r7
 800a998:	b002      	add	sp, #8
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	000a      	movs	r2, r1
 800a9a6:	1cbb      	adds	r3, r7, #2
 800a9a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9aa:	46c0      	nop			; (mov r8, r8)
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	b002      	add	sp, #8
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9bc:	231e      	movs	r3, #30
 800a9be:	18fb      	adds	r3, r7, r3
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4aa1      	ldr	r2, [pc, #644]	; (800ac68 <UART_SetConfig+0x2b4>)
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	0019      	movs	r1, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4a9c      	ldr	r2, [pc, #624]	; (800ac6c <UART_SetConfig+0x2b8>)
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	0019      	movs	r1, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	4a93      	ldr	r2, [pc, #588]	; (800ac70 <UART_SetConfig+0x2bc>)
 800aa22:	4013      	ands	r3, r2
 800aa24:	0019      	movs	r1, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a8f      	ldr	r2, [pc, #572]	; (800ac74 <UART_SetConfig+0x2c0>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d127      	bne.n	800aa8a <UART_SetConfig+0xd6>
 800aa3a:	4b8f      	ldr	r3, [pc, #572]	; (800ac78 <UART_SetConfig+0x2c4>)
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	2203      	movs	r2, #3
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d00d      	beq.n	800aa62 <UART_SetConfig+0xae>
 800aa46:	d81b      	bhi.n	800aa80 <UART_SetConfig+0xcc>
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d014      	beq.n	800aa76 <UART_SetConfig+0xc2>
 800aa4c:	d818      	bhi.n	800aa80 <UART_SetConfig+0xcc>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <UART_SetConfig+0xa4>
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d00a      	beq.n	800aa6c <UART_SetConfig+0xb8>
 800aa56:	e013      	b.n	800aa80 <UART_SetConfig+0xcc>
 800aa58:	231f      	movs	r3, #31
 800aa5a:	18fb      	adds	r3, r7, r3
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	e049      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aa62:	231f      	movs	r3, #31
 800aa64:	18fb      	adds	r3, r7, r3
 800aa66:	2202      	movs	r2, #2
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	e044      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aa6c:	231f      	movs	r3, #31
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	2204      	movs	r2, #4
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	e03f      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aa76:	231f      	movs	r3, #31
 800aa78:	18fb      	adds	r3, r7, r3
 800aa7a:	2208      	movs	r2, #8
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e03a      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aa80:	231f      	movs	r3, #31
 800aa82:	18fb      	adds	r3, r7, r3
 800aa84:	2210      	movs	r2, #16
 800aa86:	701a      	strb	r2, [r3, #0]
 800aa88:	e035      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a7b      	ldr	r2, [pc, #492]	; (800ac7c <UART_SetConfig+0x2c8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d104      	bne.n	800aa9e <UART_SetConfig+0xea>
 800aa94:	231f      	movs	r3, #31
 800aa96:	18fb      	adds	r3, r7, r3
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	e02b      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a77      	ldr	r2, [pc, #476]	; (800ac80 <UART_SetConfig+0x2cc>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d104      	bne.n	800aab2 <UART_SetConfig+0xfe>
 800aaa8:	231f      	movs	r3, #31
 800aaaa:	18fb      	adds	r3, r7, r3
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e021      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a73      	ldr	r2, [pc, #460]	; (800ac84 <UART_SetConfig+0x2d0>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d104      	bne.n	800aac6 <UART_SetConfig+0x112>
 800aabc:	231f      	movs	r3, #31
 800aabe:	18fb      	adds	r3, r7, r3
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
 800aac4:	e017      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a6f      	ldr	r2, [pc, #444]	; (800ac88 <UART_SetConfig+0x2d4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d104      	bne.n	800aada <UART_SetConfig+0x126>
 800aad0:	231f      	movs	r3, #31
 800aad2:	18fb      	adds	r3, r7, r3
 800aad4:	2200      	movs	r2, #0
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	e00d      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a6b      	ldr	r2, [pc, #428]	; (800ac8c <UART_SetConfig+0x2d8>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d104      	bne.n	800aaee <UART_SetConfig+0x13a>
 800aae4:	231f      	movs	r3, #31
 800aae6:	18fb      	adds	r3, r7, r3
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]
 800aaec:	e003      	b.n	800aaf6 <UART_SetConfig+0x142>
 800aaee:	231f      	movs	r3, #31
 800aaf0:	18fb      	adds	r3, r7, r3
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69da      	ldr	r2, [r3, #28]
 800aafa:	2380      	movs	r3, #128	; 0x80
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d15c      	bne.n	800abbc <UART_SetConfig+0x208>
  {
    switch (clocksource)
 800ab02:	231f      	movs	r3, #31
 800ab04:	18fb      	adds	r3, r7, r3
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d015      	beq.n	800ab38 <UART_SetConfig+0x184>
 800ab0c:	dc18      	bgt.n	800ab40 <UART_SetConfig+0x18c>
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d00d      	beq.n	800ab2e <UART_SetConfig+0x17a>
 800ab12:	dc15      	bgt.n	800ab40 <UART_SetConfig+0x18c>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <UART_SetConfig+0x16a>
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d005      	beq.n	800ab28 <UART_SetConfig+0x174>
 800ab1c:	e010      	b.n	800ab40 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab1e:	f7fe fbc1 	bl	80092a4 <HAL_RCC_GetPCLK1Freq>
 800ab22:	0003      	movs	r3, r0
 800ab24:	61bb      	str	r3, [r7, #24]
        break;
 800ab26:	e012      	b.n	800ab4e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab28:	4b59      	ldr	r3, [pc, #356]	; (800ac90 <UART_SetConfig+0x2dc>)
 800ab2a:	61bb      	str	r3, [r7, #24]
        break;
 800ab2c:	e00f      	b.n	800ab4e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab2e:	f7fe fb57 	bl	80091e0 <HAL_RCC_GetSysClockFreq>
 800ab32:	0003      	movs	r3, r0
 800ab34:	61bb      	str	r3, [r7, #24]
        break;
 800ab36:	e00a      	b.n	800ab4e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab38:	2380      	movs	r3, #128	; 0x80
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	61bb      	str	r3, [r7, #24]
        break;
 800ab3e:	e006      	b.n	800ab4e <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab44:	231e      	movs	r3, #30
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	2201      	movs	r2, #1
 800ab4a:	701a      	strb	r2, [r3, #0]
        break;
 800ab4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d100      	bne.n	800ab56 <UART_SetConfig+0x1a2>
 800ab54:	e07a      	b.n	800ac4c <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	005a      	lsls	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	085b      	lsrs	r3, r3, #1
 800ab60:	18d2      	adds	r2, r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	0019      	movs	r1, r3
 800ab68:	0010      	movs	r0, r2
 800ab6a:	f7f5 fadd 	bl	8000128 <__udivsi3>
 800ab6e:	0003      	movs	r3, r0
 800ab70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	2b0f      	cmp	r3, #15
 800ab76:	d91c      	bls.n	800abb2 <UART_SetConfig+0x1fe>
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	2380      	movs	r3, #128	; 0x80
 800ab7c:	025b      	lsls	r3, r3, #9
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d217      	bcs.n	800abb2 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	200e      	movs	r0, #14
 800ab88:	183b      	adds	r3, r7, r0
 800ab8a:	210f      	movs	r1, #15
 800ab8c:	438a      	bics	r2, r1
 800ab8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	085b      	lsrs	r3, r3, #1
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	2207      	movs	r2, #7
 800ab98:	4013      	ands	r3, r2
 800ab9a:	b299      	uxth	r1, r3
 800ab9c:	183b      	adds	r3, r7, r0
 800ab9e:	183a      	adds	r2, r7, r0
 800aba0:	8812      	ldrh	r2, [r2, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	183a      	adds	r2, r7, r0
 800abac:	8812      	ldrh	r2, [r2, #0]
 800abae:	60da      	str	r2, [r3, #12]
 800abb0:	e04c      	b.n	800ac4c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 800abb2:	231e      	movs	r3, #30
 800abb4:	18fb      	adds	r3, r7, r3
 800abb6:	2201      	movs	r2, #1
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e047      	b.n	800ac4c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abbc:	231f      	movs	r3, #31
 800abbe:	18fb      	adds	r3, r7, r3
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b08      	cmp	r3, #8
 800abc4:	d015      	beq.n	800abf2 <UART_SetConfig+0x23e>
 800abc6:	dc18      	bgt.n	800abfa <UART_SetConfig+0x246>
 800abc8:	2b04      	cmp	r3, #4
 800abca:	d00d      	beq.n	800abe8 <UART_SetConfig+0x234>
 800abcc:	dc15      	bgt.n	800abfa <UART_SetConfig+0x246>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <UART_SetConfig+0x224>
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d005      	beq.n	800abe2 <UART_SetConfig+0x22e>
 800abd6:	e010      	b.n	800abfa <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abd8:	f7fe fb64 	bl	80092a4 <HAL_RCC_GetPCLK1Freq>
 800abdc:	0003      	movs	r3, r0
 800abde:	61bb      	str	r3, [r7, #24]
        break;
 800abe0:	e012      	b.n	800ac08 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abe2:	4b2b      	ldr	r3, [pc, #172]	; (800ac90 <UART_SetConfig+0x2dc>)
 800abe4:	61bb      	str	r3, [r7, #24]
        break;
 800abe6:	e00f      	b.n	800ac08 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abe8:	f7fe fafa 	bl	80091e0 <HAL_RCC_GetSysClockFreq>
 800abec:	0003      	movs	r3, r0
 800abee:	61bb      	str	r3, [r7, #24]
        break;
 800abf0:	e00a      	b.n	800ac08 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abf2:	2380      	movs	r3, #128	; 0x80
 800abf4:	021b      	lsls	r3, r3, #8
 800abf6:	61bb      	str	r3, [r7, #24]
        break;
 800abf8:	e006      	b.n	800ac08 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800abfe:	231e      	movs	r3, #30
 800ac00:	18fb      	adds	r3, r7, r3
 800ac02:	2201      	movs	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]
        break;
 800ac06:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d01e      	beq.n	800ac4c <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	085a      	lsrs	r2, r3, #1
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	18d2      	adds	r2, r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	0019      	movs	r1, r3
 800ac1e:	0010      	movs	r0, r2
 800ac20:	f7f5 fa82 	bl	8000128 <__udivsi3>
 800ac24:	0003      	movs	r3, r0
 800ac26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2b0f      	cmp	r3, #15
 800ac2c:	d90a      	bls.n	800ac44 <UART_SetConfig+0x290>
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	2380      	movs	r3, #128	; 0x80
 800ac32:	025b      	lsls	r3, r3, #9
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d205      	bcs.n	800ac44 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	e003      	b.n	800ac4c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 800ac44:	231e      	movs	r3, #30
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	2201      	movs	r2, #1
 800ac4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ac58:	231e      	movs	r3, #30
 800ac5a:	18fb      	adds	r3, r7, r3
 800ac5c:	781b      	ldrb	r3, [r3, #0]
}
 800ac5e:	0018      	movs	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	b008      	add	sp, #32
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	efff69f3 	.word	0xefff69f3
 800ac6c:	ffffcfff 	.word	0xffffcfff
 800ac70:	fffff4ff 	.word	0xfffff4ff
 800ac74:	40013800 	.word	0x40013800
 800ac78:	40021000 	.word	0x40021000
 800ac7c:	40004400 	.word	0x40004400
 800ac80:	40004800 	.word	0x40004800
 800ac84:	40004c00 	.word	0x40004c00
 800ac88:	40005000 	.word	0x40005000
 800ac8c:	40011400 	.word	0x40011400
 800ac90:	007a1200 	.word	0x007a1200

0800ac94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2201      	movs	r2, #1
 800aca2:	4013      	ands	r3, r2
 800aca4:	d00b      	beq.n	800acbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4a4a      	ldr	r2, [pc, #296]	; (800add8 <UART_AdvFeatureConfig+0x144>)
 800acae:	4013      	ands	r3, r2
 800acb0:	0019      	movs	r1, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	2202      	movs	r2, #2
 800acc4:	4013      	ands	r3, r2
 800acc6:	d00b      	beq.n	800ace0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	4a43      	ldr	r2, [pc, #268]	; (800addc <UART_AdvFeatureConfig+0x148>)
 800acd0:	4013      	ands	r3, r2
 800acd2:	0019      	movs	r1, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace4:	2204      	movs	r2, #4
 800ace6:	4013      	ands	r3, r2
 800ace8:	d00b      	beq.n	800ad02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4a3b      	ldr	r2, [pc, #236]	; (800ade0 <UART_AdvFeatureConfig+0x14c>)
 800acf2:	4013      	ands	r3, r2
 800acf4:	0019      	movs	r1, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	2208      	movs	r2, #8
 800ad08:	4013      	ands	r3, r2
 800ad0a:	d00b      	beq.n	800ad24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	4a34      	ldr	r2, [pc, #208]	; (800ade4 <UART_AdvFeatureConfig+0x150>)
 800ad14:	4013      	ands	r3, r2
 800ad16:	0019      	movs	r1, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	2210      	movs	r2, #16
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	d00b      	beq.n	800ad46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4a2c      	ldr	r2, [pc, #176]	; (800ade8 <UART_AdvFeatureConfig+0x154>)
 800ad36:	4013      	ands	r3, r2
 800ad38:	0019      	movs	r1, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d00b      	beq.n	800ad68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	4a25      	ldr	r2, [pc, #148]	; (800adec <UART_AdvFeatureConfig+0x158>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	0019      	movs	r1, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2240      	movs	r2, #64	; 0x40
 800ad6e:	4013      	ands	r3, r2
 800ad70:	d01d      	beq.n	800adae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	4a1d      	ldr	r2, [pc, #116]	; (800adf0 <UART_AdvFeatureConfig+0x15c>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	0019      	movs	r1, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad8e:	2380      	movs	r3, #128	; 0x80
 800ad90:	035b      	lsls	r3, r3, #13
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d10b      	bne.n	800adae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a15      	ldr	r2, [pc, #84]	; (800adf4 <UART_AdvFeatureConfig+0x160>)
 800ad9e:	4013      	ands	r3, r2
 800ada0:	0019      	movs	r1, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	430a      	orrs	r2, r1
 800adac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	2280      	movs	r2, #128	; 0x80
 800adb4:	4013      	ands	r3, r2
 800adb6:	d00b      	beq.n	800add0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	4a0e      	ldr	r2, [pc, #56]	; (800adf8 <UART_AdvFeatureConfig+0x164>)
 800adc0:	4013      	ands	r3, r2
 800adc2:	0019      	movs	r1, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	605a      	str	r2, [r3, #4]
  }
}
 800add0:	46c0      	nop			; (mov r8, r8)
 800add2:	46bd      	mov	sp, r7
 800add4:	b002      	add	sp, #8
 800add6:	bd80      	pop	{r7, pc}
 800add8:	fffdffff 	.word	0xfffdffff
 800addc:	fffeffff 	.word	0xfffeffff
 800ade0:	fffbffff 	.word	0xfffbffff
 800ade4:	ffff7fff 	.word	0xffff7fff
 800ade8:	ffffefff 	.word	0xffffefff
 800adec:	ffffdfff 	.word	0xffffdfff
 800adf0:	ffefffff 	.word	0xffefffff
 800adf4:	ff9fffff 	.word	0xff9fffff
 800adf8:	fff7ffff 	.word	0xfff7ffff

0800adfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b092      	sub	sp, #72	; 0x48
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2284      	movs	r2, #132	; 0x84
 800ae08:	2100      	movs	r1, #0
 800ae0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae0c:	f7fc fb38 	bl	8007480 <HAL_GetTick>
 800ae10:	0003      	movs	r3, r0
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2208      	movs	r2, #8
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d12c      	bne.n	800ae7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	2280      	movs	r2, #128	; 0x80
 800ae26:	0391      	lsls	r1, r2, #14
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	4a46      	ldr	r2, [pc, #280]	; (800af44 <UART_CheckIdleState+0x148>)
 800ae2c:	9200      	str	r2, [sp, #0]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f000 f88c 	bl	800af4c <UART_WaitOnFlagUntilTimeout>
 800ae34:	1e03      	subs	r3, r0, #0
 800ae36:	d021      	beq.n	800ae7c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae38:	f3ef 8310 	mrs	r3, PRIMASK
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ae40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae42:	2301      	movs	r3, #1
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	f383 8810 	msr	PRIMASK, r3
}
 800ae4c:	46c0      	nop			; (mov r8, r8)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2180      	movs	r1, #128	; 0x80
 800ae5a:	438a      	bics	r2, r1
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	f383 8810 	msr	PRIMASK, r3
}
 800ae68:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2278      	movs	r2, #120	; 0x78
 800ae74:	2100      	movs	r1, #0
 800ae76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e05f      	b.n	800af3c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2204      	movs	r2, #4
 800ae84:	4013      	ands	r3, r2
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d146      	bne.n	800af18 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8c:	2280      	movs	r2, #128	; 0x80
 800ae8e:	03d1      	lsls	r1, r2, #15
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	4a2c      	ldr	r2, [pc, #176]	; (800af44 <UART_CheckIdleState+0x148>)
 800ae94:	9200      	str	r2, [sp, #0]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f000 f858 	bl	800af4c <UART_WaitOnFlagUntilTimeout>
 800ae9c:	1e03      	subs	r3, r0, #0
 800ae9e:	d03b      	beq.n	800af18 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aea0:	f3ef 8310 	mrs	r3, PRIMASK
 800aea4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aea8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeaa:	2301      	movs	r3, #1
 800aeac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f383 8810 	msr	PRIMASK, r3
}
 800aeb4:	46c0      	nop			; (mov r8, r8)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4921      	ldr	r1, [pc, #132]	; (800af48 <UART_CheckIdleState+0x14c>)
 800aec2:	400a      	ands	r2, r1
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f383 8810 	msr	PRIMASK, r3
}
 800aed0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aed2:	f3ef 8310 	mrs	r3, PRIMASK
 800aed6:	61bb      	str	r3, [r7, #24]
  return(result);
 800aed8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeda:	633b      	str	r3, [r7, #48]	; 0x30
 800aedc:	2301      	movs	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	f383 8810 	msr	PRIMASK, r3
}
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2101      	movs	r1, #1
 800aef4:	438a      	bics	r2, r1
 800aef6:	609a      	str	r2, [r3, #8]
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	f383 8810 	msr	PRIMASK, r3
}
 800af02:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2280      	movs	r2, #128	; 0x80
 800af08:	2120      	movs	r1, #32
 800af0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2278      	movs	r2, #120	; 0x78
 800af10:	2100      	movs	r1, #0
 800af12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e011      	b.n	800af3c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2220      	movs	r2, #32
 800af1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2280      	movs	r2, #128	; 0x80
 800af22:	2120      	movs	r1, #32
 800af24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2278      	movs	r2, #120	; 0x78
 800af36:	2100      	movs	r1, #0
 800af38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	0018      	movs	r0, r3
 800af3e:	46bd      	mov	sp, r7
 800af40:	b010      	add	sp, #64	; 0x40
 800af42:	bd80      	pop	{r7, pc}
 800af44:	01ffffff 	.word	0x01ffffff
 800af48:	fffffedf 	.word	0xfffffedf

0800af4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	1dfb      	adds	r3, r7, #7
 800af5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af5c:	e04b      	b.n	800aff6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	3301      	adds	r3, #1
 800af62:	d048      	beq.n	800aff6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af64:	f7fc fa8c 	bl	8007480 <HAL_GetTick>
 800af68:	0002      	movs	r2, r0
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	429a      	cmp	r2, r3
 800af72:	d302      	bcc.n	800af7a <UART_WaitOnFlagUntilTimeout+0x2e>
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e04b      	b.n	800b016 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2204      	movs	r2, #4
 800af86:	4013      	ands	r3, r2
 800af88:	d035      	beq.n	800aff6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	2208      	movs	r2, #8
 800af92:	4013      	ands	r3, r2
 800af94:	2b08      	cmp	r3, #8
 800af96:	d111      	bne.n	800afbc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2208      	movs	r2, #8
 800af9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	0018      	movs	r0, r3
 800afa4:	f000 f906 	bl	800b1b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2284      	movs	r2, #132	; 0x84
 800afac:	2108      	movs	r1, #8
 800afae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2278      	movs	r2, #120	; 0x78
 800afb4:	2100      	movs	r1, #0
 800afb6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e02c      	b.n	800b016 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	69da      	ldr	r2, [r3, #28]
 800afc2:	2380      	movs	r3, #128	; 0x80
 800afc4:	011b      	lsls	r3, r3, #4
 800afc6:	401a      	ands	r2, r3
 800afc8:	2380      	movs	r3, #128	; 0x80
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	429a      	cmp	r2, r3
 800afce:	d112      	bne.n	800aff6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2280      	movs	r2, #128	; 0x80
 800afd6:	0112      	lsls	r2, r2, #4
 800afd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	0018      	movs	r0, r3
 800afde:	f000 f8e9 	bl	800b1b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2284      	movs	r2, #132	; 0x84
 800afe6:	2120      	movs	r1, #32
 800afe8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2278      	movs	r2, #120	; 0x78
 800afee:	2100      	movs	r1, #0
 800aff0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e00f      	b.n	800b016 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	4013      	ands	r3, r2
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	425a      	negs	r2, r3
 800b006:	4153      	adcs	r3, r2
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	001a      	movs	r2, r3
 800b00c:	1dfb      	adds	r3, r7, #7
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d0a4      	beq.n	800af5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	0018      	movs	r0, r3
 800b018:	46bd      	mov	sp, r7
 800b01a:	b004      	add	sp, #16
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b090      	sub	sp, #64	; 0x40
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	1dbb      	adds	r3, r7, #6
 800b02c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	1dba      	adds	r2, r7, #6
 800b038:	2158      	movs	r1, #88	; 0x58
 800b03a:	8812      	ldrh	r2, [r2, #0]
 800b03c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1dba      	adds	r2, r7, #6
 800b042:	215a      	movs	r1, #90	; 0x5a
 800b044:	8812      	ldrh	r2, [r2, #0]
 800b046:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	2380      	movs	r3, #128	; 0x80
 800b054:	015b      	lsls	r3, r3, #5
 800b056:	429a      	cmp	r2, r3
 800b058:	d10d      	bne.n	800b076 <UART_Start_Receive_IT+0x56>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <UART_Start_Receive_IT+0x4c>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	225c      	movs	r2, #92	; 0x5c
 800b066:	4950      	ldr	r1, [pc, #320]	; (800b1a8 <UART_Start_Receive_IT+0x188>)
 800b068:	5299      	strh	r1, [r3, r2]
 800b06a:	e02e      	b.n	800b0ca <UART_Start_Receive_IT+0xaa>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	225c      	movs	r2, #92	; 0x5c
 800b070:	21ff      	movs	r1, #255	; 0xff
 800b072:	5299      	strh	r1, [r3, r2]
 800b074:	e029      	b.n	800b0ca <UART_Start_Receive_IT+0xaa>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10d      	bne.n	800b09a <UART_Start_Receive_IT+0x7a>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d104      	bne.n	800b090 <UART_Start_Receive_IT+0x70>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	225c      	movs	r2, #92	; 0x5c
 800b08a:	21ff      	movs	r1, #255	; 0xff
 800b08c:	5299      	strh	r1, [r3, r2]
 800b08e:	e01c      	b.n	800b0ca <UART_Start_Receive_IT+0xaa>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	225c      	movs	r2, #92	; 0x5c
 800b094:	217f      	movs	r1, #127	; 0x7f
 800b096:	5299      	strh	r1, [r3, r2]
 800b098:	e017      	b.n	800b0ca <UART_Start_Receive_IT+0xaa>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	2380      	movs	r3, #128	; 0x80
 800b0a0:	055b      	lsls	r3, r3, #21
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d10d      	bne.n	800b0c2 <UART_Start_Receive_IT+0xa2>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <UART_Start_Receive_IT+0x98>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	225c      	movs	r2, #92	; 0x5c
 800b0b2:	217f      	movs	r1, #127	; 0x7f
 800b0b4:	5299      	strh	r1, [r3, r2]
 800b0b6:	e008      	b.n	800b0ca <UART_Start_Receive_IT+0xaa>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	225c      	movs	r2, #92	; 0x5c
 800b0bc:	213f      	movs	r1, #63	; 0x3f
 800b0be:	5299      	strh	r1, [r3, r2]
 800b0c0:	e003      	b.n	800b0ca <UART_Start_Receive_IT+0xaa>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	225c      	movs	r2, #92	; 0x5c
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2284      	movs	r2, #132	; 0x84
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2280      	movs	r2, #128	; 0x80
 800b0d6:	2122      	movs	r1, #34	; 0x22
 800b0d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0da:	f3ef 8310 	mrs	r3, PRIMASK
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	f383 8810 	msr	PRIMASK, r3
}
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689a      	ldr	r2, [r3, #8]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	609a      	str	r2, [r3, #8]
 800b100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b102:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	f383 8810 	msr	PRIMASK, r3
}
 800b10a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	689a      	ldr	r2, [r3, #8]
 800b110:	2380      	movs	r3, #128	; 0x80
 800b112:	015b      	lsls	r3, r3, #5
 800b114:	429a      	cmp	r2, r3
 800b116:	d107      	bne.n	800b128 <UART_Start_Receive_IT+0x108>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d103      	bne.n	800b128 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4a22      	ldr	r2, [pc, #136]	; (800b1ac <UART_Start_Receive_IT+0x18c>)
 800b124:	669a      	str	r2, [r3, #104]	; 0x68
 800b126:	e002      	b.n	800b12e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4a21      	ldr	r2, [pc, #132]	; (800b1b0 <UART_Start_Receive_IT+0x190>)
 800b12c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d019      	beq.n	800b16a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b136:	f3ef 8310 	mrs	r3, PRIMASK
 800b13a:	61fb      	str	r3, [r7, #28]
  return(result);
 800b13c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b13e:	637b      	str	r3, [r7, #52]	; 0x34
 800b140:	2301      	movs	r3, #1
 800b142:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	f383 8810 	msr	PRIMASK, r3
}
 800b14a:	46c0      	nop			; (mov r8, r8)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2190      	movs	r1, #144	; 0x90
 800b158:	0049      	lsls	r1, r1, #1
 800b15a:	430a      	orrs	r2, r1
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b160:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	f383 8810 	msr	PRIMASK, r3
}
 800b168:	e018      	b.n	800b19c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b16a:	f3ef 8310 	mrs	r3, PRIMASK
 800b16e:	613b      	str	r3, [r7, #16]
  return(result);
 800b170:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b172:	63bb      	str	r3, [r7, #56]	; 0x38
 800b174:	2301      	movs	r3, #1
 800b176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f383 8810 	msr	PRIMASK, r3
}
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2120      	movs	r1, #32
 800b18c:	430a      	orrs	r2, r1
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	f383 8810 	msr	PRIMASK, r3
}
 800b19a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	0018      	movs	r0, r3
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	b010      	add	sp, #64	; 0x40
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	000001ff 	.word	0x000001ff
 800b1ac:	0800b4b9 	.word	0x0800b4b9
 800b1b0:	0800b301 	.word	0x0800b301

0800b1b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08e      	sub	sp, #56	; 0x38
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c0:	617b      	str	r3, [r7, #20]
  return(result);
 800b1c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	f383 8810 	msr	PRIMASK, r3
}
 800b1d0:	46c0      	nop			; (mov r8, r8)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4926      	ldr	r1, [pc, #152]	; (800b278 <UART_EndRxTransfer+0xc4>)
 800b1de:	400a      	ands	r2, r1
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	f383 8810 	msr	PRIMASK, r3
}
 800b1ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f2:	623b      	str	r3, [r7, #32]
  return(result);
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f6:	633b      	str	r3, [r7, #48]	; 0x30
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	f383 8810 	msr	PRIMASK, r3
}
 800b202:	46c0      	nop			; (mov r8, r8)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689a      	ldr	r2, [r3, #8]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2101      	movs	r1, #1
 800b210:	438a      	bics	r2, r1
 800b212:	609a      	str	r2, [r3, #8]
 800b214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	f383 8810 	msr	PRIMASK, r3
}
 800b21e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b224:	2b01      	cmp	r3, #1
 800b226:	d118      	bne.n	800b25a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b228:	f3ef 8310 	mrs	r3, PRIMASK
 800b22c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b22e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b230:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b232:	2301      	movs	r3, #1
 800b234:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f383 8810 	msr	PRIMASK, r3
}
 800b23c:	46c0      	nop			; (mov r8, r8)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2110      	movs	r1, #16
 800b24a:	438a      	bics	r2, r1
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f383 8810 	msr	PRIMASK, r3
}
 800b258:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2280      	movs	r2, #128	; 0x80
 800b25e:	2120      	movs	r1, #32
 800b260:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b26e:	46c0      	nop			; (mov r8, r8)
 800b270:	46bd      	mov	sp, r7
 800b272:	b00e      	add	sp, #56	; 0x38
 800b274:	bd80      	pop	{r7, pc}
 800b276:	46c0      	nop			; (mov r8, r8)
 800b278:	fffffedf 	.word	0xfffffedf

0800b27c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	225a      	movs	r2, #90	; 0x5a
 800b28e:	2100      	movs	r1, #0
 800b290:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2252      	movs	r2, #82	; 0x52
 800b296:	2100      	movs	r1, #0
 800b298:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	0018      	movs	r0, r3
 800b29e:	f7ff fb75 	bl	800a98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2a2:	46c0      	nop			; (mov r8, r8)
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	b004      	add	sp, #16
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b086      	sub	sp, #24
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	2301      	movs	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f383 8810 	msr	PRIMASK, r3
}
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2140      	movs	r1, #64	; 0x40
 800b2d4:	438a      	bics	r2, r1
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	f383 8810 	msr	PRIMASK, r3
}
 800b2e2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f7ff fb42 	bl	800a97c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2f8:	46c0      	nop			; (mov r8, r8)
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	b006      	add	sp, #24
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b094      	sub	sp, #80	; 0x50
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b308:	204e      	movs	r0, #78	; 0x4e
 800b30a:	183b      	adds	r3, r7, r0
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	215c      	movs	r1, #92	; 0x5c
 800b310:	5a52      	ldrh	r2, [r2, r1]
 800b312:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2280      	movs	r2, #128	; 0x80
 800b318:	589b      	ldr	r3, [r3, r2]
 800b31a:	2b22      	cmp	r3, #34	; 0x22
 800b31c:	d000      	beq.n	800b320 <UART_RxISR_8BIT+0x20>
 800b31e:	e0ba      	b.n	800b496 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	214c      	movs	r1, #76	; 0x4c
 800b326:	187b      	adds	r3, r7, r1
 800b328:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800b32a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b32c:	187b      	adds	r3, r7, r1
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	b2da      	uxtb	r2, r3
 800b332:	183b      	adds	r3, r7, r0
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	b2d9      	uxtb	r1, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33c:	400a      	ands	r2, r1
 800b33e:	b2d2      	uxtb	r2, r2
 800b340:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	225a      	movs	r2, #90	; 0x5a
 800b350:	5a9b      	ldrh	r3, [r3, r2]
 800b352:	b29b      	uxth	r3, r3
 800b354:	3b01      	subs	r3, #1
 800b356:	b299      	uxth	r1, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	225a      	movs	r2, #90	; 0x5a
 800b35c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	225a      	movs	r2, #90	; 0x5a
 800b362:	5a9b      	ldrh	r3, [r3, r2]
 800b364:	b29b      	uxth	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d000      	beq.n	800b36c <UART_RxISR_8BIT+0x6c>
 800b36a:	e09c      	b.n	800b4a6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b36c:	f3ef 8310 	mrs	r3, PRIMASK
 800b370:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b374:	64bb      	str	r3, [r7, #72]	; 0x48
 800b376:	2301      	movs	r3, #1
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37c:	f383 8810 	msr	PRIMASK, r3
}
 800b380:	46c0      	nop			; (mov r8, r8)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4948      	ldr	r1, [pc, #288]	; (800b4b0 <UART_RxISR_8BIT+0x1b0>)
 800b38e:	400a      	ands	r2, r1
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b394:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	f383 8810 	msr	PRIMASK, r3
}
 800b39c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b39e:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	f383 8810 	msr	PRIMASK, r3
}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2101      	movs	r1, #1
 800b3c0:	438a      	bics	r2, r1
 800b3c2:	609a      	str	r2, [r3, #8]
 800b3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	f383 8810 	msr	PRIMASK, r3
}
 800b3ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2280      	movs	r2, #128	; 0x80
 800b3d4:	2120      	movs	r1, #32
 800b3d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	2380      	movs	r3, #128	; 0x80
 800b3ec:	041b      	lsls	r3, r3, #16
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	d018      	beq.n	800b424 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3f6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3f8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3fa:	643b      	str	r3, [r7, #64]	; 0x40
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	f383 8810 	msr	PRIMASK, r3
}
 800b406:	46c0      	nop			; (mov r8, r8)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4928      	ldr	r1, [pc, #160]	; (800b4b4 <UART_RxISR_8BIT+0x1b4>)
 800b414:	400a      	ands	r2, r1
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b41a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	f383 8810 	msr	PRIMASK, r3
}
 800b422:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d12f      	bne.n	800b48c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b432:	f3ef 8310 	mrs	r3, PRIMASK
 800b436:	60fb      	str	r3, [r7, #12]
  return(result);
 800b438:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b43c:	2301      	movs	r3, #1
 800b43e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f383 8810 	msr	PRIMASK, r3
}
 800b446:	46c0      	nop			; (mov r8, r8)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2110      	movs	r1, #16
 800b454:	438a      	bics	r2, r1
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	f383 8810 	msr	PRIMASK, r3
}
 800b462:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	2210      	movs	r2, #16
 800b46c:	4013      	ands	r3, r2
 800b46e:	2b10      	cmp	r3, #16
 800b470:	d103      	bne.n	800b47a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2210      	movs	r2, #16
 800b478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2258      	movs	r2, #88	; 0x58
 800b47e:	5a9a      	ldrh	r2, [r3, r2]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	0011      	movs	r1, r2
 800b484:	0018      	movs	r0, r3
 800b486:	f7ff fa89 	bl	800a99c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b48a:	e00c      	b.n	800b4a6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	0018      	movs	r0, r3
 800b490:	f7fa fb60 	bl	8005b54 <HAL_UART_RxCpltCallback>
}
 800b494:	e007      	b.n	800b4a6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	699a      	ldr	r2, [r3, #24]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2108      	movs	r1, #8
 800b4a2:	430a      	orrs	r2, r1
 800b4a4:	619a      	str	r2, [r3, #24]
}
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	b014      	add	sp, #80	; 0x50
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	46c0      	nop			; (mov r8, r8)
 800b4b0:	fffffedf 	.word	0xfffffedf
 800b4b4:	fbffffff 	.word	0xfbffffff

0800b4b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b094      	sub	sp, #80	; 0x50
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b4c0:	204e      	movs	r0, #78	; 0x4e
 800b4c2:	183b      	adds	r3, r7, r0
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	215c      	movs	r1, #92	; 0x5c
 800b4c8:	5a52      	ldrh	r2, [r2, r1]
 800b4ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2280      	movs	r2, #128	; 0x80
 800b4d0:	589b      	ldr	r3, [r3, r2]
 800b4d2:	2b22      	cmp	r3, #34	; 0x22
 800b4d4:	d000      	beq.n	800b4d8 <UART_RxISR_16BIT+0x20>
 800b4d6:	e0ba      	b.n	800b64e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	214c      	movs	r1, #76	; 0x4c
 800b4de:	187b      	adds	r3, r7, r1
 800b4e0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800b4e2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800b4ea:	187b      	adds	r3, r7, r1
 800b4ec:	183a      	adds	r2, r7, r0
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	8812      	ldrh	r2, [r2, #0]
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4fe:	1c9a      	adds	r2, r3, #2
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	225a      	movs	r2, #90	; 0x5a
 800b508:	5a9b      	ldrh	r3, [r3, r2]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	3b01      	subs	r3, #1
 800b50e:	b299      	uxth	r1, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	225a      	movs	r2, #90	; 0x5a
 800b514:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	225a      	movs	r2, #90	; 0x5a
 800b51a:	5a9b      	ldrh	r3, [r3, r2]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d000      	beq.n	800b524 <UART_RxISR_16BIT+0x6c>
 800b522:	e09c      	b.n	800b65e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b524:	f3ef 8310 	mrs	r3, PRIMASK
 800b528:	623b      	str	r3, [r7, #32]
  return(result);
 800b52a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b52c:	647b      	str	r3, [r7, #68]	; 0x44
 800b52e:	2301      	movs	r3, #1
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	f383 8810 	msr	PRIMASK, r3
}
 800b538:	46c0      	nop			; (mov r8, r8)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4948      	ldr	r1, [pc, #288]	; (800b668 <UART_RxISR_16BIT+0x1b0>)
 800b546:	400a      	ands	r2, r1
 800b548:	601a      	str	r2, [r3, #0]
 800b54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	f383 8810 	msr	PRIMASK, r3
}
 800b554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b556:	f3ef 8310 	mrs	r3, PRIMASK
 800b55a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b55e:	643b      	str	r3, [r7, #64]	; 0x40
 800b560:	2301      	movs	r3, #1
 800b562:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	f383 8810 	msr	PRIMASK, r3
}
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2101      	movs	r1, #1
 800b578:	438a      	bics	r2, r1
 800b57a:	609a      	str	r2, [r3, #8]
 800b57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b582:	f383 8810 	msr	PRIMASK, r3
}
 800b586:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2280      	movs	r2, #128	; 0x80
 800b58c:	2120      	movs	r1, #32
 800b58e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	2380      	movs	r3, #128	; 0x80
 800b5a4:	041b      	lsls	r3, r3, #16
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	d018      	beq.n	800b5dc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ae:	617b      	str	r3, [r7, #20]
  return(result);
 800b5b0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	f383 8810 	msr	PRIMASK, r3
}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4928      	ldr	r1, [pc, #160]	; (800b66c <UART_RxISR_16BIT+0x1b4>)
 800b5cc:	400a      	ands	r2, r1
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f383 8810 	msr	PRIMASK, r3
}
 800b5da:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d12f      	bne.n	800b644 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5f0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f383 8810 	msr	PRIMASK, r3
}
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2110      	movs	r1, #16
 800b60c:	438a      	bics	r2, r1
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f383 8810 	msr	PRIMASK, r3
}
 800b61a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	2210      	movs	r2, #16
 800b624:	4013      	ands	r3, r2
 800b626:	2b10      	cmp	r3, #16
 800b628:	d103      	bne.n	800b632 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2210      	movs	r2, #16
 800b630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2258      	movs	r2, #88	; 0x58
 800b636:	5a9a      	ldrh	r2, [r3, r2]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	0011      	movs	r1, r2
 800b63c:	0018      	movs	r0, r3
 800b63e:	f7ff f9ad 	bl	800a99c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b642:	e00c      	b.n	800b65e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	0018      	movs	r0, r3
 800b648:	f7fa fa84 	bl	8005b54 <HAL_UART_RxCpltCallback>
}
 800b64c:	e007      	b.n	800b65e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	699a      	ldr	r2, [r3, #24]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2108      	movs	r1, #8
 800b65a:	430a      	orrs	r2, r1
 800b65c:	619a      	str	r2, [r3, #24]
}
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	46bd      	mov	sp, r7
 800b662:	b014      	add	sp, #80	; 0x50
 800b664:	bd80      	pop	{r7, pc}
 800b666:	46c0      	nop			; (mov r8, r8)
 800b668:	fffffedf 	.word	0xfffffedf
 800b66c:	fbffffff 	.word	0xfbffffff

0800b670 <__errno>:
 800b670:	4b01      	ldr	r3, [pc, #4]	; (800b678 <__errno+0x8>)
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	4770      	bx	lr
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	200000a0 	.word	0x200000a0

0800b67c <__libc_init_array>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	2600      	movs	r6, #0
 800b680:	4d0c      	ldr	r5, [pc, #48]	; (800b6b4 <__libc_init_array+0x38>)
 800b682:	4c0d      	ldr	r4, [pc, #52]	; (800b6b8 <__libc_init_array+0x3c>)
 800b684:	1b64      	subs	r4, r4, r5
 800b686:	10a4      	asrs	r4, r4, #2
 800b688:	42a6      	cmp	r6, r4
 800b68a:	d109      	bne.n	800b6a0 <__libc_init_array+0x24>
 800b68c:	2600      	movs	r6, #0
 800b68e:	f000 fc47 	bl	800bf20 <_init>
 800b692:	4d0a      	ldr	r5, [pc, #40]	; (800b6bc <__libc_init_array+0x40>)
 800b694:	4c0a      	ldr	r4, [pc, #40]	; (800b6c0 <__libc_init_array+0x44>)
 800b696:	1b64      	subs	r4, r4, r5
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	42a6      	cmp	r6, r4
 800b69c:	d105      	bne.n	800b6aa <__libc_init_array+0x2e>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	00b3      	lsls	r3, r6, #2
 800b6a2:	58eb      	ldr	r3, [r5, r3]
 800b6a4:	4798      	blx	r3
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	e7ee      	b.n	800b688 <__libc_init_array+0xc>
 800b6aa:	00b3      	lsls	r3, r6, #2
 800b6ac:	58eb      	ldr	r3, [r5, r3]
 800b6ae:	4798      	blx	r3
 800b6b0:	3601      	adds	r6, #1
 800b6b2:	e7f2      	b.n	800b69a <__libc_init_array+0x1e>
 800b6b4:	0800fd38 	.word	0x0800fd38
 800b6b8:	0800fd38 	.word	0x0800fd38
 800b6bc:	0800fd38 	.word	0x0800fd38
 800b6c0:	0800fd3c 	.word	0x0800fd3c

0800b6c4 <memset>:
 800b6c4:	0003      	movs	r3, r0
 800b6c6:	1882      	adds	r2, r0, r2
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <memset+0xa>
 800b6cc:	4770      	bx	lr
 800b6ce:	7019      	strb	r1, [r3, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	e7f9      	b.n	800b6c8 <memset+0x4>

0800b6d4 <siprintf>:
 800b6d4:	b40e      	push	{r1, r2, r3}
 800b6d6:	b500      	push	{lr}
 800b6d8:	490b      	ldr	r1, [pc, #44]	; (800b708 <siprintf+0x34>)
 800b6da:	b09c      	sub	sp, #112	; 0x70
 800b6dc:	ab1d      	add	r3, sp, #116	; 0x74
 800b6de:	9002      	str	r0, [sp, #8]
 800b6e0:	9006      	str	r0, [sp, #24]
 800b6e2:	9107      	str	r1, [sp, #28]
 800b6e4:	9104      	str	r1, [sp, #16]
 800b6e6:	4809      	ldr	r0, [pc, #36]	; (800b70c <siprintf+0x38>)
 800b6e8:	4909      	ldr	r1, [pc, #36]	; (800b710 <siprintf+0x3c>)
 800b6ea:	cb04      	ldmia	r3!, {r2}
 800b6ec:	9105      	str	r1, [sp, #20]
 800b6ee:	6800      	ldr	r0, [r0, #0]
 800b6f0:	a902      	add	r1, sp, #8
 800b6f2:	9301      	str	r3, [sp, #4]
 800b6f4:	f000 f870 	bl	800b7d8 <_svfiprintf_r>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9a02      	ldr	r2, [sp, #8]
 800b6fc:	7013      	strb	r3, [r2, #0]
 800b6fe:	b01c      	add	sp, #112	; 0x70
 800b700:	bc08      	pop	{r3}
 800b702:	b003      	add	sp, #12
 800b704:	4718      	bx	r3
 800b706:	46c0      	nop			; (mov r8, r8)
 800b708:	7fffffff 	.word	0x7fffffff
 800b70c:	200000a0 	.word	0x200000a0
 800b710:	ffff0208 	.word	0xffff0208

0800b714 <__ssputs_r>:
 800b714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b716:	688e      	ldr	r6, [r1, #8]
 800b718:	b085      	sub	sp, #20
 800b71a:	0007      	movs	r7, r0
 800b71c:	000c      	movs	r4, r1
 800b71e:	9203      	str	r2, [sp, #12]
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	429e      	cmp	r6, r3
 800b724:	d83c      	bhi.n	800b7a0 <__ssputs_r+0x8c>
 800b726:	2390      	movs	r3, #144	; 0x90
 800b728:	898a      	ldrh	r2, [r1, #12]
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	421a      	tst	r2, r3
 800b72e:	d034      	beq.n	800b79a <__ssputs_r+0x86>
 800b730:	2503      	movs	r5, #3
 800b732:	6909      	ldr	r1, [r1, #16]
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	1a5b      	subs	r3, r3, r1
 800b738:	9302      	str	r3, [sp, #8]
 800b73a:	6963      	ldr	r3, [r4, #20]
 800b73c:	9802      	ldr	r0, [sp, #8]
 800b73e:	435d      	muls	r5, r3
 800b740:	0feb      	lsrs	r3, r5, #31
 800b742:	195d      	adds	r5, r3, r5
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	106d      	asrs	r5, r5, #1
 800b748:	3301      	adds	r3, #1
 800b74a:	181b      	adds	r3, r3, r0
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	d900      	bls.n	800b752 <__ssputs_r+0x3e>
 800b750:	001d      	movs	r5, r3
 800b752:	0553      	lsls	r3, r2, #21
 800b754:	d532      	bpl.n	800b7bc <__ssputs_r+0xa8>
 800b756:	0029      	movs	r1, r5
 800b758:	0038      	movs	r0, r7
 800b75a:	f000 fb31 	bl	800bdc0 <_malloc_r>
 800b75e:	1e06      	subs	r6, r0, #0
 800b760:	d109      	bne.n	800b776 <__ssputs_r+0x62>
 800b762:	230c      	movs	r3, #12
 800b764:	603b      	str	r3, [r7, #0]
 800b766:	2340      	movs	r3, #64	; 0x40
 800b768:	2001      	movs	r0, #1
 800b76a:	89a2      	ldrh	r2, [r4, #12]
 800b76c:	4240      	negs	r0, r0
 800b76e:	4313      	orrs	r3, r2
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	b005      	add	sp, #20
 800b774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b776:	9a02      	ldr	r2, [sp, #8]
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	f000 faba 	bl	800bcf2 <memcpy>
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	4a14      	ldr	r2, [pc, #80]	; (800b7d4 <__ssputs_r+0xc0>)
 800b782:	401a      	ands	r2, r3
 800b784:	2380      	movs	r3, #128	; 0x80
 800b786:	4313      	orrs	r3, r2
 800b788:	81a3      	strh	r3, [r4, #12]
 800b78a:	9b02      	ldr	r3, [sp, #8]
 800b78c:	6126      	str	r6, [r4, #16]
 800b78e:	18f6      	adds	r6, r6, r3
 800b790:	6026      	str	r6, [r4, #0]
 800b792:	6165      	str	r5, [r4, #20]
 800b794:	9e01      	ldr	r6, [sp, #4]
 800b796:	1aed      	subs	r5, r5, r3
 800b798:	60a5      	str	r5, [r4, #8]
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	429e      	cmp	r6, r3
 800b79e:	d900      	bls.n	800b7a2 <__ssputs_r+0x8e>
 800b7a0:	9e01      	ldr	r6, [sp, #4]
 800b7a2:	0032      	movs	r2, r6
 800b7a4:	9903      	ldr	r1, [sp, #12]
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	f000 faac 	bl	800bd04 <memmove>
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	1b9b      	subs	r3, r3, r6
 800b7b2:	60a3      	str	r3, [r4, #8]
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	199e      	adds	r6, r3, r6
 800b7b8:	6026      	str	r6, [r4, #0]
 800b7ba:	e7da      	b.n	800b772 <__ssputs_r+0x5e>
 800b7bc:	002a      	movs	r2, r5
 800b7be:	0038      	movs	r0, r7
 800b7c0:	f000 fb5c 	bl	800be7c <_realloc_r>
 800b7c4:	1e06      	subs	r6, r0, #0
 800b7c6:	d1e0      	bne.n	800b78a <__ssputs_r+0x76>
 800b7c8:	0038      	movs	r0, r7
 800b7ca:	6921      	ldr	r1, [r4, #16]
 800b7cc:	f000 faae 	bl	800bd2c <_free_r>
 800b7d0:	e7c7      	b.n	800b762 <__ssputs_r+0x4e>
 800b7d2:	46c0      	nop			; (mov r8, r8)
 800b7d4:	fffffb7f 	.word	0xfffffb7f

0800b7d8 <_svfiprintf_r>:
 800b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7da:	b0a1      	sub	sp, #132	; 0x84
 800b7dc:	9003      	str	r0, [sp, #12]
 800b7de:	001d      	movs	r5, r3
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	000f      	movs	r7, r1
 800b7e4:	0016      	movs	r6, r2
 800b7e6:	061b      	lsls	r3, r3, #24
 800b7e8:	d511      	bpl.n	800b80e <_svfiprintf_r+0x36>
 800b7ea:	690b      	ldr	r3, [r1, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10e      	bne.n	800b80e <_svfiprintf_r+0x36>
 800b7f0:	2140      	movs	r1, #64	; 0x40
 800b7f2:	f000 fae5 	bl	800bdc0 <_malloc_r>
 800b7f6:	6038      	str	r0, [r7, #0]
 800b7f8:	6138      	str	r0, [r7, #16]
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d105      	bne.n	800b80a <_svfiprintf_r+0x32>
 800b7fe:	230c      	movs	r3, #12
 800b800:	9a03      	ldr	r2, [sp, #12]
 800b802:	3801      	subs	r0, #1
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	b021      	add	sp, #132	; 0x84
 800b808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80a:	2340      	movs	r3, #64	; 0x40
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	2300      	movs	r3, #0
 800b810:	ac08      	add	r4, sp, #32
 800b812:	6163      	str	r3, [r4, #20]
 800b814:	3320      	adds	r3, #32
 800b816:	7663      	strb	r3, [r4, #25]
 800b818:	3310      	adds	r3, #16
 800b81a:	76a3      	strb	r3, [r4, #26]
 800b81c:	9507      	str	r5, [sp, #28]
 800b81e:	0035      	movs	r5, r6
 800b820:	782b      	ldrb	r3, [r5, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <_svfiprintf_r+0x52>
 800b826:	2b25      	cmp	r3, #37	; 0x25
 800b828:	d147      	bne.n	800b8ba <_svfiprintf_r+0xe2>
 800b82a:	1bab      	subs	r3, r5, r6
 800b82c:	9305      	str	r3, [sp, #20]
 800b82e:	42b5      	cmp	r5, r6
 800b830:	d00c      	beq.n	800b84c <_svfiprintf_r+0x74>
 800b832:	0032      	movs	r2, r6
 800b834:	0039      	movs	r1, r7
 800b836:	9803      	ldr	r0, [sp, #12]
 800b838:	f7ff ff6c 	bl	800b714 <__ssputs_r>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d100      	bne.n	800b842 <_svfiprintf_r+0x6a>
 800b840:	e0ae      	b.n	800b9a0 <_svfiprintf_r+0x1c8>
 800b842:	6962      	ldr	r2, [r4, #20]
 800b844:	9b05      	ldr	r3, [sp, #20]
 800b846:	4694      	mov	ip, r2
 800b848:	4463      	add	r3, ip
 800b84a:	6163      	str	r3, [r4, #20]
 800b84c:	782b      	ldrb	r3, [r5, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d100      	bne.n	800b854 <_svfiprintf_r+0x7c>
 800b852:	e0a5      	b.n	800b9a0 <_svfiprintf_r+0x1c8>
 800b854:	2201      	movs	r2, #1
 800b856:	2300      	movs	r3, #0
 800b858:	4252      	negs	r2, r2
 800b85a:	6062      	str	r2, [r4, #4]
 800b85c:	a904      	add	r1, sp, #16
 800b85e:	3254      	adds	r2, #84	; 0x54
 800b860:	1852      	adds	r2, r2, r1
 800b862:	1c6e      	adds	r6, r5, #1
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	60e3      	str	r3, [r4, #12]
 800b868:	60a3      	str	r3, [r4, #8]
 800b86a:	7013      	strb	r3, [r2, #0]
 800b86c:	65a3      	str	r3, [r4, #88]	; 0x58
 800b86e:	2205      	movs	r2, #5
 800b870:	7831      	ldrb	r1, [r6, #0]
 800b872:	4854      	ldr	r0, [pc, #336]	; (800b9c4 <_svfiprintf_r+0x1ec>)
 800b874:	f000 fa32 	bl	800bcdc <memchr>
 800b878:	1c75      	adds	r5, r6, #1
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d11f      	bne.n	800b8be <_svfiprintf_r+0xe6>
 800b87e:	6822      	ldr	r2, [r4, #0]
 800b880:	06d3      	lsls	r3, r2, #27
 800b882:	d504      	bpl.n	800b88e <_svfiprintf_r+0xb6>
 800b884:	2353      	movs	r3, #83	; 0x53
 800b886:	a904      	add	r1, sp, #16
 800b888:	185b      	adds	r3, r3, r1
 800b88a:	2120      	movs	r1, #32
 800b88c:	7019      	strb	r1, [r3, #0]
 800b88e:	0713      	lsls	r3, r2, #28
 800b890:	d504      	bpl.n	800b89c <_svfiprintf_r+0xc4>
 800b892:	2353      	movs	r3, #83	; 0x53
 800b894:	a904      	add	r1, sp, #16
 800b896:	185b      	adds	r3, r3, r1
 800b898:	212b      	movs	r1, #43	; 0x2b
 800b89a:	7019      	strb	r1, [r3, #0]
 800b89c:	7833      	ldrb	r3, [r6, #0]
 800b89e:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a0:	d016      	beq.n	800b8d0 <_svfiprintf_r+0xf8>
 800b8a2:	0035      	movs	r5, r6
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	200a      	movs	r0, #10
 800b8a8:	68e3      	ldr	r3, [r4, #12]
 800b8aa:	782a      	ldrb	r2, [r5, #0]
 800b8ac:	1c6e      	adds	r6, r5, #1
 800b8ae:	3a30      	subs	r2, #48	; 0x30
 800b8b0:	2a09      	cmp	r2, #9
 800b8b2:	d94e      	bls.n	800b952 <_svfiprintf_r+0x17a>
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	d111      	bne.n	800b8dc <_svfiprintf_r+0x104>
 800b8b8:	e017      	b.n	800b8ea <_svfiprintf_r+0x112>
 800b8ba:	3501      	adds	r5, #1
 800b8bc:	e7b0      	b.n	800b820 <_svfiprintf_r+0x48>
 800b8be:	4b41      	ldr	r3, [pc, #260]	; (800b9c4 <_svfiprintf_r+0x1ec>)
 800b8c0:	6822      	ldr	r2, [r4, #0]
 800b8c2:	1ac0      	subs	r0, r0, r3
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	4083      	lsls	r3, r0
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	002e      	movs	r6, r5
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	e7ce      	b.n	800b86e <_svfiprintf_r+0x96>
 800b8d0:	9b07      	ldr	r3, [sp, #28]
 800b8d2:	1d19      	adds	r1, r3, #4
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	9107      	str	r1, [sp, #28]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	db01      	blt.n	800b8e0 <_svfiprintf_r+0x108>
 800b8dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8de:	e004      	b.n	800b8ea <_svfiprintf_r+0x112>
 800b8e0:	425b      	negs	r3, r3
 800b8e2:	60e3      	str	r3, [r4, #12]
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	782b      	ldrb	r3, [r5, #0]
 800b8ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ee:	d10a      	bne.n	800b906 <_svfiprintf_r+0x12e>
 800b8f0:	786b      	ldrb	r3, [r5, #1]
 800b8f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f4:	d135      	bne.n	800b962 <_svfiprintf_r+0x18a>
 800b8f6:	9b07      	ldr	r3, [sp, #28]
 800b8f8:	3502      	adds	r5, #2
 800b8fa:	1d1a      	adds	r2, r3, #4
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	9207      	str	r2, [sp, #28]
 800b900:	2b00      	cmp	r3, #0
 800b902:	db2b      	blt.n	800b95c <_svfiprintf_r+0x184>
 800b904:	9309      	str	r3, [sp, #36]	; 0x24
 800b906:	4e30      	ldr	r6, [pc, #192]	; (800b9c8 <_svfiprintf_r+0x1f0>)
 800b908:	2203      	movs	r2, #3
 800b90a:	0030      	movs	r0, r6
 800b90c:	7829      	ldrb	r1, [r5, #0]
 800b90e:	f000 f9e5 	bl	800bcdc <memchr>
 800b912:	2800      	cmp	r0, #0
 800b914:	d006      	beq.n	800b924 <_svfiprintf_r+0x14c>
 800b916:	2340      	movs	r3, #64	; 0x40
 800b918:	1b80      	subs	r0, r0, r6
 800b91a:	4083      	lsls	r3, r0
 800b91c:	6822      	ldr	r2, [r4, #0]
 800b91e:	3501      	adds	r5, #1
 800b920:	4313      	orrs	r3, r2
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	7829      	ldrb	r1, [r5, #0]
 800b926:	2206      	movs	r2, #6
 800b928:	4828      	ldr	r0, [pc, #160]	; (800b9cc <_svfiprintf_r+0x1f4>)
 800b92a:	1c6e      	adds	r6, r5, #1
 800b92c:	7621      	strb	r1, [r4, #24]
 800b92e:	f000 f9d5 	bl	800bcdc <memchr>
 800b932:	2800      	cmp	r0, #0
 800b934:	d03c      	beq.n	800b9b0 <_svfiprintf_r+0x1d8>
 800b936:	4b26      	ldr	r3, [pc, #152]	; (800b9d0 <_svfiprintf_r+0x1f8>)
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d125      	bne.n	800b988 <_svfiprintf_r+0x1b0>
 800b93c:	2207      	movs	r2, #7
 800b93e:	9b07      	ldr	r3, [sp, #28]
 800b940:	3307      	adds	r3, #7
 800b942:	4393      	bics	r3, r2
 800b944:	3308      	adds	r3, #8
 800b946:	9307      	str	r3, [sp, #28]
 800b948:	6963      	ldr	r3, [r4, #20]
 800b94a:	9a04      	ldr	r2, [sp, #16]
 800b94c:	189b      	adds	r3, r3, r2
 800b94e:	6163      	str	r3, [r4, #20]
 800b950:	e765      	b.n	800b81e <_svfiprintf_r+0x46>
 800b952:	4343      	muls	r3, r0
 800b954:	0035      	movs	r5, r6
 800b956:	2101      	movs	r1, #1
 800b958:	189b      	adds	r3, r3, r2
 800b95a:	e7a6      	b.n	800b8aa <_svfiprintf_r+0xd2>
 800b95c:	2301      	movs	r3, #1
 800b95e:	425b      	negs	r3, r3
 800b960:	e7d0      	b.n	800b904 <_svfiprintf_r+0x12c>
 800b962:	2300      	movs	r3, #0
 800b964:	200a      	movs	r0, #10
 800b966:	001a      	movs	r2, r3
 800b968:	3501      	adds	r5, #1
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	7829      	ldrb	r1, [r5, #0]
 800b96e:	1c6e      	adds	r6, r5, #1
 800b970:	3930      	subs	r1, #48	; 0x30
 800b972:	2909      	cmp	r1, #9
 800b974:	d903      	bls.n	800b97e <_svfiprintf_r+0x1a6>
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0c5      	beq.n	800b906 <_svfiprintf_r+0x12e>
 800b97a:	9209      	str	r2, [sp, #36]	; 0x24
 800b97c:	e7c3      	b.n	800b906 <_svfiprintf_r+0x12e>
 800b97e:	4342      	muls	r2, r0
 800b980:	0035      	movs	r5, r6
 800b982:	2301      	movs	r3, #1
 800b984:	1852      	adds	r2, r2, r1
 800b986:	e7f1      	b.n	800b96c <_svfiprintf_r+0x194>
 800b988:	ab07      	add	r3, sp, #28
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	003a      	movs	r2, r7
 800b98e:	0021      	movs	r1, r4
 800b990:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <_svfiprintf_r+0x1fc>)
 800b992:	9803      	ldr	r0, [sp, #12]
 800b994:	e000      	b.n	800b998 <_svfiprintf_r+0x1c0>
 800b996:	bf00      	nop
 800b998:	9004      	str	r0, [sp, #16]
 800b99a:	9b04      	ldr	r3, [sp, #16]
 800b99c:	3301      	adds	r3, #1
 800b99e:	d1d3      	bne.n	800b948 <_svfiprintf_r+0x170>
 800b9a0:	89bb      	ldrh	r3, [r7, #12]
 800b9a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b9a4:	065b      	lsls	r3, r3, #25
 800b9a6:	d400      	bmi.n	800b9aa <_svfiprintf_r+0x1d2>
 800b9a8:	e72d      	b.n	800b806 <_svfiprintf_r+0x2e>
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	4240      	negs	r0, r0
 800b9ae:	e72a      	b.n	800b806 <_svfiprintf_r+0x2e>
 800b9b0:	ab07      	add	r3, sp, #28
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	003a      	movs	r2, r7
 800b9b6:	0021      	movs	r1, r4
 800b9b8:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <_svfiprintf_r+0x1fc>)
 800b9ba:	9803      	ldr	r0, [sp, #12]
 800b9bc:	f000 f87c 	bl	800bab8 <_printf_i>
 800b9c0:	e7ea      	b.n	800b998 <_svfiprintf_r+0x1c0>
 800b9c2:	46c0      	nop			; (mov r8, r8)
 800b9c4:	0800fcfc 	.word	0x0800fcfc
 800b9c8:	0800fd02 	.word	0x0800fd02
 800b9cc:	0800fd06 	.word	0x0800fd06
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	0800b715 	.word	0x0800b715

0800b9d8 <_printf_common>:
 800b9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9da:	0015      	movs	r5, r2
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	688a      	ldr	r2, [r1, #8]
 800b9e0:	690b      	ldr	r3, [r1, #16]
 800b9e2:	000c      	movs	r4, r1
 800b9e4:	9000      	str	r0, [sp, #0]
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	da00      	bge.n	800b9ec <_printf_common+0x14>
 800b9ea:	0013      	movs	r3, r2
 800b9ec:	0022      	movs	r2, r4
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	3243      	adds	r2, #67	; 0x43
 800b9f2:	7812      	ldrb	r2, [r2, #0]
 800b9f4:	2a00      	cmp	r2, #0
 800b9f6:	d001      	beq.n	800b9fc <_printf_common+0x24>
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	069b      	lsls	r3, r3, #26
 800ba00:	d502      	bpl.n	800ba08 <_printf_common+0x30>
 800ba02:	682b      	ldr	r3, [r5, #0]
 800ba04:	3302      	adds	r3, #2
 800ba06:	602b      	str	r3, [r5, #0]
 800ba08:	6822      	ldr	r2, [r4, #0]
 800ba0a:	2306      	movs	r3, #6
 800ba0c:	0017      	movs	r7, r2
 800ba0e:	401f      	ands	r7, r3
 800ba10:	421a      	tst	r2, r3
 800ba12:	d027      	beq.n	800ba64 <_printf_common+0x8c>
 800ba14:	0023      	movs	r3, r4
 800ba16:	3343      	adds	r3, #67	; 0x43
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	1e5a      	subs	r2, r3, #1
 800ba1c:	4193      	sbcs	r3, r2
 800ba1e:	6822      	ldr	r2, [r4, #0]
 800ba20:	0692      	lsls	r2, r2, #26
 800ba22:	d430      	bmi.n	800ba86 <_printf_common+0xae>
 800ba24:	0022      	movs	r2, r4
 800ba26:	9901      	ldr	r1, [sp, #4]
 800ba28:	9800      	ldr	r0, [sp, #0]
 800ba2a:	9e08      	ldr	r6, [sp, #32]
 800ba2c:	3243      	adds	r2, #67	; 0x43
 800ba2e:	47b0      	blx	r6
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d025      	beq.n	800ba80 <_printf_common+0xa8>
 800ba34:	2306      	movs	r3, #6
 800ba36:	6820      	ldr	r0, [r4, #0]
 800ba38:	682a      	ldr	r2, [r5, #0]
 800ba3a:	68e1      	ldr	r1, [r4, #12]
 800ba3c:	2500      	movs	r5, #0
 800ba3e:	4003      	ands	r3, r0
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d103      	bne.n	800ba4c <_printf_common+0x74>
 800ba44:	1a8d      	subs	r5, r1, r2
 800ba46:	43eb      	mvns	r3, r5
 800ba48:	17db      	asrs	r3, r3, #31
 800ba4a:	401d      	ands	r5, r3
 800ba4c:	68a3      	ldr	r3, [r4, #8]
 800ba4e:	6922      	ldr	r2, [r4, #16]
 800ba50:	4293      	cmp	r3, r2
 800ba52:	dd01      	ble.n	800ba58 <_printf_common+0x80>
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	18ed      	adds	r5, r5, r3
 800ba58:	2700      	movs	r7, #0
 800ba5a:	42bd      	cmp	r5, r7
 800ba5c:	d120      	bne.n	800baa0 <_printf_common+0xc8>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e010      	b.n	800ba84 <_printf_common+0xac>
 800ba62:	3701      	adds	r7, #1
 800ba64:	68e3      	ldr	r3, [r4, #12]
 800ba66:	682a      	ldr	r2, [r5, #0]
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	42bb      	cmp	r3, r7
 800ba6c:	ddd2      	ble.n	800ba14 <_printf_common+0x3c>
 800ba6e:	0022      	movs	r2, r4
 800ba70:	2301      	movs	r3, #1
 800ba72:	9901      	ldr	r1, [sp, #4]
 800ba74:	9800      	ldr	r0, [sp, #0]
 800ba76:	9e08      	ldr	r6, [sp, #32]
 800ba78:	3219      	adds	r2, #25
 800ba7a:	47b0      	blx	r6
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d1f0      	bne.n	800ba62 <_printf_common+0x8a>
 800ba80:	2001      	movs	r0, #1
 800ba82:	4240      	negs	r0, r0
 800ba84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba86:	2030      	movs	r0, #48	; 0x30
 800ba88:	18e1      	adds	r1, r4, r3
 800ba8a:	3143      	adds	r1, #67	; 0x43
 800ba8c:	7008      	strb	r0, [r1, #0]
 800ba8e:	0021      	movs	r1, r4
 800ba90:	1c5a      	adds	r2, r3, #1
 800ba92:	3145      	adds	r1, #69	; 0x45
 800ba94:	7809      	ldrb	r1, [r1, #0]
 800ba96:	18a2      	adds	r2, r4, r2
 800ba98:	3243      	adds	r2, #67	; 0x43
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	7011      	strb	r1, [r2, #0]
 800ba9e:	e7c1      	b.n	800ba24 <_printf_common+0x4c>
 800baa0:	0022      	movs	r2, r4
 800baa2:	2301      	movs	r3, #1
 800baa4:	9901      	ldr	r1, [sp, #4]
 800baa6:	9800      	ldr	r0, [sp, #0]
 800baa8:	9e08      	ldr	r6, [sp, #32]
 800baaa:	321a      	adds	r2, #26
 800baac:	47b0      	blx	r6
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d0e6      	beq.n	800ba80 <_printf_common+0xa8>
 800bab2:	3701      	adds	r7, #1
 800bab4:	e7d1      	b.n	800ba5a <_printf_common+0x82>
	...

0800bab8 <_printf_i>:
 800bab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baba:	b08b      	sub	sp, #44	; 0x2c
 800babc:	9206      	str	r2, [sp, #24]
 800babe:	000a      	movs	r2, r1
 800bac0:	3243      	adds	r2, #67	; 0x43
 800bac2:	9307      	str	r3, [sp, #28]
 800bac4:	9005      	str	r0, [sp, #20]
 800bac6:	9204      	str	r2, [sp, #16]
 800bac8:	7e0a      	ldrb	r2, [r1, #24]
 800baca:	000c      	movs	r4, r1
 800bacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bace:	2a78      	cmp	r2, #120	; 0x78
 800bad0:	d806      	bhi.n	800bae0 <_printf_i+0x28>
 800bad2:	2a62      	cmp	r2, #98	; 0x62
 800bad4:	d808      	bhi.n	800bae8 <_printf_i+0x30>
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	d100      	bne.n	800badc <_printf_i+0x24>
 800bada:	e0c0      	b.n	800bc5e <_printf_i+0x1a6>
 800badc:	2a58      	cmp	r2, #88	; 0x58
 800bade:	d052      	beq.n	800bb86 <_printf_i+0xce>
 800bae0:	0026      	movs	r6, r4
 800bae2:	3642      	adds	r6, #66	; 0x42
 800bae4:	7032      	strb	r2, [r6, #0]
 800bae6:	e022      	b.n	800bb2e <_printf_i+0x76>
 800bae8:	0010      	movs	r0, r2
 800baea:	3863      	subs	r0, #99	; 0x63
 800baec:	2815      	cmp	r0, #21
 800baee:	d8f7      	bhi.n	800bae0 <_printf_i+0x28>
 800baf0:	f7f4 fb10 	bl	8000114 <__gnu_thumb1_case_shi>
 800baf4:	001f0016 	.word	0x001f0016
 800baf8:	fff6fff6 	.word	0xfff6fff6
 800bafc:	fff6fff6 	.word	0xfff6fff6
 800bb00:	fff6001f 	.word	0xfff6001f
 800bb04:	fff6fff6 	.word	0xfff6fff6
 800bb08:	00a8fff6 	.word	0x00a8fff6
 800bb0c:	009a0036 	.word	0x009a0036
 800bb10:	fff6fff6 	.word	0xfff6fff6
 800bb14:	fff600b9 	.word	0xfff600b9
 800bb18:	fff60036 	.word	0xfff60036
 800bb1c:	009efff6 	.word	0x009efff6
 800bb20:	0026      	movs	r6, r4
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	3642      	adds	r6, #66	; 0x42
 800bb26:	1d11      	adds	r1, r2, #4
 800bb28:	6019      	str	r1, [r3, #0]
 800bb2a:	6813      	ldr	r3, [r2, #0]
 800bb2c:	7033      	strb	r3, [r6, #0]
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e0a7      	b.n	800bc82 <_printf_i+0x1ca>
 800bb32:	6808      	ldr	r0, [r1, #0]
 800bb34:	6819      	ldr	r1, [r3, #0]
 800bb36:	1d0a      	adds	r2, r1, #4
 800bb38:	0605      	lsls	r5, r0, #24
 800bb3a:	d50b      	bpl.n	800bb54 <_printf_i+0x9c>
 800bb3c:	680d      	ldr	r5, [r1, #0]
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	2d00      	cmp	r5, #0
 800bb42:	da03      	bge.n	800bb4c <_printf_i+0x94>
 800bb44:	232d      	movs	r3, #45	; 0x2d
 800bb46:	9a04      	ldr	r2, [sp, #16]
 800bb48:	426d      	negs	r5, r5
 800bb4a:	7013      	strb	r3, [r2, #0]
 800bb4c:	4b61      	ldr	r3, [pc, #388]	; (800bcd4 <_printf_i+0x21c>)
 800bb4e:	270a      	movs	r7, #10
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	e032      	b.n	800bbba <_printf_i+0x102>
 800bb54:	680d      	ldr	r5, [r1, #0]
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	0641      	lsls	r1, r0, #25
 800bb5a:	d5f1      	bpl.n	800bb40 <_printf_i+0x88>
 800bb5c:	b22d      	sxth	r5, r5
 800bb5e:	e7ef      	b.n	800bb40 <_printf_i+0x88>
 800bb60:	680d      	ldr	r5, [r1, #0]
 800bb62:	6819      	ldr	r1, [r3, #0]
 800bb64:	1d08      	adds	r0, r1, #4
 800bb66:	6018      	str	r0, [r3, #0]
 800bb68:	062e      	lsls	r6, r5, #24
 800bb6a:	d501      	bpl.n	800bb70 <_printf_i+0xb8>
 800bb6c:	680d      	ldr	r5, [r1, #0]
 800bb6e:	e003      	b.n	800bb78 <_printf_i+0xc0>
 800bb70:	066d      	lsls	r5, r5, #25
 800bb72:	d5fb      	bpl.n	800bb6c <_printf_i+0xb4>
 800bb74:	680d      	ldr	r5, [r1, #0]
 800bb76:	b2ad      	uxth	r5, r5
 800bb78:	4b56      	ldr	r3, [pc, #344]	; (800bcd4 <_printf_i+0x21c>)
 800bb7a:	270a      	movs	r7, #10
 800bb7c:	9303      	str	r3, [sp, #12]
 800bb7e:	2a6f      	cmp	r2, #111	; 0x6f
 800bb80:	d117      	bne.n	800bbb2 <_printf_i+0xfa>
 800bb82:	2708      	movs	r7, #8
 800bb84:	e015      	b.n	800bbb2 <_printf_i+0xfa>
 800bb86:	3145      	adds	r1, #69	; 0x45
 800bb88:	700a      	strb	r2, [r1, #0]
 800bb8a:	4a52      	ldr	r2, [pc, #328]	; (800bcd4 <_printf_i+0x21c>)
 800bb8c:	9203      	str	r2, [sp, #12]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	6821      	ldr	r1, [r4, #0]
 800bb92:	ca20      	ldmia	r2!, {r5}
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	0608      	lsls	r0, r1, #24
 800bb98:	d550      	bpl.n	800bc3c <_printf_i+0x184>
 800bb9a:	07cb      	lsls	r3, r1, #31
 800bb9c:	d502      	bpl.n	800bba4 <_printf_i+0xec>
 800bb9e:	2320      	movs	r3, #32
 800bba0:	4319      	orrs	r1, r3
 800bba2:	6021      	str	r1, [r4, #0]
 800bba4:	2710      	movs	r7, #16
 800bba6:	2d00      	cmp	r5, #0
 800bba8:	d103      	bne.n	800bbb2 <_printf_i+0xfa>
 800bbaa:	2320      	movs	r3, #32
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	439a      	bics	r2, r3
 800bbb0:	6022      	str	r2, [r4, #0]
 800bbb2:	0023      	movs	r3, r4
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	3343      	adds	r3, #67	; 0x43
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	60a3      	str	r3, [r4, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	db03      	blt.n	800bbca <_printf_i+0x112>
 800bbc2:	2204      	movs	r2, #4
 800bbc4:	6821      	ldr	r1, [r4, #0]
 800bbc6:	4391      	bics	r1, r2
 800bbc8:	6021      	str	r1, [r4, #0]
 800bbca:	2d00      	cmp	r5, #0
 800bbcc:	d102      	bne.n	800bbd4 <_printf_i+0x11c>
 800bbce:	9e04      	ldr	r6, [sp, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00c      	beq.n	800bbee <_printf_i+0x136>
 800bbd4:	9e04      	ldr	r6, [sp, #16]
 800bbd6:	0028      	movs	r0, r5
 800bbd8:	0039      	movs	r1, r7
 800bbda:	f7f4 fb2b 	bl	8000234 <__aeabi_uidivmod>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	3e01      	subs	r6, #1
 800bbe2:	5c5b      	ldrb	r3, [r3, r1]
 800bbe4:	7033      	strb	r3, [r6, #0]
 800bbe6:	002b      	movs	r3, r5
 800bbe8:	0005      	movs	r5, r0
 800bbea:	429f      	cmp	r7, r3
 800bbec:	d9f3      	bls.n	800bbd6 <_printf_i+0x11e>
 800bbee:	2f08      	cmp	r7, #8
 800bbf0:	d109      	bne.n	800bc06 <_printf_i+0x14e>
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	07db      	lsls	r3, r3, #31
 800bbf6:	d506      	bpl.n	800bc06 <_printf_i+0x14e>
 800bbf8:	6863      	ldr	r3, [r4, #4]
 800bbfa:	6922      	ldr	r2, [r4, #16]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	dc02      	bgt.n	800bc06 <_printf_i+0x14e>
 800bc00:	2330      	movs	r3, #48	; 0x30
 800bc02:	3e01      	subs	r6, #1
 800bc04:	7033      	strb	r3, [r6, #0]
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	1b9b      	subs	r3, r3, r6
 800bc0a:	6123      	str	r3, [r4, #16]
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	0021      	movs	r1, r4
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	9805      	ldr	r0, [sp, #20]
 800bc14:	9b06      	ldr	r3, [sp, #24]
 800bc16:	aa09      	add	r2, sp, #36	; 0x24
 800bc18:	f7ff fede 	bl	800b9d8 <_printf_common>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d135      	bne.n	800bc8c <_printf_i+0x1d4>
 800bc20:	2001      	movs	r0, #1
 800bc22:	4240      	negs	r0, r0
 800bc24:	b00b      	add	sp, #44	; 0x2c
 800bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc28:	2220      	movs	r2, #32
 800bc2a:	6809      	ldr	r1, [r1, #0]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	6022      	str	r2, [r4, #0]
 800bc30:	0022      	movs	r2, r4
 800bc32:	2178      	movs	r1, #120	; 0x78
 800bc34:	3245      	adds	r2, #69	; 0x45
 800bc36:	7011      	strb	r1, [r2, #0]
 800bc38:	4a27      	ldr	r2, [pc, #156]	; (800bcd8 <_printf_i+0x220>)
 800bc3a:	e7a7      	b.n	800bb8c <_printf_i+0xd4>
 800bc3c:	0648      	lsls	r0, r1, #25
 800bc3e:	d5ac      	bpl.n	800bb9a <_printf_i+0xe2>
 800bc40:	b2ad      	uxth	r5, r5
 800bc42:	e7aa      	b.n	800bb9a <_printf_i+0xe2>
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	680d      	ldr	r5, [r1, #0]
 800bc48:	1d10      	adds	r0, r2, #4
 800bc4a:	6949      	ldr	r1, [r1, #20]
 800bc4c:	6018      	str	r0, [r3, #0]
 800bc4e:	6813      	ldr	r3, [r2, #0]
 800bc50:	062e      	lsls	r6, r5, #24
 800bc52:	d501      	bpl.n	800bc58 <_printf_i+0x1a0>
 800bc54:	6019      	str	r1, [r3, #0]
 800bc56:	e002      	b.n	800bc5e <_printf_i+0x1a6>
 800bc58:	066d      	lsls	r5, r5, #25
 800bc5a:	d5fb      	bpl.n	800bc54 <_printf_i+0x19c>
 800bc5c:	8019      	strh	r1, [r3, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	9e04      	ldr	r6, [sp, #16]
 800bc62:	6123      	str	r3, [r4, #16]
 800bc64:	e7d2      	b.n	800bc0c <_printf_i+0x154>
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	1d11      	adds	r1, r2, #4
 800bc6a:	6019      	str	r1, [r3, #0]
 800bc6c:	6816      	ldr	r6, [r2, #0]
 800bc6e:	2100      	movs	r1, #0
 800bc70:	0030      	movs	r0, r6
 800bc72:	6862      	ldr	r2, [r4, #4]
 800bc74:	f000 f832 	bl	800bcdc <memchr>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d001      	beq.n	800bc80 <_printf_i+0x1c8>
 800bc7c:	1b80      	subs	r0, r0, r6
 800bc7e:	6060      	str	r0, [r4, #4]
 800bc80:	6863      	ldr	r3, [r4, #4]
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	2300      	movs	r3, #0
 800bc86:	9a04      	ldr	r2, [sp, #16]
 800bc88:	7013      	strb	r3, [r2, #0]
 800bc8a:	e7bf      	b.n	800bc0c <_printf_i+0x154>
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	0032      	movs	r2, r6
 800bc90:	9906      	ldr	r1, [sp, #24]
 800bc92:	9805      	ldr	r0, [sp, #20]
 800bc94:	9d07      	ldr	r5, [sp, #28]
 800bc96:	47a8      	blx	r5
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d0c1      	beq.n	800bc20 <_printf_i+0x168>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	079b      	lsls	r3, r3, #30
 800bca0:	d415      	bmi.n	800bcce <_printf_i+0x216>
 800bca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca4:	68e0      	ldr	r0, [r4, #12]
 800bca6:	4298      	cmp	r0, r3
 800bca8:	dabc      	bge.n	800bc24 <_printf_i+0x16c>
 800bcaa:	0018      	movs	r0, r3
 800bcac:	e7ba      	b.n	800bc24 <_printf_i+0x16c>
 800bcae:	0022      	movs	r2, r4
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	9906      	ldr	r1, [sp, #24]
 800bcb4:	9805      	ldr	r0, [sp, #20]
 800bcb6:	9e07      	ldr	r6, [sp, #28]
 800bcb8:	3219      	adds	r2, #25
 800bcba:	47b0      	blx	r6
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d0af      	beq.n	800bc20 <_printf_i+0x168>
 800bcc0:	3501      	adds	r5, #1
 800bcc2:	68e3      	ldr	r3, [r4, #12]
 800bcc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc6:	1a9b      	subs	r3, r3, r2
 800bcc8:	42ab      	cmp	r3, r5
 800bcca:	dcf0      	bgt.n	800bcae <_printf_i+0x1f6>
 800bccc:	e7e9      	b.n	800bca2 <_printf_i+0x1ea>
 800bcce:	2500      	movs	r5, #0
 800bcd0:	e7f7      	b.n	800bcc2 <_printf_i+0x20a>
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	0800fd0d 	.word	0x0800fd0d
 800bcd8:	0800fd1e 	.word	0x0800fd1e

0800bcdc <memchr>:
 800bcdc:	b2c9      	uxtb	r1, r1
 800bcde:	1882      	adds	r2, r0, r2
 800bce0:	4290      	cmp	r0, r2
 800bce2:	d101      	bne.n	800bce8 <memchr+0xc>
 800bce4:	2000      	movs	r0, #0
 800bce6:	4770      	bx	lr
 800bce8:	7803      	ldrb	r3, [r0, #0]
 800bcea:	428b      	cmp	r3, r1
 800bcec:	d0fb      	beq.n	800bce6 <memchr+0xa>
 800bcee:	3001      	adds	r0, #1
 800bcf0:	e7f6      	b.n	800bce0 <memchr+0x4>

0800bcf2 <memcpy>:
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d100      	bne.n	800bcfc <memcpy+0xa>
 800bcfa:	bd10      	pop	{r4, pc}
 800bcfc:	5ccc      	ldrb	r4, [r1, r3]
 800bcfe:	54c4      	strb	r4, [r0, r3]
 800bd00:	3301      	adds	r3, #1
 800bd02:	e7f8      	b.n	800bcf6 <memcpy+0x4>

0800bd04 <memmove>:
 800bd04:	b510      	push	{r4, lr}
 800bd06:	4288      	cmp	r0, r1
 800bd08:	d902      	bls.n	800bd10 <memmove+0xc>
 800bd0a:	188b      	adds	r3, r1, r2
 800bd0c:	4298      	cmp	r0, r3
 800bd0e:	d303      	bcc.n	800bd18 <memmove+0x14>
 800bd10:	2300      	movs	r3, #0
 800bd12:	e007      	b.n	800bd24 <memmove+0x20>
 800bd14:	5c8b      	ldrb	r3, [r1, r2]
 800bd16:	5483      	strb	r3, [r0, r2]
 800bd18:	3a01      	subs	r2, #1
 800bd1a:	d2fb      	bcs.n	800bd14 <memmove+0x10>
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	5ccc      	ldrb	r4, [r1, r3]
 800bd20:	54c4      	strb	r4, [r0, r3]
 800bd22:	3301      	adds	r3, #1
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d1fa      	bne.n	800bd1e <memmove+0x1a>
 800bd28:	e7f8      	b.n	800bd1c <memmove+0x18>
	...

0800bd2c <_free_r>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	0005      	movs	r5, r0
 800bd30:	2900      	cmp	r1, #0
 800bd32:	d010      	beq.n	800bd56 <_free_r+0x2a>
 800bd34:	1f0c      	subs	r4, r1, #4
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	da00      	bge.n	800bd3e <_free_r+0x12>
 800bd3c:	18e4      	adds	r4, r4, r3
 800bd3e:	0028      	movs	r0, r5
 800bd40:	f000 f8d4 	bl	800beec <__malloc_lock>
 800bd44:	4a1d      	ldr	r2, [pc, #116]	; (800bdbc <_free_r+0x90>)
 800bd46:	6813      	ldr	r3, [r2, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d105      	bne.n	800bd58 <_free_r+0x2c>
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	6014      	str	r4, [r2, #0]
 800bd50:	0028      	movs	r0, r5
 800bd52:	f000 f8d3 	bl	800befc <__malloc_unlock>
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	42a3      	cmp	r3, r4
 800bd5a:	d908      	bls.n	800bd6e <_free_r+0x42>
 800bd5c:	6821      	ldr	r1, [r4, #0]
 800bd5e:	1860      	adds	r0, r4, r1
 800bd60:	4283      	cmp	r3, r0
 800bd62:	d1f3      	bne.n	800bd4c <_free_r+0x20>
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	1841      	adds	r1, r0, r1
 800bd6a:	6021      	str	r1, [r4, #0]
 800bd6c:	e7ee      	b.n	800bd4c <_free_r+0x20>
 800bd6e:	001a      	movs	r2, r3
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <_free_r+0x4e>
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	d9f9      	bls.n	800bd6e <_free_r+0x42>
 800bd7a:	6811      	ldr	r1, [r2, #0]
 800bd7c:	1850      	adds	r0, r2, r1
 800bd7e:	42a0      	cmp	r0, r4
 800bd80:	d10b      	bne.n	800bd9a <_free_r+0x6e>
 800bd82:	6820      	ldr	r0, [r4, #0]
 800bd84:	1809      	adds	r1, r1, r0
 800bd86:	1850      	adds	r0, r2, r1
 800bd88:	6011      	str	r1, [r2, #0]
 800bd8a:	4283      	cmp	r3, r0
 800bd8c:	d1e0      	bne.n	800bd50 <_free_r+0x24>
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	1841      	adds	r1, r0, r1
 800bd94:	6011      	str	r1, [r2, #0]
 800bd96:	6053      	str	r3, [r2, #4]
 800bd98:	e7da      	b.n	800bd50 <_free_r+0x24>
 800bd9a:	42a0      	cmp	r0, r4
 800bd9c:	d902      	bls.n	800bda4 <_free_r+0x78>
 800bd9e:	230c      	movs	r3, #12
 800bda0:	602b      	str	r3, [r5, #0]
 800bda2:	e7d5      	b.n	800bd50 <_free_r+0x24>
 800bda4:	6821      	ldr	r1, [r4, #0]
 800bda6:	1860      	adds	r0, r4, r1
 800bda8:	4283      	cmp	r3, r0
 800bdaa:	d103      	bne.n	800bdb4 <_free_r+0x88>
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	1841      	adds	r1, r0, r1
 800bdb2:	6021      	str	r1, [r4, #0]
 800bdb4:	6063      	str	r3, [r4, #4]
 800bdb6:	6054      	str	r4, [r2, #4]
 800bdb8:	e7ca      	b.n	800bd50 <_free_r+0x24>
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	20000168 	.word	0x20000168

0800bdc0 <_malloc_r>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	1ccd      	adds	r5, r1, #3
 800bdc6:	439d      	bics	r5, r3
 800bdc8:	3508      	adds	r5, #8
 800bdca:	0006      	movs	r6, r0
 800bdcc:	2d0c      	cmp	r5, #12
 800bdce:	d21f      	bcs.n	800be10 <_malloc_r+0x50>
 800bdd0:	250c      	movs	r5, #12
 800bdd2:	42a9      	cmp	r1, r5
 800bdd4:	d81e      	bhi.n	800be14 <_malloc_r+0x54>
 800bdd6:	0030      	movs	r0, r6
 800bdd8:	f000 f888 	bl	800beec <__malloc_lock>
 800bddc:	4925      	ldr	r1, [pc, #148]	; (800be74 <_malloc_r+0xb4>)
 800bdde:	680a      	ldr	r2, [r1, #0]
 800bde0:	0014      	movs	r4, r2
 800bde2:	2c00      	cmp	r4, #0
 800bde4:	d11a      	bne.n	800be1c <_malloc_r+0x5c>
 800bde6:	4f24      	ldr	r7, [pc, #144]	; (800be78 <_malloc_r+0xb8>)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d104      	bne.n	800bdf8 <_malloc_r+0x38>
 800bdee:	0021      	movs	r1, r4
 800bdf0:	0030      	movs	r0, r6
 800bdf2:	f000 f869 	bl	800bec8 <_sbrk_r>
 800bdf6:	6038      	str	r0, [r7, #0]
 800bdf8:	0029      	movs	r1, r5
 800bdfa:	0030      	movs	r0, r6
 800bdfc:	f000 f864 	bl	800bec8 <_sbrk_r>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d12b      	bne.n	800be5c <_malloc_r+0x9c>
 800be04:	230c      	movs	r3, #12
 800be06:	0030      	movs	r0, r6
 800be08:	6033      	str	r3, [r6, #0]
 800be0a:	f000 f877 	bl	800befc <__malloc_unlock>
 800be0e:	e003      	b.n	800be18 <_malloc_r+0x58>
 800be10:	2d00      	cmp	r5, #0
 800be12:	dade      	bge.n	800bdd2 <_malloc_r+0x12>
 800be14:	230c      	movs	r3, #12
 800be16:	6033      	str	r3, [r6, #0]
 800be18:	2000      	movs	r0, #0
 800be1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	1b5b      	subs	r3, r3, r5
 800be20:	d419      	bmi.n	800be56 <_malloc_r+0x96>
 800be22:	2b0b      	cmp	r3, #11
 800be24:	d903      	bls.n	800be2e <_malloc_r+0x6e>
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	18e4      	adds	r4, r4, r3
 800be2a:	6025      	str	r5, [r4, #0]
 800be2c:	e003      	b.n	800be36 <_malloc_r+0x76>
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	42a2      	cmp	r2, r4
 800be32:	d10e      	bne.n	800be52 <_malloc_r+0x92>
 800be34:	600b      	str	r3, [r1, #0]
 800be36:	0030      	movs	r0, r6
 800be38:	f000 f860 	bl	800befc <__malloc_unlock>
 800be3c:	0020      	movs	r0, r4
 800be3e:	2207      	movs	r2, #7
 800be40:	300b      	adds	r0, #11
 800be42:	1d23      	adds	r3, r4, #4
 800be44:	4390      	bics	r0, r2
 800be46:	1ac2      	subs	r2, r0, r3
 800be48:	4298      	cmp	r0, r3
 800be4a:	d0e6      	beq.n	800be1a <_malloc_r+0x5a>
 800be4c:	1a1b      	subs	r3, r3, r0
 800be4e:	50a3      	str	r3, [r4, r2]
 800be50:	e7e3      	b.n	800be1a <_malloc_r+0x5a>
 800be52:	6053      	str	r3, [r2, #4]
 800be54:	e7ef      	b.n	800be36 <_malloc_r+0x76>
 800be56:	0022      	movs	r2, r4
 800be58:	6864      	ldr	r4, [r4, #4]
 800be5a:	e7c2      	b.n	800bde2 <_malloc_r+0x22>
 800be5c:	2303      	movs	r3, #3
 800be5e:	1cc4      	adds	r4, r0, #3
 800be60:	439c      	bics	r4, r3
 800be62:	42a0      	cmp	r0, r4
 800be64:	d0e1      	beq.n	800be2a <_malloc_r+0x6a>
 800be66:	1a21      	subs	r1, r4, r0
 800be68:	0030      	movs	r0, r6
 800be6a:	f000 f82d 	bl	800bec8 <_sbrk_r>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d1db      	bne.n	800be2a <_malloc_r+0x6a>
 800be72:	e7c7      	b.n	800be04 <_malloc_r+0x44>
 800be74:	20000168 	.word	0x20000168
 800be78:	2000016c 	.word	0x2000016c

0800be7c <_realloc_r>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	0007      	movs	r7, r0
 800be80:	000d      	movs	r5, r1
 800be82:	0016      	movs	r6, r2
 800be84:	2900      	cmp	r1, #0
 800be86:	d105      	bne.n	800be94 <_realloc_r+0x18>
 800be88:	0011      	movs	r1, r2
 800be8a:	f7ff ff99 	bl	800bdc0 <_malloc_r>
 800be8e:	0004      	movs	r4, r0
 800be90:	0020      	movs	r0, r4
 800be92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be94:	2a00      	cmp	r2, #0
 800be96:	d103      	bne.n	800bea0 <_realloc_r+0x24>
 800be98:	f7ff ff48 	bl	800bd2c <_free_r>
 800be9c:	0034      	movs	r4, r6
 800be9e:	e7f7      	b.n	800be90 <_realloc_r+0x14>
 800bea0:	f000 f834 	bl	800bf0c <_malloc_usable_size_r>
 800bea4:	002c      	movs	r4, r5
 800bea6:	42b0      	cmp	r0, r6
 800bea8:	d2f2      	bcs.n	800be90 <_realloc_r+0x14>
 800beaa:	0031      	movs	r1, r6
 800beac:	0038      	movs	r0, r7
 800beae:	f7ff ff87 	bl	800bdc0 <_malloc_r>
 800beb2:	1e04      	subs	r4, r0, #0
 800beb4:	d0ec      	beq.n	800be90 <_realloc_r+0x14>
 800beb6:	0029      	movs	r1, r5
 800beb8:	0032      	movs	r2, r6
 800beba:	f7ff ff1a 	bl	800bcf2 <memcpy>
 800bebe:	0029      	movs	r1, r5
 800bec0:	0038      	movs	r0, r7
 800bec2:	f7ff ff33 	bl	800bd2c <_free_r>
 800bec6:	e7e3      	b.n	800be90 <_realloc_r+0x14>

0800bec8 <_sbrk_r>:
 800bec8:	2300      	movs	r3, #0
 800beca:	b570      	push	{r4, r5, r6, lr}
 800becc:	4d06      	ldr	r5, [pc, #24]	; (800bee8 <_sbrk_r+0x20>)
 800bece:	0004      	movs	r4, r0
 800bed0:	0008      	movs	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7fb fa14 	bl	8007300 <_sbrk>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d103      	bne.n	800bee4 <_sbrk_r+0x1c>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d000      	beq.n	800bee4 <_sbrk_r+0x1c>
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	bd70      	pop	{r4, r5, r6, pc}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	20005828 	.word	0x20005828

0800beec <__malloc_lock>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4802      	ldr	r0, [pc, #8]	; (800bef8 <__malloc_lock+0xc>)
 800bef0:	f000 f814 	bl	800bf1c <__retarget_lock_acquire_recursive>
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	46c0      	nop			; (mov r8, r8)
 800bef8:	20005830 	.word	0x20005830

0800befc <__malloc_unlock>:
 800befc:	b510      	push	{r4, lr}
 800befe:	4802      	ldr	r0, [pc, #8]	; (800bf08 <__malloc_unlock+0xc>)
 800bf00:	f000 f80d 	bl	800bf1e <__retarget_lock_release_recursive>
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	46c0      	nop			; (mov r8, r8)
 800bf08:	20005830 	.word	0x20005830

0800bf0c <_malloc_usable_size_r>:
 800bf0c:	1f0b      	subs	r3, r1, #4
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	1f18      	subs	r0, r3, #4
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da01      	bge.n	800bf1a <_malloc_usable_size_r+0xe>
 800bf16:	580b      	ldr	r3, [r1, r0]
 800bf18:	18c0      	adds	r0, r0, r3
 800bf1a:	4770      	bx	lr

0800bf1c <__retarget_lock_acquire_recursive>:
 800bf1c:	4770      	bx	lr

0800bf1e <__retarget_lock_release_recursive>:
 800bf1e:	4770      	bx	lr

0800bf20 <_init>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf26:	bc08      	pop	{r3}
 800bf28:	469e      	mov	lr, r3
 800bf2a:	4770      	bx	lr

0800bf2c <_fini>:
 800bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2e:	46c0      	nop			; (mov r8, r8)
 800bf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf32:	bc08      	pop	{r3}
 800bf34:	469e      	mov	lr, r3
 800bf36:	4770      	bx	lr
